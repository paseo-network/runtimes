
//! Autogenerated weights for `pallet_utility`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-02, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/paseo-runtime/paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/
// --steps
// 2
// --repeat
// 1

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_utility`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn batch(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `2693`
		// Minimum execution time: 18_695_000 picoseconds.
		Weight::from_parts(4_988_058_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn as_derivative() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 22_171_000 picoseconds.
		Weight::from_parts(22_171_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn batch_all(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `2693`
		// Minimum execution time: 23_734_000 picoseconds.
		Weight::from_parts(5_580_238_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn dispatch_as() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 30_226_000 picoseconds.
		Weight::from_parts(30_226_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn force_batch(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `2693`
		// Minimum execution time: 23_024_000 picoseconds.
		Weight::from_parts(5_192_812_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn dispatch_as_fallible() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 22_001_000 picoseconds.
		Weight::from_parts(22_001_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn if_else() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 31_489_000 picoseconds.
		Weight::from_parts(31_489_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
