
//! Autogenerated weights for `pallet_utility`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/paseo-runtime/paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_utility`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn batch(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 9_027_000 picoseconds.
		Weight::from_parts(21_428_987, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			// Standard Error: 38_679
			.saturating_add(Weight::from_parts(5_351_076, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn as_derivative() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 16_962_000 picoseconds.
		Weight::from_parts(18_224_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn batch_all(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 12_153_000 picoseconds.
		Weight::from_parts(83_392_548, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			// Standard Error: 41_956
			.saturating_add(Weight::from_parts(5_777_629, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn dispatch_as() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_806_000 picoseconds.
		Weight::from_parts(20_478_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn force_batch(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 8_206_000 picoseconds.
		Weight::from_parts(58_458_804, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			// Standard Error: 35_503
			.saturating_add(Weight::from_parts(5_267_183, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn dispatch_as_fallible() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_221_000 picoseconds.
		Weight::from_parts(13_114_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn if_else() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 18_334_000 picoseconds.
		Weight::from_parts(24_205_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
