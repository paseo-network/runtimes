
//! Autogenerated weights for `pallet_xcm_benchmarks::generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/paseo-runtime/paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_xcm_benchmarks::generic`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_xcm_benchmarks::generic::WeightInfo for WeightInfo<T> {
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_holding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284`
		//  Estimated: `3749`
		// Minimum execution time: 111_088_000 picoseconds.
		Weight::from_parts(116_779_000, 0)
			.saturating_add(Weight::from_parts(0, 3749))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn buy_execution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_141_000 picoseconds.
		Weight::from_parts(7_094_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn pay_fees() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_181_000 picoseconds.
		Weight::from_parts(11_371_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn asset_claimer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_242_000 picoseconds.
		Weight::from_parts(1_954_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `XcmPallet::Queries` (r:1 w:0)
	/// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn query_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3465`
		// Minimum execution time: 9_117_000 picoseconds.
		Weight::from_parts(10_780_000, 0)
			.saturating_add(Weight::from_parts(0, 3465))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	fn transact() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `2693`
		// Minimum execution time: 16_360_000 picoseconds.
		Weight::from_parts(18_315_000, 0)
			.saturating_add(Weight::from_parts(0, 2693))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn refund_surplus() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_833_000 picoseconds.
		Weight::from_parts(2_104_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_error_handler() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_312_000 picoseconds.
		Weight::from_parts(1_422_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_appendix() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_203_000 picoseconds.
		Weight::from_parts(1_412_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn clear_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_182_000 picoseconds.
		Weight::from_parts(1_262_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn descend_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_252_000 picoseconds.
		Weight::from_parts(1_413_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_with_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn clear_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_162_000 picoseconds.
		Weight::from_parts(1_233_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284`
		//  Estimated: `3749`
		// Minimum execution time: 109_645_000 picoseconds.
		Weight::from_parts(113_703_000, 0)
			.saturating_add(Weight::from_parts(0, 3749))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcmPallet::AssetTraps` (r:1 w:1)
	/// Proof: `XcmPallet::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn claim_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `23`
		//  Estimated: `3488`
		// Minimum execution time: 16_672_000 picoseconds.
		Weight::from_parts(18_114_000, 0)
			.saturating_add(Weight::from_parts(0, 3488))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn trap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_941_000 picoseconds.
		Weight::from_parts(6_703_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `XcmPallet::VersionNotifyTargets` (r:1 w:1)
	/// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn subscribe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `183`
		//  Estimated: `3648`
		// Minimum execution time: 58_700_000 picoseconds.
		Weight::from_parts(60_233_000, 0)
			.saturating_add(Weight::from_parts(0, 3648))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `XcmPallet::VersionNotifyTargets` (r:0 w:1)
	/// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unsubscribe_version() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_510_000 picoseconds.
		Weight::from_parts(6_101_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn burn_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_663_000 picoseconds.
		Weight::from_parts(1_954_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn expect_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_353_000 picoseconds.
		Weight::from_parts(1_523_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn expect_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_981_000 picoseconds.
		Weight::from_parts(6_603_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn expect_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_012_000 picoseconds.
		Weight::from_parts(6_512_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn expect_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_452_000 picoseconds.
		Weight::from_parts(1_503_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn query_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284`
		//  Estimated: `3749`
		// Minimum execution time: 124_904_000 picoseconds.
		Weight::from_parts(127_299_000, 0)
			.saturating_add(Weight::from_parts(0, 3749))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn expect_pallet() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 13_255_000 picoseconds.
		Weight::from_parts(14_037_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `RcMigrator::RcMigrationStage` (r:1 w:0)
	/// Proof: `RcMigrator::RcMigrationStage` (`max_values`: Some(1), `max_size`: Some(1208), added: 1703, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
	/// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
	/// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Paras::Heads` (r:1 w:0)
	/// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn report_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284`
		//  Estimated: `3749`
		// Minimum execution time: 108_884_000 picoseconds.
		Weight::from_parts(112_962_000, 0)
			.saturating_add(Weight::from_parts(0, 3749))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	fn clear_transact_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_383_000 picoseconds.
		Weight::from_parts(2_174_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_topic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_014_000 picoseconds.
		Weight::from_parts(2_315_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn clear_topic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_132_000 picoseconds.
		Weight::from_parts(1_703_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_fees_mode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_112_000 picoseconds.
		Weight::from_parts(1_263_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn unpaid_execution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_242_000 picoseconds.
		Weight::from_parts(1_493_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn alias_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_282_000 picoseconds.
		Weight::from_parts(2_304_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
