
//! Autogenerated weights for `runtime_parachains::on_demand`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/paseo-runtime/paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `runtime_parachains::on_demand`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> runtime_parachains::on_demand::WeightInfo for WeightInfo<T> {
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_keep_alive(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132 + s * (8 ±0)`
		//  Estimated: `3595 + s * (8 ±0)`
		// Minimum execution time: 62_097_000 picoseconds.
		Weight::from_parts(73_392_519, 0)
			.saturating_add(Weight::from_parts(0, 3595))
			// Standard Error: 289
			.saturating_add(Weight::from_parts(26_773, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_allow_death(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132 + s * (8 ±0)`
		//  Estimated: `3595 + s * (8 ±0)`
		// Minimum execution time: 60_333_000 picoseconds.
		Weight::from_parts(79_242_352, 0)
			.saturating_add(Weight::from_parts(0, 3595))
			// Standard Error: 277
			.saturating_add(Weight::from_parts(24_800, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
	/// Storage: `OnDemand::QueueStatus` (r:1 w:1)
	/// Proof: `OnDemand::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::Credits` (r:1 w:1)
	/// Proof: `OnDemand::Credits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::Revenue` (r:1 w:1)
	/// Proof: `OnDemand::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::ParaIdAffinity` (r:1 w:0)
	/// Proof: `OnDemand::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `OnDemand::FreeEntries` (r:1 w:1)
	/// Proof: `OnDemand::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[1, 9999]`.
	fn place_order_with_credits(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166 + s * (8 ±0)`
		//  Estimated: `3629 + s * (8 ±0)`
		// Minimum execution time: 34_074_000 picoseconds.
		Weight::from_parts(42_330_931, 0)
			.saturating_add(Weight::from_parts(0, 3629))
			// Standard Error: 247
			.saturating_add(Weight::from_parts(25_191, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
	}
}
