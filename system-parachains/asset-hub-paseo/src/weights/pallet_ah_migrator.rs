
//! Autogenerated weights for `pallet_ah_migrator`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-02, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark-2`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/asset-hub-paseo-runtime/asset_hub_paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/
// --steps
// 2
// --repeat
// 1

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ah_migrator`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ah_migrator::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_multisigs(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `652 + n * (621 ±0)`
		//  Estimated: `664755`
		// Minimum execution time: 72_066_000 picoseconds.
		Weight::from_parts(8_510_588_000, 0)
			.saturating_add(Weight::from_parts(0, 664755))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:255 w:255)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:255 w:255)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:255 w:255)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_accounts(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1806 + n * (1123 ±0)`
		//  Estimated: `963360`
		// Minimum execution time: 281_538_000 picoseconds.
		Weight::from_parts(52_434_730_000, 0)
			.saturating_add(Weight::from_parts(0, 963360))
			.saturating_add(T::DbWeight::get().reads(1020))
			.saturating_add(T::DbWeight::get().writes(1020))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_liquid_accounts(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `652 + n * (621 ±0)`
		//  Estimated: `664755`
		// Minimum execution time: 122_079_000 picoseconds.
		Weight::from_parts(11_573_541_000, 0)
			.saturating_add(Weight::from_parts(0, 664755))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Claims::Vesting` (r:255 w:255)
	/// Proof: `Claims::Vesting` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_claims(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `646395`
		// Minimum execution time: 53_610_000 picoseconds.
		Weight::from_parts(1_222_143_000, 0)
			.saturating_add(Weight::from_parts(0, 646395))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Proxy::Proxies` (r:255 w:255)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_proxies(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `948570`
		// Minimum execution time: 115_597_000 picoseconds.
		Weight::from_parts(2_239_990_000, 0)
			.saturating_add(Weight::from_parts(0, 948570))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_announcements(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `652 + n * (621 ±0)`
		//  Estimated: `664755`
		// Minimum execution time: 75_962_000 picoseconds.
		Weight::from_parts(10_002_466_000, 0)
			.saturating_add(Weight::from_parts(0, 664755))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Vesting::Vesting` (r:255 w:255)
	/// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
	/// Storage: `Vesting::StorageVersion` (r:0 w:1)
	/// Proof: `Vesting::StorageVersion` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_vesting_schedules(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `901650`
		// Minimum execution time: 87_715_000 picoseconds.
		Weight::from_parts(2_106_590_000, 0)
			.saturating_add(Weight::from_parts(0, 901650))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(256))
	}
	/// Storage: `NominationPools::SubPoolsStorage` (r:255 w:255)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForSubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_nom_pools_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `937350`
		// Minimum execution time: 108_814_000 picoseconds.
		Weight::from_parts(2_959_088_000, 0)
			.saturating_add(Weight::from_parts(0, 937350))
			.saturating_add(T::DbWeight::get().reads(256))
			.saturating_add(T::DbWeight::get().writes(256))
	}
	/// Storage: `Referenda::DecidingCount` (r:0 w:16)
	/// Proof: `Referenda::DecidingCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumCount` (r:0 w:1)
	/// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::TrackQueue` (r:0 w:16)
	/// Proof: `Referenda::TrackQueue` (`max_values`: None, `max_size`: Some(2012), added: 4487, mode: `MaxEncodedLen`)
	fn receive_referenda_values() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 206_828_000 picoseconds.
		Weight::from_parts(206_828_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(33))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_active_referendums(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (1 ±0)`
		//  Estimated: `4003609`
		// Minimum execution time: 135_394_000 picoseconds.
		Weight::from_parts(22_433_416_000, 0)
			.saturating_add(Weight::from_parts(0, 4003609))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:255)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_complete_referendums(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 69_791_000 picoseconds.
		Weight::from_parts(1_029_650_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Parameters::Parameters` (r:1 w:0)
	/// Proof: `Parameters::Parameters` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:0 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_scheduler_agenda(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1 + m * (1 ±0)`
		//  Estimated: `4003612`
		// Minimum execution time: 84_518_000 picoseconds.
		Weight::from_parts(22_111_511_000, 0)
			.saturating_add(Weight::from_parts(0, 4003612))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Scheduler::Lookup` (r:0 w:255)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_scheduler_lookup(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 58_920_000 picoseconds.
		Weight::from_parts(830_327_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `VoterList::ListNodes` (r:255 w:255)
	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bags_list_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1387 + n * (510 ±0)`
		//  Estimated: `671385`
		// Minimum execution time: 97_764_000 picoseconds.
		Weight::from_parts(4_290_264_000, 0)
			.saturating_add(Weight::from_parts(0, 671385))
			.saturating_add(T::DbWeight::get().reads(256))
			.saturating_add(T::DbWeight::get().writes(256))
	}
	/// Storage: `Indices::Accounts` (r:255 w:255)
	/// Proof: `Indices::Accounts` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_indices(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `649710`
		// Minimum execution time: 78_817_000 picoseconds.
		Weight::from_parts(1_478_102_000, 0)
			.saturating_add(Weight::from_parts(0, 649710))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `ConvictionVoting::VotingFor` (r:0 w:255)
	/// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_conviction_voting_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 124_003_000 picoseconds.
		Weight::from_parts(10_102_574_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Bounties::Bounties` (r:0 w:255)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(177), added: 2652, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bounties_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 93_686_000 picoseconds.
		Weight::from_parts(768_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `AssetRate::ConversionRateToNative` (r:0 w:255)
	/// Proof: `AssetRate::ConversionRateToNative` (`max_values`: None, `max_size`: Some(1238), added: 3713, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_asset_rates(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 69_080_000 picoseconds.
		Weight::from_parts(2_134_974_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `AhOps::RcCrowdloanContribution` (r:255 w:255)
	/// Proof: `AhOps::RcCrowdloanContribution` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_crowdloan_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `660675`
		// Minimum execution time: 96_370_000 picoseconds.
		Weight::from_parts(9_056_482_000, 0)
			.saturating_add(Weight::from_parts(0, 660675))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Referenda::MetadataOf` (r:0 w:255)
	/// Proof: `Referenda::MetadataOf` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_referenda_metadata(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 46_698_000 picoseconds.
		Weight::from_parts(601_608_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Treasury::Spends` (r:0 w:255)
	/// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(2456), added: 4931, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_treasury_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 86_242_000 picoseconds.
		Weight::from_parts(2_716_293_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `DelegatedStaking::Agents` (r:255 w:255)
	/// Proof: `DelegatedStaking::Agents` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `DelegatedStaking::CounterForAgents` (r:1 w:1)
	/// Proof: `DelegatedStaking::CounterForAgents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_delegated_staking_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `662715`
		// Minimum execution time: 104_826_000 picoseconds.
		Weight::from_parts(1_497_808_000, 0)
			.saturating_add(Weight::from_parts(0, 662715))
			.saturating_add(T::DbWeight::get().reads(256))
			.saturating_add(T::DbWeight::get().writes(256))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_legacy_status(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `652 + n * (621 ±0)`
		//  Estimated: `664755`
		// Minimum execution time: 107_642_000 picoseconds.
		Weight::from_parts(8_082_305_000, 0)
			.saturating_add(Weight::from_parts(0, 664755))
			.saturating_add(T::DbWeight::get().reads(255))
			.saturating_add(T::DbWeight::get().writes(255))
	}
	/// Storage: `Preimage::RequestStatusFor` (r:255 w:0)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_request_status(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `58 + n * (47 ±0)`
		//  Estimated: `655320`
		// Minimum execution time: 64_030_000 picoseconds.
		Weight::from_parts(7_423_129_000, 0)
			.saturating_add(Weight::from_parts(0, 655320))
			.saturating_add(T::DbWeight::get().reads(255))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// The range of component `m` is `[1, 80]`.
	fn receive_preimage_chunk(_m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (49900 ±0)`
		//  Estimated: `3945639`
		// Minimum execution time: 208_782_000 picoseconds.
		Weight::from_parts(8_601_398_000, 0)
			.saturating_add(Weight::from_parts(0, 3945639))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ChildBounties::ChildBountyDescriptionsV1` (r:0 w:100)
	/// Proof: `ChildBounties::ChildBountyDescriptionsV1` (`max_values`: None, `max_size`: Some(16412), added: 18887, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_child_bounties_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 105_348_000 picoseconds.
		Weight::from_parts(3_801_098_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(100))
	}
	/// Storage: `Staking::UnappliedSlashes` (r:0 w:100)
	/// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: Some(24735), added: 27210, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_staking_messages(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 128_160_000 picoseconds.
		Weight::from_parts(6_336_412_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(100))
	}
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn force_set_stage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1486`
		// Minimum execution time: 57_618_000 picoseconds.
		Weight::from_parts(57_618_000, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	/// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	/// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	/// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhBalancesBefore` (r:0 w:1)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1428`
		//  Estimated: `4893`
		// Minimum execution time: 120_235_000 picoseconds.
		Weight::from_parts(120_235_000, 0)
			.saturating_add(Weight::from_parts(0, 4893))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `AhMigrator::AhBalancesBefore` (r:1 w:0)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationEndBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationEndBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn finish_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `1517`
		// Minimum execution time: 62_548_000 picoseconds.
		Weight::from_parts(62_548_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:0)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:0)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:0 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	fn force_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `3517`
		// Minimum execution time: 26_439_000 picoseconds.
		Weight::from_parts(26_439_000, 0)
			.saturating_add(Weight::from_parts(0, 3517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:1)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	fn set_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1494`
		// Minimum execution time: 22_552_000 picoseconds.
		Weight::from_parts(22_552_000, 0)
			.saturating_add(Weight::from_parts(0, 1494))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::Manager` (r:1 w:1)
	/// Proof: `AhMigrator::Manager` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1517`
		// Minimum execution time: 22_603_000 picoseconds.
		Weight::from_parts(22_603_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
