
//! Autogenerated weights for `pallet_ah_migrator`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 51.0.0
//! DATE: 2025-10-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark-2`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/asset-hub-paseo-runtime/asset_hub_paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --output
// /root/runtimes/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_ah_migrator`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ah_migrator::WeightInfo for WeightInfo<T> {
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_multisigs(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16867 + n * (584 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 58_850_000 picoseconds.
		Weight::from_parts(43_651_111, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 175_475
			.saturating_add(Weight::from_parts(30_075_998, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:255 w:255)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(175), added: 2650, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:255 w:255)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:255 w:255)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_accounts(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `34309 + n * (1050 ±0)`
		//  Estimated: `990 + n * (3774 ±0)`
		// Minimum execution time: 198_692_000 picoseconds.
		Weight::from_parts(211_517_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 342_335
			.saturating_add(Weight::from_parts(190_857_125, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3774).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_liquid_accounts(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16867 + n * (584 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 77_455_000 picoseconds.
		Weight::from_parts(81_222_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 139_453
			.saturating_add(Weight::from_parts(48_572_428, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Claims::Vesting` (r:255 w:255)
	/// Proof: `Claims::Vesting` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_claims(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `990 + n * (2531 ±0)`
		// Minimum execution time: 39_644_000 picoseconds.
		Weight::from_parts(104_904_743, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 42_912
			.saturating_add(Weight::from_parts(4_250_132, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2531).saturating_mul(n.into()))
	}
	/// Storage: `Proxy::Proxies` (r:255 w:255)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_proxies(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `990 + n * (3716 ±0)`
		// Minimum execution time: 50_645_000 picoseconds.
		Weight::from_parts(65_172_214, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 72_939
			.saturating_add(Weight::from_parts(8_094_008, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3716).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_proxy_announcements(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16867 + n * (584 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 74_359_000 picoseconds.
		Weight::from_parts(31_587_208, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 294_564
			.saturating_add(Weight::from_parts(31_920_621, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Vesting::Vesting` (r:255 w:255)
	/// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
	/// Storage: `Vesting::StorageVersion` (r:0 w:1)
	/// Proof: `Vesting::StorageVersion` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_vesting_schedules(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `237`
		//  Estimated: `990 + n * (3532 ±0)`
		// Minimum execution time: 44_513_000 picoseconds.
		Weight::from_parts(67_768_673, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 83_659
			.saturating_add(Weight::from_parts(8_481_546, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3532).saturating_mul(n.into()))
	}
	/// Storage: `NominationPools::SubPoolsStorage` (r:255 w:255)
	/// Proof: `NominationPools::SubPoolsStorage` (`max_values`: None, `max_size`: Some(1197), added: 3672, mode: `MaxEncodedLen`)
	/// Storage: `NominationPools::CounterForSubPoolsStorage` (r:1 w:1)
	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_nom_pools_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `1489 + n * (3672 ±0)`
		// Minimum execution time: 63_059_000 picoseconds.
		Weight::from_parts(56_910_566, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 66_549
			.saturating_add(Weight::from_parts(10_491_768, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 3672).saturating_mul(n.into()))
	}
	/// Storage: `Referenda::DecidingCount` (r:0 w:16)
	/// Proof: `Referenda::DecidingCount` (`max_values`: None, `max_size`: Some(14), added: 2489, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumCount` (r:0 w:1)
	/// Proof: `Referenda::ReferendumCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::TrackQueue` (r:0 w:16)
	/// Proof: `Referenda::TrackQueue` (`max_values`: None, `max_size`: Some(2012), added: 4487, mode: `MaxEncodedLen`)
	fn receive_referenda_values() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 132_458_000 picoseconds.
		Weight::from_parts(140_484_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(33))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:1)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_active_referendums(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `144 + m * (1 ±0)`
		//  Estimated: `3609 + m * (1 ±0)`
		// Minimum execution time: 57_758_000 picoseconds.
		Weight::from_parts(59_352_000, 0)
			.saturating_add(Weight::from_parts(0, 3609))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(5_406, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(m.into()))
	}
	/// Storage: `Referenda::ReferendumInfoFor` (r:0 w:255)
	/// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_complete_referendums(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 52_578_000 picoseconds.
		Weight::from_parts(61_937_478, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 38_340
			.saturating_add(Weight::from_parts(3_348_163, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Preimage::StatusFor` (r:1 w:0)
	/// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// Storage: `Parameters::Parameters` (r:1 w:0)
	/// Proof: `Parameters::Parameters` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:0 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[1, 4000000]`.
	fn receive_single_scheduler_agenda(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + m * (1 ±0)`
		//  Estimated: `3612 + m * (1 ±0)`
		// Minimum execution time: 64_682_000 picoseconds.
		Weight::from_parts(67_878_000, 0)
			.saturating_add(Weight::from_parts(0, 3612))
			// Standard Error: 13
			.saturating_add(Weight::from_parts(5_479, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(m.into()))
	}
	/// Storage: `Scheduler::Lookup` (r:0 w:255)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_scheduler_lookup(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 41_778_000 picoseconds.
		Weight::from_parts(37_643_374, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 25_758
			.saturating_add(Weight::from_parts(2_862_925, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `VoterList::ListNodes` (r:255 w:255)
	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bags_list_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16209 + n * (485 ±0)`
		//  Estimated: `1489 + n * (2629 ±0)`
		// Minimum execution time: 69_791_000 picoseconds.
		Weight::from_parts(91_997_688, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 102_801
			.saturating_add(Weight::from_parts(12_326_946, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2629).saturating_mul(n.into()))
	}
	/// Storage: `Indices::Accounts` (r:255 w:255)
	/// Proof: `Indices::Accounts` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_indices(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `990 + n * (2544 ±0)`
		// Minimum execution time: 57_017_000 picoseconds.
		Weight::from_parts(57_173_119, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 59_160
			.saturating_add(Weight::from_parts(5_415_434, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2544).saturating_mul(n.into()))
	}
	/// Storage: `ConvictionVoting::VotingFor` (r:0 w:255)
	/// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_conviction_voting_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 69_640_000 picoseconds.
		Weight::from_parts(77_184_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 70_207
			.saturating_add(Weight::from_parts(33_111_509, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Bounties::Bounties` (r:0 w:255)
	/// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(177), added: 2652, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_bounties_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 54_122_000 picoseconds.
		Weight::from_parts(56_125_214, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 30_761
			.saturating_add(Weight::from_parts(3_080_753, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AssetRate::ConversionRateToNative` (r:0 w:255)
	/// Proof: `AssetRate::ConversionRateToNative` (`max_values`: None, `max_size`: Some(1238), added: 3713, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_asset_rates(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 68_499_000 picoseconds.
		Weight::from_parts(28_022_577, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 62_681
			.saturating_add(Weight::from_parts(6_590_145, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AhOps::RcCrowdloanContribution` (r:255 w:255)
	/// Proof: `AhOps::RcCrowdloanContribution` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_crowdloan_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `990 + n * (2587 ±0)`
		// Minimum execution time: 89_217_000 picoseconds.
		Weight::from_parts(95_930_000, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 2_371_293
			.saturating_add(Weight::from_parts(115_590_987, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2587).saturating_mul(n.into()))
	}
	/// Storage: `Referenda::MetadataOf` (r:0 w:255)
	/// Proof: `Referenda::MetadataOf` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_referenda_metadata(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 32_350_000 picoseconds.
		Weight::from_parts(56_395_863, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 24_096
			.saturating_add(Weight::from_parts(2_578_267, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Treasury::Spends` (r:0 w:255)
	/// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(2456), added: 4931, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_treasury_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 62_587_000 picoseconds.
		Weight::from_parts(70_427_056, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 100_098
			.saturating_add(Weight::from_parts(10_277_734, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `DelegatedStaking::Agents` (r:255 w:255)
	/// Proof: `DelegatedStaking::Agents` (`max_values`: None, `max_size`: Some(120), added: 2595, mode: `MaxEncodedLen`)
	/// Storage: `DelegatedStaking::CounterForAgents` (r:1 w:1)
	/// Proof: `DelegatedStaking::CounterForAgents` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_delegated_staking_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `175`
		//  Estimated: `1489 + n * (2595 ±0)`
		// Minimum execution time: 65_974_000 picoseconds.
		Weight::from_parts(45_546_390, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			// Standard Error: 63_092
			.saturating_add(Weight::from_parts(6_692_537, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2595).saturating_mul(n.into()))
	}
	/// Storage: `System::Account` (r:255 w:255)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_legacy_status(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16867 + n * (584 ±0)`
		//  Estimated: `990 + n * (2603 ±0)`
		// Minimum execution time: 74_049_000 picoseconds.
		Weight::from_parts(178_890_959, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 182_889
			.saturating_add(Weight::from_parts(28_033_874, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
	}
	/// Storage: `Preimage::RequestStatusFor` (r:255 w:0)
	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 255]`.
	fn receive_preimage_request_status(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `57 + n * (47 ±0)`
		//  Estimated: `990 + n * (2566 ±0)`
		// Minimum execution time: 66_414_000 picoseconds.
		Weight::from_parts(61_229_769, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 199_426
			.saturating_add(Weight::from_parts(20_827_124, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2566).saturating_mul(n.into()))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// The range of component `m` is `[1, 80]`.
	fn receive_preimage_chunk(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (49900 ±0)`
		//  Estimated: `3469 + m * (48969 ±24)`
		// Minimum execution time: 114_655_000 picoseconds.
		Weight::from_parts(119_314_000, 0)
			.saturating_add(Weight::from_parts(0, 3469))
			// Standard Error: 825_508
			.saturating_add(Weight::from_parts(107_439_967, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 48969).saturating_mul(m.into()))
	}
	/// Storage: `ChildBounties::ChildBountyDescriptionsV1` (r:0 w:100)
	/// Proof: `ChildBounties::ChildBountyDescriptionsV1` (`max_values`: None, `max_size`: Some(16412), added: 18887, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_child_bounties_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 62_187_000 picoseconds.
		Weight::from_parts(33_590_635, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 167_590
			.saturating_add(Weight::from_parts(24_289_261, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `Staking::UnappliedSlashes` (r:0 w:100)
	/// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: Some(24735), added: 27210, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 100]`.
	fn receive_staking_messages(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 75_853_000 picoseconds.
		Weight::from_parts(63_982_959, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 344_336
			.saturating_add(Weight::from_parts(41_269_817, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
	}
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn force_set_stage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1486`
		// Minimum execution time: 42_931_000 picoseconds.
		Weight::from_parts(56_005_000, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ParachainSystem::UpwardDeliveryFeeFactor` (r:1 w:0)
	/// Proof: `ParachainSystem::UpwardDeliveryFeeFactor` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `PolkadotXcm::SupportedVersion` (r:1 w:0)
	/// Proof: `PolkadotXcm::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::HostConfiguration` (r:1 w:0)
	/// Proof: `ParachainSystem::HostConfiguration` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::PendingUpwardMessages` (r:1 w:1)
	/// Proof: `ParachainSystem::PendingUpwardMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhBalancesBefore` (r:0 w:1)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationStartBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationStartBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1428`
		//  Estimated: `4893`
		// Minimum execution time: 110_928_000 picoseconds.
		Weight::from_parts(124_583_000, 0)
			.saturating_add(Weight::from_parts(0, 4893))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `AhMigrator::AhBalancesBefore` (r:1 w:0)
	/// Proof: `AhMigrator::AhBalancesBefore` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::AhMigrationStage` (r:1 w:1)
	/// Proof: `AhMigrator::AhMigrationStage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `AhMigrator::MigrationEndBlock` (r:0 w:1)
	/// Proof: `AhMigrator::MigrationEndBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn finish_migration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `1517`
		// Minimum execution time: 58_269_000 picoseconds.
		Weight::from_parts(67_596_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:0)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::BookStateFor` (r:1 w:0)
	/// Proof: `MessageQueue::BookStateFor` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `MessageQueue::ServiceHead` (r:0 w:1)
	/// Proof: `MessageQueue::ServiceHead` (`max_values`: Some(1), `max_size`: Some(5), added: 500, mode: `MaxEncodedLen`)
	fn force_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `336`
		//  Estimated: `3517`
		// Minimum execution time: 20_068_000 picoseconds.
		Weight::from_parts(22_222_000, 0)
			.saturating_add(Weight::from_parts(0, 3517))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::DmpQueuePriorityConfig` (r:1 w:1)
	/// Proof: `AhMigrator::DmpQueuePriorityConfig` (`max_values`: Some(1), `max_size`: Some(9), added: 504, mode: `MaxEncodedLen`)
	fn set_dmp_queue_priority() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1494`
		// Minimum execution time: 12_753_000 picoseconds.
		Weight::from_parts(15_710_000, 0)
			.saturating_add(Weight::from_parts(0, 1494))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `AhMigrator::Manager` (r:1 w:1)
	/// Proof: `AhMigrator::Manager` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn set_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1517`
		// Minimum execution time: 12_463_000 picoseconds.
		Weight::from_parts(15_198_000, 0)
			.saturating_add(Weight::from_parts(0, 1517))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
