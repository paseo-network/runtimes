
//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-10-02, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark-2`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/collectives-paseo-runtime/collectives_paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --exclude-pallets
// pallet_referenda
// --output
// /root/runtimes/weights/
// --steps
// 2
// --repeat
// 1

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(_z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 38_071_000 picoseconds.
		Weight::from_parts(78_908_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 74_448_000 picoseconds.
		Weight::from_parts(69_321_469, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 384_692
			.saturating_add(Weight::from_parts(51_265, 0).saturating_mul(s.into()))
			// Standard Error: 3_769
			.saturating_add(Weight::from_parts(4_050, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(_s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6811`
		// Minimum execution time: 44_403_000 picoseconds.
		Weight::from_parts(80_042_690, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 693
			.saturating_add(Weight::from_parts(2_581, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `453 + s * (34 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 71_674_000 picoseconds.
		Weight::from_parts(65_397_469, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 16_648
			.saturating_add(Weight::from_parts(62_765, 0).saturating_mul(s.into()))
			// Standard Error: 163
			.saturating_add(Weight::from_parts(3_086, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `310 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 60_142_000 picoseconds.
		Weight::from_parts(70_832_000, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6811`
		// Minimum execution time: 41_397_000 picoseconds.
		Weight::from_parts(43_902_000, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 49_273_000 picoseconds.
		Weight::from_parts(65_493_000, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn poke_deposit(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `517 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 61_094_000 picoseconds.
		Weight::from_parts(70_953_000, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
