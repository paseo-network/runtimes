
//! Autogenerated weights for `snowbridge_pallet_outbound_queue`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 51.0.0
//! DATE: 2025-10-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `paseo-weights-benchmark`, CPU: `QEMU Virtual CPU version 2.5+`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/bridge-hub-paseo-runtime/bridge_hub_paseo_runtime.compact.compressed.wasm
// --genesis-builder
// runtime
// --genesis-builder-preset
// local_testnet
// --all
// --output
// /root/runtimes/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `snowbridge_pallet_outbound_queue`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> snowbridge_pallet_outbound_queue::WeightInfo for WeightInfo<T> {
	/// Storage: `EthereumOutboundQueue::MessageLeaves` (r:1 w:1)
	/// Proof: `EthereumOutboundQueue::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `EthereumOutboundQueue::Nonce` (r:1 w:1)
	/// Proof: `EthereumOutboundQueue::Nonce` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `EthereumSystem::PricingParameters` (r:1 w:0)
	/// Proof: `EthereumSystem::PricingParameters` (`max_values`: Some(1), `max_size`: Some(112), added: 607, mode: `MaxEncodedLen`)
	/// Storage: `EthereumOutboundQueue::Messages` (r:1 w:1)
	/// Proof: `EthereumOutboundQueue::Messages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn do_process_message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3513`
		// Minimum execution time: 52_338_000 picoseconds.
		Weight::from_parts(68_529_000, 0)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `EthereumOutboundQueue::MessageLeaves` (r:1 w:0)
	/// Proof: `EthereumOutboundQueue::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn commit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1057`
		//  Estimated: `2542`
		// Minimum execution time: 39_524_000 picoseconds.
		Weight::from_parts(47_168_000, 0)
			.saturating_add(Weight::from_parts(0, 2542))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `EthereumOutboundQueue::MessageLeaves` (r:1 w:0)
	/// Proof: `EthereumOutboundQueue::MessageLeaves` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn commit_single() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `64`
		//  Estimated: `1549`
		// Minimum execution time: 14_287_000 picoseconds.
		Weight::from_parts(17_763_000, 0)
			.saturating_add(Weight::from_parts(0, 1549))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
