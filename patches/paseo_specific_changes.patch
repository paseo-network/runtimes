diff --git a/Cargo.toml b/Cargo.toml
index 3263314..7ee18a7 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,19 +1,27 @@
 [workspace.package]
 version = "1.0.0"
-authors = ["Paseo Core Team"]
+authors = ["Polkadot Fellowship"]
 edition = "2021"
-repository = "https://github.com/paseo-network/runtimes.git"
-license = "GPL-3.0-only"
+repository = "https://github.com/polkadot-fellows/runtimes.git"
+license = "GPL-3.0-only"                                        # TODO <https://github.com/polkadot-fellows/runtimes/issues/29>
 
 [workspace.dependencies]
 assert_matches = { version = "1.5.0" }
+asset-hub-kusama-emulated-chain = { path = "integration-tests/emulated/chains/parachains/assets/asset-hub-kusama" }
+asset-hub-kusama-runtime = { path = "system-parachains/asset-hubs/asset-hub-kusama" }
+asset-hub-polkadot-emulated-chain = { path = "integration-tests/emulated/chains/parachains/assets/asset-hub-polkadot" }
+asset-hub-polkadot-runtime = { path = "system-parachains/asset-hubs/asset-hub-polkadot" }
 asset-test-utils = { version = "8.0.1" }
 assets-common = { version = "0.8.0", default-features = false }
 authority-discovery-primitives = { version = "27.0.0", default-features = false, package = "sp-authority-discovery" }
 babe-primitives = { version = "0.33.0", default-features = false, package = "sp-consensus-babe" }
 beefy-primitives = { version = "14.0.0", default-features = false, package = "sp-consensus-beefy" }
 binary-merkle-tree = { version = "14.0.0", default-features = false }
+bp-asset-hub-kusama = { path = "system-parachains/asset-hubs/asset-hub-kusama/primitives", default-features = false }
+bp-asset-hub-polkadot = { path = "system-parachains/asset-hubs/asset-hub-polkadot/primitives", default-features = false }
 bp-bridge-hub-cumulus = { version = "0.8.0", default-features = false }
+bp-bridge-hub-kusama = { path = "system-parachains/bridge-hubs/bridge-hub-kusama/primitives", default-features = false }
+bp-bridge-hub-polkadot = { path = "system-parachains/bridge-hubs/bridge-hub-polkadot/primitives", default-features = false }
 bp-header-chain = { version = "0.8.1", default-features = false }
 bp-kusama = { version = "0.6.0", default-features = false }
 bp-messages = { version = "0.8.0", default-features = false }
@@ -24,10 +32,18 @@ bp-relayers = { version = "0.8.0", default-features = false }
 bp-runtime = { version = "0.8.0", default-features = false }
 bp-xcm-bridge-hub-router = { version = "0.7.0", default-features = false }
 bridge-hub-common = { version = "0.1.0", default-features = false }
+bridge-hub-kusama-emulated-chain = { path = "integration-tests/emulated/chains/parachains/bridges/bridge-hub-kusama" }
+bridge-hub-kusama-runtime = { path = "system-parachains/bridge-hubs/bridge-hub-kusama" }
+bridge-hub-polkadot-emulated-chain = { path = "integration-tests/emulated/chains/parachains/bridges/bridge-hub-polkadot" }
+bridge-hub-polkadot-runtime = { path = "system-parachains/bridge-hubs/bridge-hub-polkadot" }
 bridge-hub-test-utils = { version = "0.8.0" }
 bridge-runtime-common = { version = "0.8.0", default-features = false }
 clap = { version = "4.5.0" }
 codec = { package = "parity-scale-codec", version = "3.6.9", default-features = false }
+collectives-polkadot-emulated-chain = { path = "integration-tests/emulated/chains/parachains/collectives/collectives-polkadot" }
+collectives-polkadot-runtime = { path = "system-parachains/collectives/collectives-polkadot" }
+collectives-polkadot-runtime-constants = { path = "system-parachains/collectives/collectives-polkadot/constants" }
+coretime-kusama-runtime = { path = "system-parachains/coretime/coretime-kusama" }
 cumulus-pallet-aura-ext = { version = "0.8.0", default-features = false }
 cumulus-pallet-dmp-queue = { version = "0.8.0", default-features = false }
 cumulus-pallet-parachain-system = { version = "0.8.1", default-features = false }
@@ -38,18 +54,30 @@ cumulus-primitives-aura = { version = "0.8.0", default-features = false }
 cumulus-primitives-core = { version = "0.8.0", default-features = false }
 cumulus-primitives-utility = { version = "0.8.1", default-features = false }
 emulated-integration-tests-common = { version = "4.0.0" }
+encointer-balances-tx-payment = { version = "~6.1.0", default-features = false }
+encointer-balances-tx-payment-rpc-runtime-api = { version = "~6.1.0", default-features = false }
+encointer-kusama-runtime = { path = "system-parachains/encointer" }
+encointer-primitives = { version = "~6.1.0", default-features = false }
 enumflags2 = { version = "0.7.7" }
 frame-benchmarking = { version = "29.0.0", default-features = false }
 frame-election-provider-support = { version = "29.0.0", default-features = false }
 frame-executive = { version = "29.0.0", default-features = false }
+frame-metadata-hash-extension = { version = "0.1.0", default-features = false }
 frame-support = { version = "29.0.2", default-features = false }
 frame-system = { version = "29.0.0", default-features = false }
 frame-system-benchmarking = { version = "29.0.0", default-features = false }
 frame-system-rpc-runtime-api = { version = "27.0.0", default-features = false }
 frame-try-runtime = { version = "0.35.0", default-features = false }
+glutton-kusama-runtime = { path = "system-parachains/gluttons/glutton-kusama" }
 grandpa = { version = "0.20.0", package = "sc-consensus-grandpa" }
 hex-literal = { version = "0.4.1" }
-log = { version = "0.4.20", default-features = false }
+integration-tests-helpers = { path = "integration-tests/emulated/helpers" }
+kusama-emulated-chain = { path = "integration-tests/emulated/chains/relays/kusama" }
+kusama-polkadot-system-emulated-network = { path = "integration-tests/emulated/networks/kusama-polkadot-system" }
+kusama-runtime = { path = "relay/kusama", package = "staging-kusama-runtime" }
+kusama-runtime-constants = { path = "relay/kusama/constants", default-features = false }
+kusama-system-emulated-network = { path = "integration-tests/emulated/networks/kusama-system" }
+log = { version = "0.4.21", default-features = false }
 pallet-alliance = { version = "28.0.0", default-features = false }
 pallet-asset-conversion = { version = "11.0.0", default-features = false }
 pallet-asset-conversion-tx-payment = { version = "11.0.0", default-features = false }
@@ -69,7 +97,7 @@ pallet-bridge-grandpa = { version = "0.8.0", default-features = false }
 pallet-bridge-messages = { version = "0.8.0", default-features = false }
 pallet-bridge-parachains = { version = "0.8.0", default-features = false }
 pallet-bridge-relayers = { version = "0.8.0", default-features = false }
-pallet-broker = { version = "0.7.1", default-features = false }
+pallet-broker = { version = "0.7.2", default-features = false }
 pallet-child-bounties = { version = "28.0.0", default-features = false }
 pallet-collator-selection = { version = "10.0.2", default-features = false }
 pallet-collective = { version = "29.0.0", default-features = false }
@@ -77,10 +105,20 @@ pallet-conviction-voting = { version = "29.0.0", default-features = false }
 pallet-core-fellowship = { version = "13.0.0", default-features = false }
 pallet-election-provider-multi-phase = { version = "28.0.0", default-features = false }
 pallet-election-provider-support-benchmarking = { version = "28.0.0", default-features = false }
+pallet-encointer-balances = { version = "~6.1.0", default-features = false }
+pallet-encointer-bazaar = { version = "~6.1.0", default-features = false }
+pallet-encointer-bazaar-rpc-runtime-api = { version = "~6.1.0", default-features = false }
+pallet-encointer-ceremonies = { version = "~6.1.0", default-features = false }
+pallet-encointer-ceremonies-rpc-runtime-api = { version = "~6.1.0", default-features = false }
+pallet-encointer-communities = { version = "~6.1.0", default-features = false }
+pallet-encointer-communities-rpc-runtime-api = { version = "~6.1.0", default-features = false }
+pallet-encointer-faucet = { version = "~6.2.0", default-features = false }
+pallet-encointer-reputation-commitments = { version = "~6.1.0", default-features = false }
+pallet-encointer-scheduler = { version = "~6.1.0", default-features = false }
 pallet-fast-unstake = { version = "28.0.0", default-features = false }
 pallet-glutton = { version = "15.0.0", default-features = false }
 pallet-grandpa = { version = "29.0.0", default-features = false }
-pallet-identity = { version = "29.0.0", default-features = false }
+pallet-identity = { version = "29.0.1", default-features = false }
 pallet-indices = { version = "29.0.0", default-features = false }
 pallet-insecure-randomness-collective-flip = { version = "17.0.0", default-features = false }
 pallet-membership = { version = "29.0.0", default-features = false }
@@ -91,7 +129,7 @@ pallet-nft-fractionalization = { version = "11.0.0", default-features = false }
 pallet-nfts = { version = "23.0.0", default-features = false }
 pallet-nfts-runtime-api = { version = "15.0.0", default-features = false }
 pallet-nis = { version = "29.0.0", default-features = false }
-pallet-nomination-pools = { version = "26.0.0", default-features = false }
+pallet-nomination-pools = { version = "26.0.1", default-features = false }
 pallet-nomination-pools-benchmarking = { version = "27.0.0", default-features = false }
 pallet-nomination-pools-runtime-api = { version = "24.0.0", default-features = false }
 pallet-offences = { version = "28.0.0", default-features = false }
@@ -106,16 +144,16 @@ pallet-scheduler = { version = "30.0.0", default-features = false }
 pallet-session = { version = "29.0.0", default-features = false }
 pallet-session-benchmarking = { version = "29.0.0", default-features = false }
 pallet-society = { version = "29.0.0", default-features = false }
-pallet-staking = { version = "29.0.2", default-features = false }
+pallet-staking = { version = "29.0.3", default-features = false }
 pallet-staking-reward-curve = { version = "11.0.0" }
 pallet-staking-reward-fn = { version = "20.0.0", default-features = false }
-pallet-staking-runtime-api = { version = "15.0.0", default-features = false }
+pallet-staking-runtime-api = { version = "15.0.1", default-features = false }
 pallet-state-trie-migration = { version = "30.0.0", default-features = false }
 pallet-sudo = { version = "29.0.0", default-features = false }
 pallet-timestamp = { version = "28.0.0", default-features = false }
-pallet-transaction-payment = { version = "29.0.0", default-features = false }
+pallet-transaction-payment = { version = "29.0.1", default-features = false }
 pallet-transaction-payment-rpc-runtime-api = { version = "29.0.0", default-features = false }
-pallet-treasury = { version = "28.0.0", default-features = false }
+pallet-treasury = { version = "28.0.1", default-features = false }
 pallet-uniques = { version = "29.0.0", default-features = false }
 pallet-utility = { version = "29.0.0", default-features = false }
 pallet-vesting = { version = "29.0.0", default-features = false }
@@ -128,10 +166,18 @@ parachain-info = { version = "0.8.0", default-features = false, package = "stagi
 parachains-common = { version = "8.0.0", default-features = false }
 parachains-runtimes-test-utils = { version = "8.0.0" }
 paste = { version = "1.0.14" }
+penpal-emulated-chain = { path = "integration-tests/emulated/chains/parachains/testing/penpal" }
+penpal-runtime = { version = "0.15.1" }
+people-kusama-emulated-chain = { path = "integration-tests/emulated/chains/parachains/people/people-kusama" }
+people-kusama-runtime = { path = "system-parachains/people/people-kusama" }
 polkadot-core-primitives = { version = "8.0.0", default-features = false }
+polkadot-emulated-chain = { path = "integration-tests/emulated/chains/relays/polkadot" }
 polkadot-parachain-primitives = { version = "7.0.0", default-features = false }
 polkadot-primitives = { version = "8.0.1", default-features = false }
-polkadot-runtime-common = { version = "8.0.1", default-features = false }
+polkadot-runtime = { path = "relay/polkadot" }
+polkadot-runtime-common = { version = "8.0.2", default-features = false }
+polkadot-runtime-constants = { path = "relay/polkadot/constants", default-features = false }
+polkadot-system-emulated-network = { path = "integration-tests/emulated/networks/polkadot-system" }
 primitive-types = { version = "0.12.2", default-features = false }
 remote-externalities = { version = "0.36.0", package = "frame-remote-externalities" }
 runtime-parachains = { version = "8.0.1", default-features = false, package = "polkadot-runtime-parachains" }
@@ -141,7 +187,19 @@ separator = { version = "0.4.1" }
 serde = { version = "1.0.196" }
 serde_json = { version = "1.0.113" }
 smallvec = { version = "1.13.1" }
-sp-api = { version = "27.0.0", default-features = false }
+snowbridge-beacon-primitives = { version = "0.1.0", default-features = false }
+snowbridge-core = { version = "0.1.1", default-features = false }
+snowbridge-outbound-queue-runtime-api = { version = "0.1.1", default-features = false }
+snowbridge-pallet-ethereum-client = { version = "0.1.2", default-features = false }
+snowbridge-pallet-inbound-queue = { version = "0.1.1", default-features = false }
+snowbridge-pallet-inbound-queue-fixtures = { version = "0.9.0" }
+snowbridge-pallet-outbound-queue = { version = "0.1.1", default-features = false }
+snowbridge-pallet-system = { version = "0.1.1", default-features = false }
+snowbridge-router-primitives = { version = "0.1.0", default-features = false }
+snowbridge-runtime-common = { version = "0.1.0", default-features = false }
+snowbridge-runtime-test-common = { version = "0.1.0" }
+snowbridge-system-runtime-api = { version = "0.1.0", default-features = false }
+sp-api = { version = "27.0.1", default-features = false }
 sp-application-crypto = { version = "31.0.0", default-features = false }
 sp-arithmetic = { version = "24.0.0", default-features = false }
 sp-block-builder = { version = "27.0.0", default-features = false }
@@ -165,25 +223,62 @@ sp-trie = { version = "30.0.0" }
 sp-version = { version = "30.0.0", default-features = false }
 sp-weights = { version = "28.0.0", default-features = false }
 static_assertions = { version = "1.1.0" }
-substrate-wasm-builder = { version = "18.0.0" }
+substrate-wasm-builder = { version = "18.0.1" }
 system-parachains-constants = { path = "system-parachains/constants", default-features = false }
 tokio = { version = "1.36.0" }
 xcm = { version = "8.0.1", default-features = false, package = "staging-xcm" }
-xcm-builder = { version = "8.0.1", default-features = false, package = "staging-xcm-builder" }
+xcm-builder = { version = "8.0.2", default-features = false, package = "staging-xcm-builder" }
 xcm-emulator = { version = "0.6.0" }
 xcm-executor = { version = "8.0.1", default-features = false, package = "staging-xcm-executor" }
-
-# Local dependencies
-
-paseo-runtime-constants = { package = "paseo-runtime-constants", path = "relay/paseo/constants", default-features = false }
+anyhow = { version = "1.0.82" }
+subxt = { version = "0.35.0", default-features = false }
+tracing-subscriber = { version = "0.3.18" }
+zombienet-sdk = { version = "0.2" }
 
 [workspace]
 resolver = "2"
 
 members = [
 	"chain-spec-generator",
-	"relay/paseo",
-	"relay/paseo/constants"
+	"integration-tests/emulated/chains/parachains/assets/asset-hub-kusama",
+	"integration-tests/emulated/chains/parachains/assets/asset-hub-polkadot",
+	"integration-tests/emulated/chains/parachains/bridges/bridge-hub-kusama",
+	"integration-tests/emulated/chains/parachains/bridges/bridge-hub-polkadot",
+	"integration-tests/emulated/chains/parachains/collectives/collectives-polkadot",
+	"integration-tests/emulated/chains/parachains/people/people-kusama",
+	"integration-tests/emulated/chains/parachains/testing/penpal",
+	"integration-tests/emulated/chains/relays/kusama",
+	"integration-tests/emulated/chains/relays/polkadot",
+	"integration-tests/emulated/helpers",
+	"integration-tests/emulated/networks/kusama-polkadot-system",
+	"integration-tests/emulated/networks/kusama-system",
+	"integration-tests/emulated/networks/polkadot-system",
+	"integration-tests/emulated/tests/assets/asset-hub-kusama",
+	"integration-tests/emulated/tests/assets/asset-hub-polkadot",
+	"integration-tests/emulated/tests/bridges/bridge-hub-kusama",
+	"integration-tests/emulated/tests/bridges/bridge-hub-polkadot",
+	"integration-tests/emulated/tests/collectives/collectives-polkadot",
+	"integration-tests/emulated/tests/people/people-kusama",
+	"relay/kusama",
+	"relay/kusama/constants",
+	"relay/polkadot",
+	"relay/polkadot/constants",
+	"system-parachains/asset-hubs/asset-hub-kusama",
+	"system-parachains/asset-hubs/asset-hub-kusama/primitives",
+	"system-parachains/asset-hubs/asset-hub-polkadot",
+	"system-parachains/asset-hubs/asset-hub-polkadot/primitives",
+	"system-parachains/bridge-hubs/bridge-hub-kusama",
+	"system-parachains/bridge-hubs/bridge-hub-kusama/primitives",
+	"system-parachains/bridge-hubs/bridge-hub-polkadot",
+	"system-parachains/bridge-hubs/bridge-hub-polkadot/primitives",
+	"system-parachains/collectives/collectives-polkadot",
+	"system-parachains/collectives/collectives-polkadot/constants",
+	"system-parachains/constants",
+	"system-parachains/coretime/coretime-kusama",
+	"system-parachains/encointer",
+	"system-parachains/gluttons/glutton-kusama",
+	"system-parachains/people/people-kusama",
+	"integration-tests/zombienet",
 ]
 
 [profile.release]
@@ -194,4 +289,4 @@ opt-level = 3
 [profile.production]
 inherits = "release"
 lto = true
-codegen-units = 1
\ No newline at end of file
+codegen-units = 1
diff --git a/relay/paseo/Cargo.toml b/relay/paseo/Cargo.toml
index ad9f629..c7f8c92 100644
--- a/relay/paseo/Cargo.toml
+++ b/relay/paseo/Cargo.toml
@@ -1,8 +1,8 @@
 [package]
-name = "paseo-runtime"
+name = "polkadot-runtime"
 build = "build.rs"
 repository.workspace = true
-version = "1.2.4"
+version.workspace = true
 authors.workspace = true
 edition.workspace = true
 license.workspace = true
@@ -50,6 +50,7 @@ pallet-conviction-voting = { workspace = true }
 pallet-election-provider-multi-phase = { workspace = true }
 pallet-fast-unstake = { workspace = true }
 frame-executive = { workspace = true }
+frame-metadata-hash-extension = { workspace = true }
 pallet-grandpa = { workspace = true }
 pallet-identity = { workspace = true }
 pallet-indices = { workspace = true }
@@ -64,7 +65,6 @@ pallet-proxy = { workspace = true }
 pallet-referenda = { workspace = true }
 pallet-scheduler = { workspace = true }
 pallet-session = { workspace = true }
-pallet-sudo = { workspace = true }
 frame-support = { workspace = true }
 pallet-staking = { workspace = true }
 pallet-staking-reward-fn = { workspace = true }
@@ -73,7 +73,7 @@ pallet-staking-runtime-api = { workspace = true }
 pallet-state-trie-migration = { workspace = true }
 frame-system = { workspace = true }
 frame-system-rpc-runtime-api = { workspace = true }
-paseo-runtime-constants = { workspace = true }
+polkadot-runtime-constants = { workspace = true }
 pallet-timestamp = { workspace = true }
 pallet-treasury = { workspace = true }
 pallet-whitelist = { workspace = true }
@@ -111,7 +111,7 @@ tokio = { features = ["macros"], workspace = true }
 sp-tracing = { workspace = true }
 
 [build-dependencies]
-substrate-wasm-builder = { workspace = true }
+substrate-wasm-builder = { workspace = true, optional = true }
 
 [features]
 default = ["std"]
@@ -126,6 +126,7 @@ std = [
 	"frame-benchmarking?/std",
 	"frame-election-provider-support/std",
 	"frame-executive/std",
+	"frame-metadata-hash-extension/std",
 	"frame-support/std",
 	"frame-system-benchmarking?/std",
 	"frame-system-rpc-runtime-api/std",
@@ -163,7 +164,6 @@ std = [
 	"pallet-scheduler/std",
 	"pallet-session-benchmarking?/std",
 	"pallet-session/std",
-	"pallet-sudo/std",
 	"pallet-staking-reward-fn/std",
 	"pallet-staking-runtime-api/std",
 	"pallet-staking/std",
@@ -177,12 +177,12 @@ std = [
 	"pallet-whitelist/std",
 	"pallet-xcm-benchmarks?/std",
 	"pallet-xcm/std",
-	"codec/std",
-	"paseo-runtime-constants/std",
 	"polkadot-primitives/std",
 	"polkadot-runtime-common/std",
+	"polkadot-runtime-constants/std",
 	"runtime-parachains/std",
 	"scale-info/std",
+	"substrate-wasm-builder",
 	"sp-api/std",
 	"sp-application-crypto/std",
 	"sp-arithmetic/std",
@@ -237,7 +237,6 @@ runtime-benchmarks = [
 	"pallet-referenda/runtime-benchmarks",
 	"pallet-scheduler/runtime-benchmarks",
 	"pallet-session-benchmarking/runtime-benchmarks",
-	"pallet-sudo/runtime-benchmarks",
 	"pallet-staking/runtime-benchmarks",
 	"pallet-state-trie-migration/runtime-benchmarks",
 	"pallet-timestamp/runtime-benchmarks",
@@ -288,7 +287,6 @@ try-runtime = [
 	"pallet-referenda/try-runtime",
 	"pallet-scheduler/try-runtime",
 	"pallet-session/try-runtime",
-	"pallet-sudo/try-runtime",
 	"pallet-staking/try-runtime",
 	"pallet-state-trie-migration/try-runtime",
 	"pallet-timestamp/try-runtime",
@@ -303,10 +301,13 @@ try-runtime = [
 	"sp-runtime/try-runtime",
 ]
 
+# Enable metadata hash generation at compile time for the `CheckMetadataHash` extension.
+metadata-hash = ["substrate-wasm-builder?/metadata-hash"]
+
 # A feature that should be enabled when the runtime should be built for on-chain
 # deployment. This will disable stuff that shouldn't be part of the on-chain wasm
 # to make it smaller, like logging for example.
-on-chain-release-build = ["sp-api/disable-logging"]
+on-chain-release-build = ["sp-api/disable-logging", "metadata-hash"]
 
 # Set timing constants (e.g. session period) to faster versions to speed up testing.
 fast-runtime = []
diff --git a/relay/paseo/build.rs b/relay/paseo/build.rs
index aff44f9..788c2d6 100644
--- a/relay/paseo/build.rs
+++ b/relay/paseo/build.rs
@@ -1,25 +1,30 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Substrate is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
-use substrate_wasm_builder::WasmBuilder;
+#[cfg(all(feature = "std", not(feature = "metadata-hash")))]
+fn main() {
+	substrate_wasm_builder::WasmBuilder::build_using_defaults()
+}
 
+#[cfg(all(feature = "std", feature = "metadata-hash"))]
 fn main() {
-	WasmBuilder::new()
-		.with_current_project()
-		.import_memory()
-		.export_heap_base()
+	substrate_wasm_builder::WasmBuilder::init_with_defaults()
+		.enable_metadata_hash("DOT", 10)
 		.build()
 }
+
+#[cfg(not(feature = "std"))]
+fn main() {}
diff --git a/relay/paseo/constants/Cargo.toml b/relay/paseo/constants/Cargo.toml
index e1a781a..81fd205 100644
--- a/relay/paseo/constants/Cargo.toml
+++ b/relay/paseo/constants/Cargo.toml
@@ -1,5 +1,5 @@
 [package]
-name = "paseo-runtime-constants"
+name = "polkadot-runtime-constants"
 repository.workspace = true
 version.workspace = true
 authors.workspace = true
diff --git a/relay/paseo/constants/src/lib.rs b/relay/paseo/constants/src/lib.rs
index 2371afd..49cc6b3 100644
--- a/relay/paseo/constants/src/lib.rs
+++ b/relay/paseo/constants/src/lib.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
 #![cfg_attr(not(feature = "std"), no_std)]
 
@@ -44,7 +44,7 @@ pub mod time {
 	use polkadot_runtime_common::prod_or_fast;
 	pub const MILLISECS_PER_BLOCK: Moment = 6000;
 	pub const SLOT_DURATION: Moment = MILLISECS_PER_BLOCK;
-	pub const EPOCH_DURATION_IN_SLOTS: BlockNumber = prod_or_fast!(1 * HOURS, 1 * MINUTES);
+	pub const EPOCH_DURATION_IN_SLOTS: BlockNumber = prod_or_fast!(4 * HOURS, MINUTES);
 
 	// These time units are defined in number of blocks.
 	pub const MINUTES: BlockNumber = 60_000 / (MILLISECS_PER_BLOCK as BlockNumber);
@@ -134,7 +134,7 @@ pub mod system_parachain {
 	pub type SystemParachains = IsChildSystemParachain<Id>;
 }
 
-/// Paseo Treasury pallet instance.
+/// Polkadot Treasury pallet instance.
 pub const TREASURY_PALLET_ID: u8 = 19;
 
 #[cfg(test)]
diff --git a/relay/paseo/constants/src/weights/block_weights.rs b/relay/paseo/constants/src/weights/block_weights.rs
index 2c644ba..9608fd5 100644
--- a/relay/paseo/constants/src/weights/block_weights.rs
+++ b/relay/paseo/constants/src/weights/block_weights.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
 //! DATE: 2023-06-18 (Y/M/D)
diff --git a/relay/paseo/constants/src/weights/extrinsic_weights.rs b/relay/paseo/constants/src/weights/extrinsic_weights.rs
index 3c3aa61..fac8792 100644
--- a/relay/paseo/constants/src/weights/extrinsic_weights.rs
+++ b/relay/paseo/constants/src/weights/extrinsic_weights.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
 //! DATE: 2023-06-18 (Y/M/D)
diff --git a/relay/paseo/constants/src/weights/paritydb_weights.rs b/relay/paseo/constants/src/weights/paritydb_weights.rs
index 7b4fafe..f999539 100644
--- a/relay/paseo/constants/src/weights/paritydb_weights.rs
+++ b/relay/paseo/constants/src/weights/paritydb_weights.rs
@@ -18,7 +18,7 @@
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
 //! DATE: 2022-03-30 (Y/M/D)
 //!
-//! DATABASE: `ParityDb`, RUNTIME: `Paseo`
+//! DATABASE: `ParityDb`, RUNTIME: `Polkadot`
 //! BLOCK-NUM: `BlockId::Number(9653477)`
 //! SKIP-WRITE: `false`, SKIP-READ: `false`, WARMUPS: `1`
 //! STATE-VERSION: `V0`, STATE-CACHE-SIZE: `0`
@@ -33,7 +33,7 @@
 //   --mul=1.1
 //   --weight-path=runtime/polkadot/constants/src/weights/
 
-/// Storage DB weights for the `Paseo` runtime and `ParityDb`.
+/// Storage DB weights for the `Polkadot` runtime and `ParityDb`.
 pub mod constants {
 	use frame_support::{
 		parameter_types,
diff --git a/relay/paseo/constants/src/weights/rocksdb_weights.rs b/relay/paseo/constants/src/weights/rocksdb_weights.rs
index 689eb65..c5cf045 100644
--- a/relay/paseo/constants/src/weights/rocksdb_weights.rs
+++ b/relay/paseo/constants/src/weights/rocksdb_weights.rs
@@ -18,7 +18,7 @@
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
 //! DATE: 2022-03-29 (Y/M/D)
 //!
-//! DATABASE: `RocksDb`, RUNTIME: `Paseo`
+//! DATABASE: `RocksDb`, RUNTIME: `Polkadot`
 //! BLOCK-NUM: `BlockId::Number(9643856)`
 //! SKIP-WRITE: `false`, SKIP-READ: `false`, WARMUPS: `1`
 //! STATE-VERSION: `V0`, STATE-CACHE-SIZE: `0`
@@ -32,7 +32,7 @@
 //   --mul=1.1
 //   --weight-path=runtime/polkadot/constants/src/weights/
 
-/// Storage DB weights for the `Paseo` runtime and `RocksDb`.
+/// Storage DB weights for the `Polkadot` runtime and `RocksDb`.
 pub mod constants {
 	use frame_support::{
 		parameter_types,
diff --git a/relay/paseo/src/bag_thresholds.rs b/relay/paseo/src/bag_thresholds.rs
index 47f3276..56c764f 100644
--- a/relay/paseo/src/bag_thresholds.rs
+++ b/relay/paseo/src/bag_thresholds.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
 //! Autogenerated bag thresholds.
 //!
diff --git a/relay/paseo/src/governance/mod.rs b/relay/paseo/src/governance/mod.rs
index 1a8e185..d9b84b2 100644
--- a/relay/paseo/src/governance/mod.rs
+++ b/relay/paseo/src/governance/mod.rs
@@ -1,20 +1,20 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo. If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot. If not, see <http://www.gnu.org/licenses/>.
 
-//! New governance configurations for the Paseo runtime.
+//! New governance configurations for the Polkadot runtime.
 
 use super::*;
 use crate::xcm_config::CollectivesLocation;
diff --git a/relay/paseo/src/governance/origins.rs b/relay/paseo/src/governance/origins.rs
index 27ffe1a..f1283b5 100644
--- a/relay/paseo/src/governance/origins.rs
+++ b/relay/paseo/src/governance/origins.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo. If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot. If not, see <http://www.gnu.org/licenses/>.
 
 //! Custom origins for governance interventions.
 
diff --git a/relay/paseo/src/governance/tracks.rs b/relay/paseo/src/governance/tracks.rs
index 303bbe5..7ee9aec 100644
--- a/relay/paseo/src/governance/tracks.rs
+++ b/relay/paseo/src/governance/tracks.rs
@@ -1,18 +1,18 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo. If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot. If not, see <http://www.gnu.org/licenses/>.
 
 //! Track configurations for governance.
 
diff --git a/relay/paseo/src/impls.rs b/relay/paseo/src/impls.rs
index 73d5481..8d2d76d 100644
--- a/relay/paseo/src/impls.rs
+++ b/relay/paseo/src/impls.rs
@@ -43,8 +43,8 @@ where
 			V3 { location, asset_id } => (location.try_into()?, asset_id.try_into()?),
 			V4 { location, asset_id } => (location, asset_id),
 		};
-		if asset_id.0.contains_parents_only(1)
-			&& IsChildSystemParachain::<ParaId>::contains(&location)
+		if asset_id.0.contains_parents_only(1) &&
+			IsChildSystemParachain::<ParaId>::contains(&location)
 		{
 			Ok(balance)
 		} else {
diff --git a/relay/paseo/src/lib.rs b/relay/paseo/src/lib.rs
index ef5bca6..b319487 100644
--- a/relay/paseo/src/lib.rs
+++ b/relay/paseo/src/lib.rs
@@ -1,38 +1,40 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
-//! The Paseo runtime. This can be compiled with `#[no_std]`, ready for Wasm.
+//! The Polkadot runtime. This can be compiled with `#[no_std]`, ready for Wasm.
 
 #![cfg_attr(not(feature = "std"), no_std)]
 // `construct_runtime!` does a lot of recursion and requires us to increase the limit to 256.
 #![recursion_limit = "512"]
 
-use pallet_transaction_payment::CurrencyAdapter;
-use runtime_common::{
+use pallet_transaction_payment::FungibleAdapter;
+use polkadot_runtime_common::{
 	auctions, claims, crowdloan, impl_runtime_weights,
 	impls::{
 		DealWithFees, LocatableAssetConverter, VersionedLocatableAsset, VersionedLocationConverter,
 	},
-	paras_registrar, paras_sudo_wrapper, prod_or_fast, slots, BlockHashCount, BlockLength,
-	CurrencyToVote, SlowAdjustingFeeUpdate,
+	paras_registrar, prod_or_fast, slots, BlockHashCount, BlockLength, CurrencyToVote,
+	SlowAdjustingFeeUpdate,
 };
 
 use runtime_parachains::{
 	assigner_parachains as parachains_assigner_parachains,
-	configuration as parachains_configuration, disputes as parachains_disputes,
+	configuration as parachains_configuration,
+	configuration::ActiveConfigHrmpChannelSizeAndCapacityRatio,
+	disputes as parachains_disputes,
 	disputes::slashing as parachains_slashing,
 	dmp as parachains_dmp, hrmp as parachains_hrmp, inclusion as parachains_inclusion,
 	inclusion::{AggregateMessageOrigin, UmpQueueId},
@@ -50,6 +52,7 @@ use beefy_primitives::{
 	ecdsa_crypto::{AuthorityId as BeefyId, Signature as BeefySignature},
 	mmr::{BeefyDataProvider, MmrLeafVersion},
 };
+use codec::{Decode, Encode, MaxEncodedLen};
 use frame_election_provider_support::{
 	bounds::ElectionBoundsBuilder, generate_solution_type, onchain, SequentialPhragmen,
 };
@@ -58,8 +61,8 @@ use frame_support::{
 	genesis_builder_helper::{build_config, create_default_config},
 	parameter_types,
 	traits::{
-		fungible::HoldConsideration, ConstU32, EitherOf, EitherOfDiverse, Everything, Get,
-		InstanceFilter, KeyOwnerProofSystem, LinearStoragePrice, PrivilegeCmp, ProcessMessage,
+		fungible::HoldConsideration, ConstU32, Contains, EitherOf, EitherOfDiverse, EverythingBut,
+		Get, InstanceFilter, KeyOwnerProofSystem, LinearStoragePrice, PrivilegeCmp, ProcessMessage,
 		ProcessMessageError, WithdrawReasons,
 	},
 	weights::{ConstantMultiplier, WeightMeter},
@@ -70,8 +73,7 @@ use pallet_grandpa::{fg_primitives, AuthorityId as GrandpaId};
 use pallet_identity::legacy::IdentityInfo;
 use pallet_session::historical as session_historical;
 use pallet_transaction_payment::{FeeDetails, RuntimeDispatchInfo};
-use parity_scale_codec::{Decode, Encode, MaxEncodedLen};
-use primitives::{
+use polkadot_primitives::{
 	slashing,
 	vstaging::{ApprovalVotingParams, NodeFeatures},
 	AccountId, AccountIndex, Balance, BlockNumber, CandidateEvent, CandidateHash,
@@ -116,7 +118,7 @@ pub use pallet_timestamp::Call as TimestampCall;
 pub use sp_runtime::BuildStorage;
 
 /// Constant values used within the runtime.
-use paseo_runtime_constants::{currency::*, fee::*, time::*, TREASURY_PALLET_ID};
+use polkadot_runtime_constants::{currency::*, fee::*, time::*, TREASURY_PALLET_ID};
 
 // Weights used in the runtime.
 mod weights;
@@ -132,25 +134,26 @@ use governance::{
 pub mod impls;
 pub mod xcm_config;
 
-pub const LOG_TARGET: &'static str = "runtime::paseo";
+pub const LOG_TARGET: &str = "runtime::polkadot";
 
-impl_runtime_weights!(paseo_runtime_constants);
+use polkadot_runtime_common as runtime_common;
+impl_runtime_weights!(polkadot_runtime_constants);
 
 // Make the WASM binary available.
 #[cfg(feature = "std")]
 include!(concat!(env!("OUT_DIR"), "/wasm_binary.rs"));
 
-// Paseo version identifier;
-/// Runtime version (Paseo).
+// Polkadot version identifier;
+/// Runtime version (Polkadot).
 #[sp_version::runtime_version]
 pub const VERSION: RuntimeVersion = RuntimeVersion {
-	spec_name: create_runtime_str!("paseo"),
-	impl_name: create_runtime_str!("paseo-testnet"),
+	spec_name: create_runtime_str!("polkadot"),
+	impl_name: create_runtime_str!("parity-polkadot"),
 	authoring_version: 0,
-	spec_version: 1_002_000,
+	spec_version: 1_002_005,
 	impl_version: 0,
 	apis: RUNTIME_API_VERSIONS,
-	transaction_version: 25,
+	transaction_version: 26,
 	state_version: 1,
 };
 
@@ -169,11 +172,19 @@ pub fn native_version() -> NativeVersion {
 
 parameter_types! {
 	pub const Version: RuntimeVersion = VERSION;
-	pub const SS58Prefix: u8 = 42;
+	pub const SS58Prefix: u8 = 0;
+}
+
+/// A type to identify `identity::request_judgement` calls.
+pub struct IsIdentityJudgementRequestCall;
+impl Contains<RuntimeCall> for IsIdentityJudgementRequestCall {
+	fn contains(c: &RuntimeCall) -> bool {
+		matches!(c, RuntimeCall::Identity(pallet_identity::Call::request_judgement { .. }))
+	}
 }
 
 impl frame_system::Config for Runtime {
-	type BaseCallFilter = Everything;
+	type BaseCallFilter = EverythingBut<IsIdentityJudgementRequestCall>;
 	type BlockWeights = BlockWeights;
 	type BlockLength = BlockLength;
 	type RuntimeOrigin = RuntimeOrigin;
@@ -212,7 +223,7 @@ pub struct OriginPrivilegeCmp;
 impl PrivilegeCmp<OriginCaller> for OriginPrivilegeCmp {
 	fn cmp_privilege(left: &OriginCaller, right: &OriginCaller) -> Option<Ordering> {
 		if left == right {
-			return Some(Ordering::Equal);
+			return Some(Ordering::Equal)
 		}
 
 		match (left, right) {
@@ -261,7 +272,11 @@ impl pallet_preimage::Config for Runtime {
 }
 
 parameter_types! {
-	pub EpochDuration: u64 = EPOCH_DURATION_IN_SLOTS as u64;
+	pub EpochDuration: u64 = prod_or_fast!(
+		EPOCH_DURATION_IN_SLOTS as u64,
+		2 * MINUTES as u64,
+		"DOT_EPOCH_DURATION"
+	);
 	pub const ExpectedBlockTime: Moment = MILLISECS_PER_BLOCK;
 	pub ReportLongevity: u64 =
 		BondingDuration::get() as u64 * SessionsPerEra::get() as u64 * EpochDuration::get();
@@ -380,13 +395,12 @@ impl BeefyDataProvider<H256> for ParaHeadsRootProvider {
 	fn extra_data() -> H256 {
 		let mut para_heads: Vec<(u32, Vec<u8>)> = Paras::parachains()
 			.into_iter()
-			.filter_map(|id| Paras::para_head(&id).map(|head| (id.into(), head.0)))
+			.filter_map(|id| Paras::para_head(id).map(|head| (id.into(), head.0)))
 			.collect();
 		para_heads.sort_by_key(|k| k.0);
 		binary_merkle_tree::merkle_root::<mmr::Hashing, _>(
 			para_heads.into_iter().map(|pair| pair.encode()),
 		)
-		.into()
 	}
 }
 
@@ -398,7 +412,7 @@ impl pallet_beefy_mmr::Config for Runtime {
 }
 
 parameter_types! {
-	pub const TransactionByteFee: Balance = 10 * MILLICENTS;
+	pub const TransactionByteFee: Balance = polkadot_runtime_constants::fee::TRANSACTION_BYTE_FEE;
 	/// This value increases the priority of `Operational` transactions by adding
 	/// a "virtual tip" that's equal to the `OperationalFeeMultiplier * final_fee`.
 	pub const OperationalFeeMultiplier: u8 = 5;
@@ -406,7 +420,7 @@ parameter_types! {
 
 impl pallet_transaction_payment::Config for Runtime {
 	type RuntimeEvent = RuntimeEvent;
-	type OnChargeTransaction = CurrencyAdapter<Balances, DealWithFees<Runtime>>;
+	type OnChargeTransaction = FungibleAdapter<Balances, DealWithFees<Runtime>>;
 	type OperationalFeeMultiplier = OperationalFeeMultiplier;
 	type WeightToFee = WeightToFee;
 	type LengthToFee = ConstantMultiplier<Balance, TransactionByteFee>;
@@ -458,12 +472,10 @@ impl OpaqueKeys for OldSessionKeys {
 			<<Babe as BoundToRuntimeAppPublic>::Public>::ID => self.babe.as_ref(),
 			sp_core::crypto::key_types::IM_ONLINE => self.im_online.as_ref(),
 			<<Initializer as BoundToRuntimeAppPublic>::Public>::ID => self.para_validator.as_ref(),
-			<<ParaSessionInfo as BoundToRuntimeAppPublic>::Public>::ID => {
-				self.para_assignment.as_ref()
-			},
-			<<AuthorityDiscovery as BoundToRuntimeAppPublic>::Public>::ID => {
-				self.authority_discovery.as_ref()
-			},
+			<<ParaSessionInfo as BoundToRuntimeAppPublic>::Public>::ID =>
+				self.para_assignment.as_ref(),
+			<<AuthorityDiscovery as BoundToRuntimeAppPublic>::Public>::ID =>
+				self.authority_discovery.as_ref(),
 			<<Beefy as BoundToRuntimeAppPublic>::Public>::ID => self.beefy.as_ref(),
 			_ => &[],
 		}
@@ -515,12 +527,12 @@ parameter_types! {
 	// in testing: 1min or half of the session for each
 	pub SignedPhase: u32 = prod_or_fast!(
 		EPOCH_DURATION_IN_SLOTS / 4,
-		(1 * MINUTES).min(EpochDuration::get().saturated_into::<u32>() / 2),
+		MINUTES.min(EpochDuration::get().saturated_into::<u32>() / 2),
 		"DOT_SIGNED_PHASE"
 	);
 	pub UnsignedPhase: u32 = prod_or_fast!(
 		EPOCH_DURATION_IN_SLOTS / 4,
-		(1 * MINUTES).min(EpochDuration::get().saturated_into::<u32>() / 2),
+		MINUTES.min(EpochDuration::get().saturated_into::<u32>() / 2),
 		"DOT_UNSIGNED_PHASE"
 	);
 
@@ -529,10 +541,10 @@ parameter_types! {
 	pub const SignedMaxRefunds: u32 = 16 / 4;
 	pub const SignedFixedDeposit: Balance = deposit(2, 0);
 	pub const SignedDepositIncreaseFactor: Percent = Percent::from_percent(10);
-	// 0.01 PAS per KB of solution data.
+	// 0.01 DOT per KB of solution data.
 	pub const SignedDepositByte: Balance = deposit(0, 10) / 1024;
-	// Each good submission will get 1 PAS as reward
-	pub SignedRewardBase: Balance = 1 * UNITS;
+	// Each good submission will get 1 DOT as reward
+	pub SignedRewardBase: Balance = UNITS;
 
 	// 4 hour session, 1 hour unsigned phase, 32 offchain executions.
 	pub OffchainRepeat: BlockNumber = UnsignedPhase::get() / 32;
@@ -561,7 +573,8 @@ generate_solution_type!(
 pub struct OnChainSeqPhragmen;
 impl onchain::Config for OnChainSeqPhragmen {
 	type System = Runtime;
-	type Solver = SequentialPhragmen<AccountId, runtime_common::elections::OnChainAccuracy>;
+	type Solver =
+		SequentialPhragmen<AccountId, polkadot_runtime_common::elections::OnChainAccuracy>;
 	type DataProvider = Staking;
 	type WeightInfo = weights::frame_election_provider_support::WeightInfo<Runtime>;
 	type MaxWinners = MaxActiveValidators;
@@ -628,7 +641,7 @@ impl pallet_election_provider_multi_phase::Config for Runtime {
 		pallet_election_provider_multi_phase::SolutionAccuracyOf<Self>,
 		(),
 	>;
-	type BenchmarkingConfig = runtime_common::elections::BenchmarkConfig;
+	type BenchmarkingConfig = polkadot_runtime_common::elections::BenchmarkConfig;
 	type ForceOrigin = EitherOf<EnsureRoot<Self::AccountId>, StakingAdmin>;
 	type WeightInfo = weights::pallet_election_provider_multi_phase::WeightInfo<Self>;
 	type MaxWinners = MaxActiveValidators;
@@ -690,7 +703,7 @@ parameter_types! {
 	pub const MaxNominations: u32 = <NposCompactSolution16 as frame_election_provider_support::NposSolution>::LIMIT as u32;
 }
 
-/// Custom version of `runtime_commong::era_payout` somewhat tailored for Paseo's crowdloan
+/// Custom version of `runtime_commong::era_payout` somewhat tailored for Polkadot's crowdloan
 /// unlock history. The only tweak should be
 ///
 /// ```diff
@@ -792,7 +805,7 @@ impl pallet_staking::Config for Runtime {
 	type MaxUnlockingChunks = frame_support::traits::ConstU32<32>;
 	type HistoryDepth = frame_support::traits::ConstU32<84>;
 	type MaxControllersInDeprecationBatch = ConstU32<5314>;
-	type BenchmarkingConfig = runtime_common::StakingBenchmarkingConfig;
+	type BenchmarkingConfig = polkadot_runtime_common::StakingBenchmarkingConfig;
 	type EventListeners = NominationPools;
 	type WeightInfo = weights::pallet_staking::WeightInfo<Runtime>;
 }
@@ -851,10 +864,10 @@ parameter_types! {
 	// pallet instance (which sits at index 19).
 	pub TreasuryInteriorLocation: InteriorLocation = PalletInstance(TREASURY_PALLET_ID).into();
 
-	pub const TipCountdown: BlockNumber = 1 * DAYS;
+	pub const TipCountdown: BlockNumber = DAYS;
 	pub const TipFindersFee: Percent = Percent::from_percent(20);
-	pub const TipReportDepositBase: Balance = 1 * DOLLARS;
-	pub const DataDepositPerByte: Balance = 1 * CENTS;
+	pub const TipReportDepositBase: Balance = DOLLARS;
+	pub const DataDepositPerByte: Balance = CENTS;
 	pub const MaxApprovals: u32 = 100;
 	pub const MaxAuthorities: u32 = 100_000;
 	pub const MaxKeys: u32 = 10_000;
@@ -896,11 +909,11 @@ impl pallet_treasury::Config for Runtime {
 	type BalanceConverter = impls::NativeOnSystemParachain<AssetRate>;
 	type PayoutPeriod = PayoutSpendPeriod;
 	#[cfg(feature = "runtime-benchmarks")]
-	type BenchmarkHelper = runtime_common::impls::benchmarks::TreasuryArguments;
+	type BenchmarkHelper = polkadot_runtime_common::impls::benchmarks::TreasuryArguments;
 }
 
 parameter_types! {
-	pub const BountyDepositBase: Balance = 1 * DOLLARS;
+	pub const BountyDepositBase: Balance = DOLLARS;
 	pub const BountyDepositPayoutDelay: BlockNumber = 8 * DAYS;
 	pub const BountyUpdatePeriod: BlockNumber = 90 * DAYS;
 	pub const MaximumReasonLength: u32 = 16384;
@@ -949,7 +962,7 @@ impl pallet_authority_discovery::Config for Runtime {
 
 parameter_types! {
 	pub NposSolutionPriority: TransactionPriority =
-		Perbill::from_percent(90) * TransactionPriority::max_value();
+		Perbill::from_percent(90) * TransactionPriority::MAX;
 }
 
 parameter_types! {
@@ -1006,6 +1019,7 @@ where
 			frame_system::CheckWeight::<Runtime>::new(),
 			pallet_transaction_payment::ChargeTransactionPayment::<Runtime>::from(tip),
 			claims::PrevalidateAttests::<Runtime>::new(),
+			frame_metadata_hash_extension::CheckMetadataHash::new(false),
 		);
 		let raw_payload = SignedPayload::new(call, extra)
 			.map_err(|e| {
@@ -1039,7 +1053,7 @@ parameter_types! {
 }
 
 parameter_types! {
-	pub Prefix: &'static [u8] = b"Pay DOTs to the Paseo account:";
+	pub Prefix: &'static [u8] = b"Pay DOTs to the Polkadot account:";
 }
 
 impl claims::Config for Runtime {
@@ -1052,7 +1066,7 @@ impl claims::Config for Runtime {
 }
 
 parameter_types! {
-	pub const MinVestedTransfer: Balance = 1 * DOLLARS;
+	pub const MinVestedTransfer: Balance = DOLLARS;
 	pub UnvestedFundsAllowedWithdrawReasons: WithdrawReasons =
 		WithdrawReasons::except(WithdrawReasons::TRANSFER | WithdrawReasons::RESERVE);
 }
@@ -1211,23 +1225,22 @@ impl InstanceFilter<RuntimeCall> for ProxyType {
 			),
 			ProxyType::Governance => matches!(
 				c,
-				RuntimeCall::Treasury(..)
-					| RuntimeCall::Bounties(..)
-					| RuntimeCall::Utility(..)
-					| RuntimeCall::ChildBounties(..)
-					| RuntimeCall::ConvictionVoting(..)
-					| RuntimeCall::Referenda(..)
-					| RuntimeCall::Whitelist(..)
+				RuntimeCall::Treasury(..) |
+					RuntimeCall::Bounties(..) |
+					RuntimeCall::Utility(..) |
+					RuntimeCall::ChildBounties(..) |
+					RuntimeCall::ConvictionVoting(..) |
+					RuntimeCall::Referenda(..) |
+					RuntimeCall::Whitelist(..)
 			),
 			ProxyType::Staking => {
 				matches!(
 					c,
-					RuntimeCall::Staking(..)
-						| RuntimeCall::Session(..)
-						| RuntimeCall::Utility(..)
-						| RuntimeCall::FastUnstake(..)
-						| RuntimeCall::VoterList(..)
-						| RuntimeCall::NominationPools(..)
+					RuntimeCall::Staking(..) |
+						RuntimeCall::Session(..) | RuntimeCall::Utility(..) |
+						RuntimeCall::FastUnstake(..) |
+						RuntimeCall::VoterList(..) |
+						RuntimeCall::NominationPools(..)
 				)
 			},
 			ProxyType::NominationPools => {
@@ -1235,18 +1248,18 @@ impl InstanceFilter<RuntimeCall> for ProxyType {
 			},
 			ProxyType::IdentityJudgement => matches!(
 				c,
-				RuntimeCall::Identity(pallet_identity::Call::provide_judgement { .. })
-					| RuntimeCall::Utility(..)
+				RuntimeCall::Identity(pallet_identity::Call::provide_judgement { .. }) |
+					RuntimeCall::Utility(..)
 			),
 			ProxyType::CancelProxy => {
 				matches!(c, RuntimeCall::Proxy(pallet_proxy::Call::reject_announcement { .. }))
 			},
 			ProxyType::Auction => matches!(
 				c,
-				RuntimeCall::Auctions(..)
-					| RuntimeCall::Crowdloan(..)
-					| RuntimeCall::Registrar(..)
-					| RuntimeCall::Slots(..)
+				RuntimeCall::Auctions(..) |
+					RuntimeCall::Crowdloan(..) |
+					RuntimeCall::Registrar(..) |
+					RuntimeCall::Slots(..)
 			),
 		}
 	}
@@ -1299,7 +1312,7 @@ impl parachains_inclusion::Config for Runtime {
 }
 
 parameter_types! {
-	pub const ParasUnsignedPriority: TransactionPriority = TransactionPriority::max_value();
+	pub const ParasUnsignedPriority: TransactionPriority = TransactionPriority::MAX;
 }
 
 impl parachains_paras::Config for Runtime {
@@ -1363,11 +1376,22 @@ impl pallet_message_queue::Config for Runtime {
 
 impl parachains_dmp::Config for Runtime {}
 
+parameter_types! {
+	pub const HrmpChannelSizeAndCapacityWithSystemRatio: Percent = Percent::from_percent(100);
+}
+
 impl parachains_hrmp::Config for Runtime {
 	type RuntimeOrigin = RuntimeOrigin;
 	type RuntimeEvent = RuntimeEvent;
 	type ChannelManager = EitherOf<EnsureRoot<Self::AccountId>, GeneralAdmin>;
 	type Currency = Balances;
+	// Use the `HrmpChannelSizeAndCapacityWithSystemRatio` ratio from the actual active
+	// `HostConfiguration` configuration for `hrmp_channel_max_message_size` and
+	// `hrmp_channel_max_capacity`.
+	type DefaultChannelSizeAndCapacityWithSystem = ActiveConfigHrmpChannelSizeAndCapacityRatio<
+		Runtime,
+		HrmpChannelSizeAndCapacityWithSystemRatio,
+	>;
 	type WeightInfo = weights::runtime_parachains_hrmp::WeightInfo<Self>;
 }
 
@@ -1431,7 +1455,13 @@ impl paras_registrar::Config for Runtime {
 
 parameter_types! {
 	// 12 weeks = 3 months per lease period -> 8 lease periods ~ 2 years
-	pub LeasePeriod: BlockNumber = prod_or_fast!(1 * WEEKS, 1 * DAYS, "DOT_LEASE_PERIOD");
+	pub LeasePeriod: BlockNumber = prod_or_fast!(12 * WEEKS, 12 * WEEKS, "DOT_LEASE_PERIOD");
+	// Polkadot Genesis was on May 26, 2020.
+	// Target Parachain Onboarding Date: Dec 15, 2021.
+	// Difference is 568 days.
+	// We want a lease period to start on the target onboarding date.
+	// 568 % (12 * 7) = 64 day offset
+	pub LeaseOffset: BlockNumber = prod_or_fast!(64 * DAYS, 0, "DOT_LEASE_OFFSET");
 }
 
 impl slots::Config for Runtime {
@@ -1439,7 +1469,7 @@ impl slots::Config for Runtime {
 	type Currency = Balances;
 	type Registrar = Registrar;
 	type LeasePeriod = LeasePeriod;
-	type LeaseOffset = ();
+	type LeaseOffset = LeaseOffset;
 	type ForceOrigin = EitherOf<EnsureRoot<Self::AccountId>, LeaseAdmin>;
 	type WeightInfo = weights::runtime_common_slots::WeightInfo<Runtime>;
 }
@@ -1498,8 +1528,8 @@ impl pallet_nomination_pools::Config for Runtime {
 	type Currency = Balances;
 	type RuntimeFreezeReason = RuntimeFreezeReason;
 	type RewardCounter = FixedU128;
-	type BalanceToU256 = runtime_common::BalanceToU256;
-	type U256ToBalance = runtime_common::U256ToBalance;
+	type BalanceToU256 = polkadot_runtime_common::BalanceToU256;
+	type U256ToBalance = polkadot_runtime_common::U256ToBalance;
 	type Staking = Staking;
 	type PostUnbondingPoolsWindow = frame_support::traits::ConstU32<4>;
 	type MaxMetadataLen = frame_support::traits::ConstU32<256>;
@@ -1515,9 +1545,9 @@ impl frame_support::traits::OnRuntimeUpgrade for InitiateNominationPools {
 	fn on_runtime_upgrade() -> frame_support::weights::Weight {
 		// we use one as an indicator if this has already been set.
 		if pallet_nomination_pools::MaxPools::<Runtime>::get().is_none() {
-			// 5 PAS to join a pool.
+			// 5 DOT to join a pool.
 			pallet_nomination_pools::MinJoinBond::<Runtime>::put(5 * UNITS);
-			// 100 PAS to create a pool.
+			// 100 DOT to create a pool.
 			pallet_nomination_pools::MinCreateBond::<Runtime>::put(100 * UNITS);
 
 			// Initialize with limits for now.
@@ -1536,7 +1566,7 @@ impl frame_support::traits::OnRuntimeUpgrade for InitiateNominationPools {
 
 parameter_types! {
 	// The deposit configuration for the singed migration. Specially if you want to allow any signed account to do the migration (see `SignedFilter`, these deposits should be high)
-	pub const MigrationSignedDepositPerItem: Balance = 1 * CENTS;
+	pub const MigrationSignedDepositPerItem: Balance = CENTS;
 	pub const MigrationSignedDepositBase: Balance = 20 * CENTS * 100;
 	pub const MigrationMaxKeyLen: u32 = 512;
 }
@@ -1564,7 +1594,7 @@ impl pallet_asset_rate::Config for Runtime {
 	type Currency = Balances;
 	type AssetKind = <Runtime as pallet_treasury::Config>::AssetKind;
 	#[cfg(feature = "runtime-benchmarks")]
-	type BenchmarkHelper = runtime_common::impls::benchmarks::AssetRateArguments;
+	type BenchmarkHelper = polkadot_runtime_common::impls::benchmarks::AssetRateArguments;
 }
 
 // A mock pallet to keep `ImOnline` events decodable after pallet removal
@@ -1620,14 +1650,6 @@ impl pallet_im_online::Config for Runtime {
 	type ValidatorSet = Historical;
 }
 
-impl pallet_sudo::Config for Runtime {
-	type RuntimeEvent = RuntimeEvent;
-	type RuntimeCall = RuntimeCall;
-	type WeightInfo = weights::pallet_sudo::WeightInfo<Runtime>;
-}
-
-impl paras_sudo_wrapper::Config for Runtime {}
-
 construct_runtime! {
 	pub enum Runtime
 	{
@@ -1737,10 +1759,6 @@ construct_runtime! {
 		// refer to block<N>. See issue #160 for details.
 		Mmr: pallet_mmr = 201,
 		BeefyMmrLeaf: pallet_beefy_mmr = 202,
-
-		// Sudo.
-		ParaSudoWrapper: paras_sudo_wrapper = 250,
-		Sudo: pallet_sudo::{Pallet, Call, Storage, Event<T>, Config<T>} = 255,
 	}
 }
 
@@ -1765,6 +1783,7 @@ pub type SignedExtra = (
 	frame_system::CheckWeight<Runtime>,
 	pallet_transaction_payment::ChargeTransactionPayment<Runtime>,
 	claims::PrevalidateAttests<Runtime>,
+	frame_metadata_hash_extension::CheckMetadataHash<Runtime>,
 );
 
 pub struct NominationPoolsMigrationV4OldPallet;
@@ -1801,7 +1820,7 @@ pub mod migrations {
 		fn pre_upgrade() -> Result<Vec<u8>, sp_runtime::TryRuntimeError> {
 			if System::last_runtime_upgrade_spec_version() > UPGRADE_SESSION_KEYS_FROM_SPEC {
 				log::warn!(target: "runtime::session_keys", "Skipping session keys migration pre-upgrade check due to spec version (already applied?)");
-				return Ok(Vec::new());
+				return Ok(Vec::new())
 			}
 
 			log::info!(target: "runtime::session_keys", "Collecting pre-upgrade session keys state");
@@ -1833,7 +1852,7 @@ pub mod migrations {
 		fn on_runtime_upgrade() -> Weight {
 			if System::last_runtime_upgrade_spec_version() > UPGRADE_SESSION_KEYS_FROM_SPEC {
 				log::info!("Skipping session keys upgrade: already applied");
-				return <Runtime as frame_system::Config>::DbWeight::get().reads(1);
+				return <Runtime as frame_system::Config>::DbWeight::get().reads(1)
 			}
 			log::trace!("Upgrading session keys");
 			Session::upgrade_keys::<OldSessionKeys, _>(transform_session_keys);
@@ -1846,7 +1865,7 @@ pub mod migrations {
 		) -> Result<(), sp_runtime::TryRuntimeError> {
 			if System::last_runtime_upgrade_spec_version() > UPGRADE_SESSION_KEYS_FROM_SPEC {
 				log::warn!(target: "runtime::session_keys", "Skipping session keys migration post-upgrade check due to spec version (already applied?)");
-				return Ok(());
+				return Ok(())
 			}
 
 			let key_ids = SessionKeys::key_ids();
@@ -1914,13 +1933,13 @@ pub type SignedPayload = generic::SignedPayload<RuntimeCall, SignedExtra>;
 mod benches {
 	frame_benchmarking::define_benchmarks!(
 		// Polkadot
-		// NOTE: Make sure to prefix these with `runtime_common::` so
+		// NOTE: Make sure to prefix these with `polkadot_runtime_common::` so
 		// the that path resolves correctly in the generated file.
-		[runtime_common::auctions, Auctions]
-		[runtime_common::claims, Claims]
-		[runtime_common::crowdloan, Crowdloan]
-		[runtime_common::slots, Slots]
-		[runtime_common::paras_registrar, Registrar]
+		[polkadot_runtime_common::auctions, Auctions]
+		[polkadot_runtime_common::claims, Claims]
+		[polkadot_runtime_common::crowdloan, Crowdloan]
+		[polkadot_runtime_common::slots, Slots]
+		[polkadot_runtime_common::paras_registrar, Registrar]
 		[runtime_parachains::configuration, Configuration]
 		[runtime_parachains::disputes, ParasDisputes]
 		[runtime_parachains::disputes::slashing, ParasSlashing]
@@ -1962,8 +1981,6 @@ mod benches {
 		[pallet_xcm, PalletXcmExtrinsiscsBenchmark::<Runtime>]
 		[pallet_xcm_benchmarks::fungible, pallet_xcm_benchmarks::fungible::Pallet::<Runtime>]
 		[pallet_xcm_benchmarks::generic, pallet_xcm_benchmarks::generic::Pallet::<Runtime>]
-		// Sudo
-		[pallet_sudo, Sudo]
 	);
 }
 
@@ -1996,7 +2013,7 @@ sp_api::impl_runtime_apis! {
 		}
 	}
 
-	impl block_builder_api::BlockBuilder<Block> for Runtime {
+	impl sp_block_builder::BlockBuilder<Block> for Runtime {
 		fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic) -> ApplyExtrinsicResult {
 			Executive::apply_extrinsic(extrinsic)
 		}
@@ -2005,14 +2022,14 @@ sp_api::impl_runtime_apis! {
 			Executive::finalize_block()
 		}
 
-		fn inherent_extrinsics(data: inherents::InherentData) -> Vec<<Block as BlockT>::Extrinsic> {
+		fn inherent_extrinsics(data: sp_inherents::InherentData) -> Vec<<Block as BlockT>::Extrinsic> {
 			data.create_extrinsics()
 		}
 
 		fn check_inherents(
 			block: Block,
-			data: inherents::InherentData,
-		) -> inherents::CheckInherentsResult {
+			data: sp_inherents::InherentData,
+		) -> sp_inherents::CheckInherentsResult {
 			data.check_extrinsics(&block)
 		}
 	}
@@ -2043,9 +2060,13 @@ sp_api::impl_runtime_apis! {
 		fn eras_stakers_page_count(era: sp_staking::EraIndex, account: AccountId) -> sp_staking::Page {
 			Staking::api_eras_stakers_page_count(era, account)
 		}
+
+		fn pending_rewards(era: sp_staking::EraIndex, account: AccountId) -> bool {
+			Staking::api_pending_rewards(era, account)
+		}
 	}
 
-	impl tx_pool_api::runtime_api::TaggedTransactionQueue<Block> for Runtime {
+	impl sp_transaction_pool::runtime_api::TaggedTransactionQueue<Block> for Runtime {
 		fn validate_transaction(
 			source: TransactionSource,
 			tx: <Block as BlockT>::Extrinsic,
@@ -2055,14 +2076,14 @@ sp_api::impl_runtime_apis! {
 		}
 	}
 
-	impl offchain_primitives::OffchainWorkerApi<Block> for Runtime {
+	impl sp_offchain::OffchainWorkerApi<Block> for Runtime {
 		fn offchain_worker(header: &<Block as BlockT>::Header) {
 			Executive::offchain_worker(header)
 		}
 	}
 
 	#[api_version(10)]
-	impl primitives::runtime_api::ParachainHost<Block> for Runtime {
+	impl polkadot_primitives::runtime_api::ParachainHost<Block> for Runtime {
 		fn validators() -> Vec<ValidatorId> {
 			parachains_runtime_api_impl::validators::<Runtime>()
 		}
@@ -2092,7 +2113,7 @@ sp_api::impl_runtime_apis! {
 
 		fn check_validation_outputs(
 			para_id: ParaId,
-			outputs: primitives::CandidateCommitments,
+			outputs: polkadot_primitives::CandidateCommitments,
 		) -> bool {
 			parachains_runtime_api_impl::check_validation_outputs::<Runtime>(para_id, outputs)
 		}
@@ -2148,8 +2169,8 @@ sp_api::impl_runtime_apis! {
 		}
 
 		fn submit_pvf_check_statement(
-			stmt: primitives::PvfCheckStatement,
-			signature: primitives::ValidatorSignature,
+			stmt: polkadot_primitives::PvfCheckStatement,
+			signature: polkadot_primitives::ValidatorSignature,
 		) {
 			parachains_runtime_api_impl::submit_pvf_check_statement::<Runtime>(stmt, signature)
 		}
@@ -2176,7 +2197,7 @@ sp_api::impl_runtime_apis! {
 		fn key_ownership_proof(
 			validator_id: ValidatorId,
 		) -> Option<slashing::OpaqueKeyOwnershipProof> {
-			use parity_scale_codec::Encode;
+			use codec::Encode;
 
 			Historical::prove((PARACHAIN_KEY_TYPE_ID, validator_id))
 				.map(|p| p.encode())
@@ -2197,11 +2218,11 @@ sp_api::impl_runtime_apis! {
 			parachains_runtime_api_impl::minimum_backing_votes::<Runtime>()
 		}
 
-		fn para_backing_state(para_id: ParaId) -> Option<primitives::async_backing::BackingState> {
+		fn para_backing_state(para_id: ParaId) -> Option<polkadot_primitives::async_backing::BackingState> {
 			parachains_runtime_api_impl::backing_state::<Runtime>(para_id)
 		}
 
-		fn async_backing_params() -> primitives::AsyncBackingParams {
+		fn async_backing_params() -> polkadot_primitives::AsyncBackingParams {
 			parachains_runtime_api_impl::async_backing_params::<Runtime>()
 		}
 
@@ -2247,7 +2268,7 @@ sp_api::impl_runtime_apis! {
 			_set_id: beefy_primitives::ValidatorSetId,
 			authority_id: BeefyId,
 		) -> Option<beefy_primitives::OpaqueKeyOwnershipProof> {
-			use parity_scale_codec::Encode;
+			use codec::Encode;
 
 			Historical::prove((beefy_primitives::KEY_TYPE, authority_id))
 				.map(|p| p.encode())
@@ -2339,7 +2360,7 @@ sp_api::impl_runtime_apis! {
 			_set_id: fg_primitives::SetId,
 			authority_id: fg_primitives::AuthorityId,
 		) -> Option<fg_primitives::OpaqueKeyOwnershipProof> {
-			use parity_scale_codec::Encode;
+			use codec::Encode;
 
 			Historical::prove((fg_primitives::KEY_TYPE, authority_id))
 				.map(|p| p.encode())
@@ -2376,7 +2397,7 @@ sp_api::impl_runtime_apis! {
 			_slot: babe_primitives::Slot,
 			authority_id: babe_primitives::AuthorityId,
 		) -> Option<babe_primitives::OpaqueKeyOwnershipProof> {
-			use parity_scale_codec::Encode;
+			use codec::Encode;
 
 			Historical::prove((babe_primitives::KEY_TYPE, authority_id))
 				.map(|p| p.encode())
@@ -2542,21 +2563,21 @@ sp_api::impl_runtime_apis! {
 					TokenLocation::get(),
 					ExistentialDeposit::get()
 				).into());
-				pub AssetHubParaId: ParaId = paseo_runtime_constants::system_parachain::ASSET_HUB_ID.into();
+				pub AssetHubParaId: ParaId = polkadot_runtime_constants::system_parachain::ASSET_HUB_ID.into();
 				pub const RandomParaId: ParaId = ParaId::new(43211234);
 			}
 
 			use pallet_xcm::benchmarking::Pallet as PalletXcmExtrinsiscsBenchmark;
 			impl pallet_xcm::benchmarking::Config for Runtime {
 				type DeliveryHelper = (
-					runtime_common::xcm_sender::ToParachainDeliveryHelper<
+					polkadot_runtime_common::xcm_sender::ToParachainDeliveryHelper<
 						XcmConfig,
 						ExistentialDepositAsset,
 						xcm_config::PriceForChildParachainDelivery,
 						AssetHubParaId,
 						(),
 					>,
-					runtime_common::xcm_sender::ToParachainDeliveryHelper<
+					polkadot_runtime_common::xcm_sender::ToParachainDeliveryHelper<
 						XcmConfig,
 						ExistentialDepositAsset,
 						xcm_config::PriceForChildParachainDelivery,
@@ -2613,7 +2634,7 @@ sp_api::impl_runtime_apis! {
 			impl pallet_xcm_benchmarks::Config for Runtime {
 				type XcmConfig = XcmConfig;
 				type AccountIdConverter = SovereignAccountOf;
-				type DeliveryHelper = runtime_common::xcm_sender::ToParachainDeliveryHelper<
+				type DeliveryHelper = polkadot_runtime_common::xcm_sender::ToParachainDeliveryHelper<
 					XcmConfig,
 					ExistentialDepositAsset,
 					xcm_config::PriceForChildParachainDelivery,
@@ -2624,7 +2645,7 @@ sp_api::impl_runtime_apis! {
 					Ok(AssetHubLocation::get())
 				}
 				fn worst_case_holding(_depositable_count: u32) -> Assets {
-					// Polkadot only knows about PAS
+					// Polkadot only knows about DOT
 					vec![Asset { id: AssetId(TokenLocation::get()), fun: Fungible(1_000_000 * UNITS) }].into()
 				}
 			}
@@ -2693,18 +2714,18 @@ sp_api::impl_runtime_apis! {
 				}
 
 				fn unlockable_asset() -> Result<(Location, Location, Asset), BenchmarkError> {
-					// Paseo doesn't support asset locking
+					// Polkadot doesn't support asset locking
 					Err(BenchmarkError::Skip)
 				}
 
 				fn export_message_origin_and_destination(
 				) -> Result<(Location, NetworkId, InteriorLocation), BenchmarkError> {
-					// Paseo doesn't support exporting messages
+					// Polkadot doesn't support exporting messages
 					Err(BenchmarkError::Skip)
 				}
 
 				fn alias_origin() -> Result<(Location, Location), BenchmarkError> {
-					// The XCM executor of Paseo doesn't have a configured `Aliasers`
+					// The XCM executor of Polkadot doesn't have a configured `Aliasers`
 					Err(BenchmarkError::Skip)
 				}
 			}
@@ -2727,11 +2748,10 @@ sp_api::impl_runtime_apis! {
 mod test_fees {
 	use super::*;
 	use frame_support::{dispatch::GetDispatchInfo, weights::WeightToFee as WeightToFeeT};
-	use keyring::Sr25519Keyring::{Alice, Charlie};
-	use pallet_transaction_payment::Multiplier;
-	use runtime_common::MinimumMultiplier;
+	use polkadot_runtime_common::MinimumMultiplier;
 	use separator::Separatable;
-	use sp_runtime::{assert_eq_error_rate, FixedPointNumber, MultiAddress, MultiSignature};
+	use sp_keyring::Sr25519Keyring::{Alice, Charlie};
+	use sp_runtime::{assert_eq_error_rate, MultiAddress, MultiSignature};
 
 	#[test]
 	fn payout_weight_portion() {
@@ -2792,6 +2812,7 @@ mod test_fees {
 			frame_system::CheckWeight::<Runtime>::new(),
 			pallet_transaction_payment::ChargeTransactionPayment::<Runtime>::from(0),
 			claims::PrevalidateAttests::<Runtime>::new(),
+			frame_metadata_hash_extension::CheckMetadataHash::<Runtime>::new(false),
 		);
 		let uxt = UncheckedExtrinsic {
 			function: call,
@@ -2845,8 +2866,8 @@ mod test_fees {
 		};
 
 		let mut active = target_voters;
-		while weight_with(active).all_lte(OffchainSolutionWeightLimit::get())
-			|| active == target_voters
+		while weight_with(active).all_lte(OffchainSolutionWeightLimit::get()) ||
+			active == target_voters
 		{
 			active += 1;
 		}
@@ -2919,7 +2940,7 @@ mod test {
 	fn check_treasury_pallet_id() {
 		assert_eq!(
 			<Treasury as frame_support::traits::PalletInfoAccess>::index() as u8,
-			paseo_runtime_constants::TREASURY_PALLET_ID
+			polkadot_runtime_constants::TREASURY_PALLET_ID
 		);
 	}
 
@@ -2938,13 +2959,13 @@ mod multiplier_tests {
 		dispatch::DispatchInfo,
 		traits::{OnFinalize, PalletInfoAccess},
 	};
-	use runtime_common::{MinimumMultiplier, TargetBlockFullness};
+	use polkadot_runtime_common::{MinimumMultiplier, TargetBlockFullness};
 	use separator::Separatable;
 	use sp_runtime::traits::Convert;
 
 	fn run_with_system_weight<F>(w: Weight, mut assertions: F)
 	where
-		F: FnMut() -> (),
+		F: FnMut(),
 	{
 		let mut t: sp_io::TestExternalities = frame_system::GenesisConfig::<Runtime>::default()
 			.build_storage()
@@ -2959,8 +2980,8 @@ mod multiplier_tests {
 	#[test]
 	fn multiplier_can_grow_from_zero() {
 		let minimum_multiplier = MinimumMultiplier::get();
-		let target = TargetBlockFullness::get()
-			* BlockWeights::get().get(DispatchClass::Normal).max_total.unwrap();
+		let target = TargetBlockFullness::get() *
+			BlockWeights::get().get(DispatchClass::Normal).max_total.unwrap();
 		// if the min is too small, then this will not change, and we are doomed forever.
 		// the weight is 1/100th bigger than target.
 		run_with_system_weight(target.saturating_mul(101) / 100, || {
@@ -3079,7 +3100,7 @@ mod remote_tests {
 
 	async fn remote_ext_test_setup() -> RemoteExternalities<Block> {
 		let transport: Transport =
-			var("WS").unwrap_or("wss://paseo.rpc.amforc.com:443".to_string()).into();
+			var("WS").unwrap_or("wss://rpc.polkadot.io:443".to_string()).into();
 		let maybe_state_snapshot: Option<SnapshotConfig> = var("SNAP").map(|s| s.into()).ok();
 		Builder::<Block>::default()
 			.mode(if let Some(state_snapshot) = maybe_state_snapshot {
@@ -3102,7 +3123,7 @@ mod remote_tests {
 	#[tokio::test]
 	async fn dispatch_all_proposals() {
 		if var("RUN_OPENGOV_TEST").is_err() {
-			return;
+			return
 		}
 
 		sp_tracing::try_init_simple();
@@ -3148,7 +3169,7 @@ mod remote_tests {
 	#[tokio::test]
 	async fn run_migrations() {
 		if var("RUN_MIGRATION_TESTS").is_err() {
-			return;
+			return
 		}
 
 		sp_tracing::try_init_simple();
@@ -3161,7 +3182,7 @@ mod remote_tests {
 	async fn try_fast_unstake_all() {
 		sp_tracing::try_init_simple();
 		let transport: Transport =
-			var("WS").unwrap_or("wss://paseo.rpc.amforc.com:443".to_string()).into();
+			var("WS").unwrap_or("wss://rpc.polkadot.io:443".to_string()).into();
 		let maybe_state_snapshot: Option<SnapshotConfig> = var("SNAP").map(|s| s.into()).ok();
 		let mut ext = Builder::<Block>::default()
 			.mode(if let Some(state_snapshot) = maybe_state_snapshot {
@@ -3181,7 +3202,7 @@ mod remote_tests {
 			.unwrap();
 		ext.execute_with(|| {
 			pallet_fast_unstake::ErasToCheckPerBlock::<Runtime>::put(1);
-			runtime_common::try_runtime::migrate_all_inactive_nominators::<Runtime>()
+			polkadot_runtime_common::try_runtime::migrate_all_inactive_nominators::<Runtime>()
 		});
 	}
 }
@@ -3198,21 +3219,21 @@ mod init_state_migration {
 	impl OnRuntimeUpgrade for InitMigrate {
 		#[cfg(feature = "try-runtime")]
 		fn pre_upgrade() -> Result<Vec<u8>, sp_runtime::DispatchError> {
-			use parity_scale_codec::Encode;
-			let migration_should_start = AutoLimits::<Runtime>::get().is_none()
-				&& MigrationProcess::<Runtime>::get() == Default::default();
+			use codec::Encode;
+			let migration_should_start = AutoLimits::<Runtime>::get().is_none() &&
+				MigrationProcess::<Runtime>::get() == Default::default();
 			Ok(migration_should_start.encode())
 		}
 
 		fn on_runtime_upgrade() -> frame_support::weights::Weight {
 			if AutoLimits::<Runtime>::get().is_some() {
 				log::warn!("Automatic trie migration already started, not proceeding.");
-				return <Runtime as frame_system::Config>::DbWeight::get().reads(1);
+				return <Runtime as frame_system::Config>::DbWeight::get().reads(1)
 			};
 
 			if MigrationProcess::<Runtime>::get() != Default::default() {
 				log::warn!("MigrationProcess is not Default. Not proceeding.");
-				return <Runtime as frame_system::Config>::DbWeight::get().reads(2);
+				return <Runtime as frame_system::Config>::DbWeight::get().reads(2)
 			};
 
 			// Migration is not already running and `MigraitonProcess` is Default. Ready to run
@@ -3231,7 +3252,7 @@ mod init_state_migration {
 		fn post_upgrade(
 			migration_should_start_bytes: Vec<u8>,
 		) -> Result<(), sp_runtime::DispatchError> {
-			use parity_scale_codec::Decode;
+			use codec::Decode;
 			let migration_should_start: bool =
 				Decode::decode(&mut migration_should_start_bytes.as_slice())
 					.expect("failed to decode migration should start");
diff --git a/relay/paseo/src/weights/frame_benchmarking_baseline.rs b/relay/paseo/src/weights/frame_benchmarking_baseline.rs
index fb7c387..9c98b7e 100644
--- a/relay/paseo/src/weights/frame_benchmarking_baseline.rs
+++ b/relay/paseo/src/weights/frame_benchmarking_baseline.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `frame_benchmarking::baseline`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=frame_benchmarking::baseline
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -52,8 +51,8 @@ impl<T: frame_system::Config> frame_benchmarking::baseline::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 170_000 picoseconds.
-		Weight::from_parts(236_950, 0)
+		// Minimum execution time: 175_000 picoseconds.
+		Weight::from_parts(214_057, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `i` is `[0, 1000000]`.
@@ -61,8 +60,8 @@ impl<T: frame_system::Config> frame_benchmarking::baseline::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 180_000 picoseconds.
-		Weight::from_parts(237_909, 0)
+		// Minimum execution time: 178_000 picoseconds.
+		Weight::from_parts(220_856, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `i` is `[0, 1000000]`.
@@ -70,8 +69,8 @@ impl<T: frame_system::Config> frame_benchmarking::baseline::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 170_000 picoseconds.
-		Weight::from_parts(240_414, 0)
+		// Minimum execution time: 179_000 picoseconds.
+		Weight::from_parts(213_271, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `i` is `[0, 1000000]`.
@@ -79,16 +78,16 @@ impl<T: frame_system::Config> frame_benchmarking::baseline::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 180_000 picoseconds.
-		Weight::from_parts(239_867, 0)
+		// Minimum execution time: 173_000 picoseconds.
+		Weight::from_parts(206_295, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	fn hashing() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 25_093_069_000 picoseconds.
-		Weight::from_parts(25_336_595_000, 0)
+		// Minimum execution time: 23_861_476_000 picoseconds.
+		Weight::from_parts(23_888_047_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `i` is `[0, 100]`.
@@ -96,10 +95,10 @@ impl<T: frame_system::Config> frame_benchmarking::baseline::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 200_000 picoseconds.
-		Weight::from_parts(928_360, 0)
+		// Minimum execution time: 224_000 picoseconds.
+		Weight::from_parts(4_903_346, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 12_163
-			.saturating_add(Weight::from_parts(35_727_577, 0).saturating_mul(i.into()))
+			// Standard Error: 9_407
+			.saturating_add(Weight::from_parts(40_865_071, 0).saturating_mul(i.into()))
 	}
 }
diff --git a/relay/paseo/src/weights/frame_election_provider_support.rs b/relay/paseo/src/weights/frame_election_provider_support.rs
index 89c0d7b..8fe74da 100644
--- a/relay/paseo/src/weights/frame_election_provider_support.rs
+++ b/relay/paseo/src/weights/frame_election_provider_support.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `frame_election_provider_support`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=frame_election_provider_support
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -54,13 +53,13 @@ impl<T: frame_system::Config> frame_election_provider_support::WeightInfo for We
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 6_100_978_000 picoseconds.
-		Weight::from_parts(6_169_772_000, 0)
+		// Minimum execution time: 7_127_246_000 picoseconds.
+		Weight::from_parts(7_308_658_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 111_309
-			.saturating_add(Weight::from_parts(4_876_900, 0).saturating_mul(v.into()))
-			// Standard Error: 11_379_882
-			.saturating_add(Weight::from_parts(1_135_180_130, 0).saturating_mul(d.into()))
+			// Standard Error: 147_084
+			.saturating_add(Weight::from_parts(6_250_512, 0).saturating_mul(v.into()))
+			// Standard Error: 15_037_437
+			.saturating_add(Weight::from_parts(1_448_677_601, 0).saturating_mul(d.into()))
 	}
 	/// The range of component `v` is `[1000, 2000]`.
 	/// The range of component `t` is `[500, 1000]`.
@@ -69,12 +68,12 @@ impl<T: frame_system::Config> frame_election_provider_support::WeightInfo for We
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 4_223_998_000 picoseconds.
-		Weight::from_parts(4_266_902_000, 0)
+		// Minimum execution time: 4_860_861_000 picoseconds.
+		Weight::from_parts(4_942_856_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 93_809
-			.saturating_add(Weight::from_parts(3_973_586, 0).saturating_mul(v.into()))
-			// Standard Error: 9_590_703
-			.saturating_add(Weight::from_parts(1_026_189_087, 0).saturating_mul(d.into()))
+			// Standard Error: 132_344
+			.saturating_add(Weight::from_parts(5_166_570, 0).saturating_mul(v.into()))
+			// Standard Error: 13_530_405
+			.saturating_add(Weight::from_parts(1_395_319_855, 0).saturating_mul(d.into()))
 	}
 }
diff --git a/relay/paseo/src/weights/frame_system.rs b/relay/paseo/src/weights/frame_system.rs
index 4d722b5..6db32e7 100644
--- a/relay/paseo/src/weights/frame_system.rs
+++ b/relay/paseo/src/weights/frame_system.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `frame_system`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=frame_system
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -52,22 +51,22 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_352_000 picoseconds.
-		Weight::from_parts(1_442_000, 0)
+		// Minimum execution time: 1_654_000 picoseconds.
+		Weight::from_parts(1_692_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			// Standard Error: 0
-			.saturating_add(Weight::from_parts(271, 0).saturating_mul(b.into()))
+			.saturating_add(Weight::from_parts(390, 0).saturating_mul(b.into()))
 	}
 	/// The range of component `b` is `[0, 3932160]`.
 	fn remark_with_event(b: u32, ) -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_616_000 picoseconds.
-		Weight::from_parts(14_260_210, 0)
+		// Minimum execution time: 4_879_000 picoseconds.
+		Weight::from_parts(5_058_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(1_505, 0).saturating_mul(b.into()))
+			// Standard Error: 5
+			.saturating_add(Weight::from_parts(1_752, 0).saturating_mul(b.into()))
 	}
 	/// Storage: `System::Digest` (r:1 w:1)
 	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
@@ -77,8 +76,8 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `1485`
-		// Minimum execution time: 2_213_000 picoseconds.
-		Weight::from_parts(2_403_000, 0)
+		// Minimum execution time: 3_054_000 picoseconds.
+		Weight::from_parts(3_141_000, 0)
 			.saturating_add(Weight::from_parts(0, 1485))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -91,8 +90,8 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `1485`
-		// Minimum execution time: 69_529_096_000 picoseconds.
-		Weight::from_parts(73_306_912_000, 0)
+		// Minimum execution time: 96_389_124_000 picoseconds.
+		Weight::from_parts(98_328_390_000, 0)
 			.saturating_add(Weight::from_parts(0, 1485))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -104,11 +103,11 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_222_000 picoseconds.
-		Weight::from_parts(1_383_000, 0)
+		// Minimum execution time: 1_597_000 picoseconds.
+		Weight::from_parts(1_651_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 1_521
-			.saturating_add(Weight::from_parts(677_807, 0).saturating_mul(i.into()))
+			// Standard Error: 2_244
+			.saturating_add(Weight::from_parts(759_502, 0).saturating_mul(i.into()))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
 	}
 	/// Storage: `Skipped::Metadata` (r:0 w:0)
@@ -118,11 +117,11 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_292_000 picoseconds.
-		Weight::from_parts(1_381_000, 0)
+		// Minimum execution time: 1_597_000 picoseconds.
+		Weight::from_parts(1_649_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 734
-			.saturating_add(Weight::from_parts(484_125, 0).saturating_mul(i.into()))
+			// Standard Error: 1_094
+			.saturating_add(Weight::from_parts(562_211, 0).saturating_mul(i.into()))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
 	}
 	/// Storage: `Skipped::Metadata` (r:0 w:0)
@@ -130,13 +129,13 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 	/// The range of component `p` is `[0, 1000]`.
 	fn kill_prefix(p: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `79 + p * (69 ±0)`
-		//  Estimated: `83 + p * (70 ±0)`
-		// Minimum execution time: 2_914_000 picoseconds.
-		Weight::from_parts(2_975_000, 0)
-			.saturating_add(Weight::from_parts(0, 83))
-			// Standard Error: 1_090
-			.saturating_add(Weight::from_parts(964_500, 0).saturating_mul(p.into()))
+		//  Measured:  `75 + p * (69 ±0)`
+		//  Estimated: `79 + p * (70 ±0)`
+		// Minimum execution time: 3_544_000 picoseconds.
+		Weight::from_parts(3_596_000, 0)
+			.saturating_add(Weight::from_parts(0, 79))
+			// Standard Error: 2_170
+			.saturating_add(Weight::from_parts(1_193_351, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
 			.saturating_add(Weight::from_parts(0, 70).saturating_mul(p.into()))
@@ -147,8 +146,8 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 6_189_000 picoseconds.
-		Weight::from_parts(7_120_000, 0)
+		// Minimum execution time: 15_463_000 picoseconds.
+		Weight::from_parts(18_019_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -162,8 +161,8 @@ impl<T: frame_system::Config> frame_system::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `22`
 		//  Estimated: `1518`
-		// Minimum execution time: 72_933_868_000 picoseconds.
-		Weight::from_parts(76_486_675_000, 0)
+		// Minimum execution time: 101_681_977_000 picoseconds.
+		Weight::from_parts(103_790_208_000, 0)
 			.saturating_add(Weight::from_parts(0, 1518))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
diff --git a/relay/paseo/src/weights/mod.rs b/relay/paseo/src/weights/mod.rs
index cbe46a9..2b5daff 100644
--- a/relay/paseo/src/weights/mod.rs
+++ b/relay/paseo/src/weights/mod.rs
@@ -36,7 +36,6 @@ pub mod pallet_referenda;
 pub mod pallet_scheduler;
 pub mod pallet_session;
 pub mod pallet_staking;
-pub mod pallet_sudo;
 pub mod pallet_timestamp;
 pub mod pallet_treasury;
 pub mod pallet_utility;
diff --git a/relay/paseo/src/weights/pallet_asset_rate.rs b/relay/paseo/src/weights/pallet_asset_rate.rs
index f2e22ad..b3650ca 100644
--- a/relay/paseo/src/weights/pallet_asset_rate.rs
+++ b/relay/paseo/src/weights/pallet_asset_rate.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_asset_rate`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_asset_rate
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> pallet_asset_rate::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `42`
 		//  Estimated: `4703`
-		// Minimum execution time: 7_852_000 picoseconds.
-		Weight::from_parts(8_312_000, 0)
+		// Minimum execution time: 9_802_000 picoseconds.
+		Weight::from_parts(10_390_000, 0)
 			.saturating_add(Weight::from_parts(0, 4703))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -65,8 +64,8 @@ impl<T: frame_system::Config> pallet_asset_rate::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `110`
 		//  Estimated: `4703`
-		// Minimum execution time: 8_363_000 picoseconds.
-		Weight::from_parts(8_723_000, 0)
+		// Minimum execution time: 10_351_000 picoseconds.
+		Weight::from_parts(10_777_000, 0)
 			.saturating_add(Weight::from_parts(0, 4703))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -77,8 +76,8 @@ impl<T: frame_system::Config> pallet_asset_rate::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `110`
 		//  Estimated: `4703`
-		// Minimum execution time: 9_104_000 picoseconds.
-		Weight::from_parts(9_434_000, 0)
+		// Minimum execution time: 10_916_000 picoseconds.
+		Weight::from_parts(11_401_000, 0)
 			.saturating_add(Weight::from_parts(0, 4703))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_bags_list.rs b/relay/paseo/src/weights/pallet_bags_list.rs
index 168576e..e299408 100644
--- a/relay/paseo/src/weights/pallet_bags_list.rs
+++ b/relay/paseo/src/weights/pallet_bags_list.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_bags_list`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_bags_list
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,10 +56,10 @@ impl<T: frame_system::Config> pallet_bags_list::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
 	fn rebag_non_terminal() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1719`
+		//  Measured:  `1685`
 		//  Estimated: `11506`
-		// Minimum execution time: 48_363_000 picoseconds.
-		Weight::from_parts(49_494_000, 0)
+		// Minimum execution time: 52_358_000 picoseconds.
+		Weight::from_parts(53_801_000, 0)
 			.saturating_add(Weight::from_parts(0, 11506))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -75,10 +74,10 @@ impl<T: frame_system::Config> pallet_bags_list::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
 	fn rebag_terminal() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1616`
+		//  Measured:  `1582`
 		//  Estimated: `8877`
-		// Minimum execution time: 47_222_000 picoseconds.
-		Weight::from_parts(48_963_000, 0)
+		// Minimum execution time: 51_216_000 picoseconds.
+		Weight::from_parts(53_303_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -95,10 +94,10 @@ impl<T: frame_system::Config> pallet_bags_list::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
 	fn put_in_front_of() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1924`
+		//  Measured:  `1890`
 		//  Estimated: `11506`
-		// Minimum execution time: 57_377_000 picoseconds.
-		Weight::from_parts(59_710_000, 0)
+		// Minimum execution time: 59_280_000 picoseconds.
+		Weight::from_parts(61_413_000, 0)
 			.saturating_add(Weight::from_parts(0, 11506))
 			.saturating_add(T::DbWeight::get().reads(10))
 			.saturating_add(T::DbWeight::get().writes(6))
diff --git a/relay/paseo/src/weights/pallet_balances.rs b/relay/paseo/src/weights/pallet_balances.rs
index a8c1600..171543e 100644
--- a/relay/paseo/src/weights/pallet_balances.rs
+++ b/relay/paseo/src/weights/pallet_balances.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_balances`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_balances
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `3593`
-		// Minimum execution time: 39_589_000 picoseconds.
-		Weight::from_parts(41_272_000, 0)
+		// Minimum execution time: 44_926_000 picoseconds.
+		Weight::from_parts(45_581_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -65,8 +64,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `3593`
-		// Minimum execution time: 31_387_000 picoseconds.
-		Weight::from_parts(32_699_000, 0)
+		// Minimum execution time: 35_183_000 picoseconds.
+		Weight::from_parts(35_660_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -77,8 +76,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `174`
 		//  Estimated: `3593`
-		// Minimum execution time: 10_636_000 picoseconds.
-		Weight::from_parts(11_197_000, 0)
+		// Minimum execution time: 12_773_000 picoseconds.
+		Weight::from_parts(13_126_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -89,8 +88,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `174`
 		//  Estimated: `3593`
-		// Minimum execution time: 14_652_000 picoseconds.
-		Weight::from_parts(15_444_000, 0)
+		// Minimum execution time: 17_765_000 picoseconds.
+		Weight::from_parts(18_476_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -101,8 +100,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `103`
 		//  Estimated: `6196`
-		// Minimum execution time: 41_622_000 picoseconds.
-		Weight::from_parts(42_525_000, 0)
+		// Minimum execution time: 46_041_000 picoseconds.
+		Weight::from_parts(47_227_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -113,8 +112,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `3593`
-		// Minimum execution time: 40_040_000 picoseconds.
-		Weight::from_parts(41_682_000, 0)
+		// Minimum execution time: 44_310_000 picoseconds.
+		Weight::from_parts(45_019_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -125,8 +124,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `174`
 		//  Estimated: `3593`
-		// Minimum execution time: 13_340_000 picoseconds.
-		Weight::from_parts(13_891_000, 0)
+		// Minimum execution time: 15_663_000 picoseconds.
+		Weight::from_parts(16_204_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -138,11 +137,11 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0 + u * (135 ±0)`
 		//  Estimated: `990 + u * (2603 ±0)`
-		// Minimum execution time: 12_769_000 picoseconds.
-		Weight::from_parts(13_080_000, 0)
+		// Minimum execution time: 14_732_000 picoseconds.
+		Weight::from_parts(14_936_000, 0)
 			.saturating_add(Weight::from_parts(0, 990))
-			// Standard Error: 10_655
-			.saturating_add(Weight::from_parts(12_819_105, 0).saturating_mul(u.into()))
+			// Standard Error: 16_515
+			.saturating_add(Weight::from_parts(14_101_228, 0).saturating_mul(u.into()))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(u.into())))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(u.into())))
 			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(u.into()))
@@ -151,8 +150,8 @@ impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_995_000 picoseconds.
-		Weight::from_parts(4_167_000, 0)
+		// Minimum execution time: 5_284_000 picoseconds.
+		Weight::from_parts(5_571_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 }
diff --git a/relay/paseo/src/weights/pallet_bounties.rs b/relay/paseo/src/weights/pallet_bounties.rs
index bf5d39a..8cea91b 100644
--- a/relay/paseo/src/weights/pallet_bounties.rs
+++ b/relay/paseo/src/weights/pallet_bounties.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_bounties`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_bounties
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -60,11 +59,11 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `177`
 		//  Estimated: `3593`
-		// Minimum execution time: 19_800_000 picoseconds.
-		Weight::from_parts(20_647_967, 0)
+		// Minimum execution time: 21_824_000 picoseconds.
+		Weight::from_parts(23_437_825, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
-			// Standard Error: 5
-			.saturating_add(Weight::from_parts(499, 0).saturating_mul(d.into()))
+			// Standard Error: 8
+			.saturating_add(Weight::from_parts(637, 0).saturating_mul(d.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
@@ -76,8 +75,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `269`
 		//  Estimated: `3642`
-		// Minimum execution time: 8_804_000 picoseconds.
-		Weight::from_parts(9_144_000, 0)
+		// Minimum execution time: 11_204_000 picoseconds.
+		Weight::from_parts(11_734_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -88,8 +87,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `289`
 		//  Estimated: `3642`
-		// Minimum execution time: 8_532_000 picoseconds.
-		Weight::from_parts(9_034_000, 0)
+		// Minimum execution time: 10_795_000 picoseconds.
+		Weight::from_parts(11_210_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -102,8 +101,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `465`
 		//  Estimated: `3642`
-		// Minimum execution time: 29_644_000 picoseconds.
-		Weight::from_parts(30_495_000, 0)
+		// Minimum execution time: 34_043_000 picoseconds.
+		Weight::from_parts(34_947_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -116,8 +115,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `461`
 		//  Estimated: `3642`
-		// Minimum execution time: 21_633_000 picoseconds.
-		Weight::from_parts(22_485_000, 0)
+		// Minimum execution time: 24_470_000 picoseconds.
+		Weight::from_parts(24_875_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -130,8 +129,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `368`
 		//  Estimated: `3642`
-		// Minimum execution time: 11_137_000 picoseconds.
-		Weight::from_parts(11_827_000, 0)
+		// Minimum execution time: 13_964_000 picoseconds.
+		Weight::from_parts(14_434_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -148,8 +147,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `732`
 		//  Estimated: `8799`
-		// Minimum execution time: 94_884_000 picoseconds.
-		Weight::from_parts(96_376_000, 0)
+		// Minimum execution time: 99_910_000 picoseconds.
+		Weight::from_parts(101_642_000, 0)
 			.saturating_add(Weight::from_parts(0, 8799))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -166,8 +165,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `412`
 		//  Estimated: `3642`
-		// Minimum execution time: 32_058_000 picoseconds.
-		Weight::from_parts(33_011_000, 0)
+		// Minimum execution time: 35_756_000 picoseconds.
+		Weight::from_parts(37_193_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -184,8 +183,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `648`
 		//  Estimated: `6196`
-		// Minimum execution time: 62_034_000 picoseconds.
-		Weight::from_parts(63_596_000, 0)
+		// Minimum execution time: 67_273_000 picoseconds.
+		Weight::from_parts(69_165_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -196,8 +195,8 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `325`
 		//  Estimated: `3642`
-		// Minimum execution time: 8_864_000 picoseconds.
-		Weight::from_parts(9_274_000, 0)
+		// Minimum execution time: 11_562_000 picoseconds.
+		Weight::from_parts(12_821_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -213,11 +212,11 @@ impl<T: frame_system::Config> pallet_bounties::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0 + b * (297 ±0)`
 		//  Estimated: `1887 + b * (5206 ±0)`
-		// Minimum execution time: 2_384_000 picoseconds.
-		Weight::from_parts(2_484_000, 0)
+		// Minimum execution time: 2_835_000 picoseconds.
+		Weight::from_parts(2_915_000, 0)
 			.saturating_add(Weight::from_parts(0, 1887))
-			// Standard Error: 10_193
-			.saturating_add(Weight::from_parts(29_860_090, 0).saturating_mul(b.into()))
+			// Standard Error: 18_278
+			.saturating_add(Weight::from_parts(32_861_747, 0).saturating_mul(b.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(b.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_child_bounties.rs b/relay/paseo/src/weights/pallet_child_bounties.rs
index 2dfba16..31610a4 100644
--- a/relay/paseo/src/weights/pallet_child_bounties.rs
+++ b/relay/paseo/src/weights/pallet_child_bounties.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_child_bounties`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_child_bounties
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -64,11 +63,11 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `508`
 		//  Estimated: `6196`
-		// Minimum execution time: 52_789_000 picoseconds.
-		Weight::from_parts(55_106_605, 0)
+		// Minimum execution time: 59_225_000 picoseconds.
+		Weight::from_parts(60_300_197, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
-			// Standard Error: 8
-			.saturating_add(Weight::from_parts(508, 0).saturating_mul(d.into()))
+			// Standard Error: 47
+			.saturating_add(Weight::from_parts(793, 0).saturating_mul(d.into()))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
@@ -82,8 +81,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `562`
 		//  Estimated: `3642`
-		// Minimum execution time: 15_343_000 picoseconds.
-		Weight::from_parts(16_215_000, 0)
+		// Minimum execution time: 17_752_000 picoseconds.
+		Weight::from_parts(18_591_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -98,8 +97,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `708`
 		//  Estimated: `3642`
-		// Minimum execution time: 26_601_000 picoseconds.
-		Weight::from_parts(27_511_000, 0)
+		// Minimum execution time: 29_052_000 picoseconds.
+		Weight::from_parts(30_077_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -114,8 +113,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `708`
 		//  Estimated: `3642`
-		// Minimum execution time: 35_043_000 picoseconds.
-		Weight::from_parts(36_244_000, 0)
+		// Minimum execution time: 40_527_000 picoseconds.
+		Weight::from_parts(41_204_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -128,8 +127,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `605`
 		//  Estimated: `3642`
-		// Minimum execution time: 15_984_000 picoseconds.
-		Weight::from_parts(16_635_000, 0)
+		// Minimum execution time: 19_283_000 picoseconds.
+		Weight::from_parts(19_797_000, 0)
 			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -146,8 +145,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `577`
 		//  Estimated: `8799`
-		// Minimum execution time: 94_151_000 picoseconds.
-		Weight::from_parts(96_106_000, 0)
+		// Minimum execution time: 100_048_000 picoseconds.
+		Weight::from_parts(101_976_000, 0)
 			.saturating_add(Weight::from_parts(0, 8799))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -168,8 +167,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `808`
 		//  Estimated: `6196`
-		// Minimum execution time: 60_451_000 picoseconds.
-		Weight::from_parts(61_813_000, 0)
+		// Minimum execution time: 65_320_000 picoseconds.
+		Weight::from_parts(66_554_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -190,8 +189,8 @@ impl<T: frame_system::Config> pallet_child_bounties::WeightInfo for WeightInfo<T
 		// Proof Size summary in bytes:
 		//  Measured:  `995`
 		//  Estimated: `8799`
-		// Minimum execution time: 73_832_000 picoseconds.
-		Weight::from_parts(75_134_000, 0)
+		// Minimum execution time: 80_207_000 picoseconds.
+		Weight::from_parts(81_635_000, 0)
 			.saturating_add(Weight::from_parts(0, 8799))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(7))
diff --git a/relay/paseo/src/weights/pallet_conviction_voting.rs b/relay/paseo/src/weights/pallet_conviction_voting.rs
index f2cc777..889b20d 100644
--- a/relay/paseo/src/weights/pallet_conviction_voting.rs
+++ b/relay/paseo/src/weights/pallet_conviction_voting.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_conviction_voting`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_conviction_voting
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -63,8 +62,8 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `13480`
 		//  Estimated: `42428`
-		// Minimum execution time: 100_932_000 picoseconds.
-		Weight::from_parts(106_502_000, 0)
+		// Minimum execution time: 136_288_000 picoseconds.
+		Weight::from_parts(147_883_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -85,8 +84,8 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `14201`
 		//  Estimated: `83866`
-		// Minimum execution time: 132_741_000 picoseconds.
-		Weight::from_parts(137_126_000, 0)
+		// Minimum execution time: 169_651_000 picoseconds.
+		Weight::from_parts(177_209_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -101,8 +100,8 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `13919`
 		//  Estimated: `83866`
-		// Minimum execution time: 106_090_000 picoseconds.
-		Weight::from_parts(112_530_000, 0)
+		// Minimum execution time: 139_988_000 picoseconds.
+		Weight::from_parts(152_950_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -115,8 +114,8 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `13005`
 		//  Estimated: `30706`
-		// Minimum execution time: 56_956_000 picoseconds.
-		Weight::from_parts(59_489_000, 0)
+		// Minimum execution time: 84_340_000 picoseconds.
+		Weight::from_parts(89_490_000, 0)
 			.saturating_add(Weight::from_parts(0, 30706))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -138,11 +137,11 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `28987 + r * (364 ±0)`
 		//  Estimated: `83866 + r * (3411 ±0)`
-		// Minimum execution time: 56_054_000 picoseconds.
-		Weight::from_parts(657_478_354, 0)
+		// Minimum execution time: 63_628_000 picoseconds.
+		Weight::from_parts(808_059_906, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
-			// Standard Error: 49_533
-			.saturating_add(Weight::from_parts(19_037_440, 0).saturating_mul(r.into()))
+			// Standard Error: 79_356
+			.saturating_add(Weight::from_parts(20_224_140, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -160,11 +159,11 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `28868 + r * (364 ±0)`
 		//  Estimated: `83866 + r * (3411 ±0)`
-		// Minimum execution time: 29_795_000 picoseconds.
-		Weight::from_parts(625_394_852, 0)
+		// Minimum execution time: 38_682_000 picoseconds.
+		Weight::from_parts(727_546_385, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
-			// Standard Error: 49_169
-			.saturating_add(Weight::from_parts(19_086_034, 0).saturating_mul(r.into()))
+			// Standard Error: 54_985
+			.saturating_add(Weight::from_parts(20_577_723, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -183,8 +182,8 @@ impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `12270`
 		//  Estimated: `30706`
-		// Minimum execution time: 76_546_000 picoseconds.
-		Weight::from_parts(80_771_000, 0)
+		// Minimum execution time: 98_219_000 picoseconds.
+		Weight::from_parts(106_083_000, 0)
 			.saturating_add(Weight::from_parts(0, 30706))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
diff --git a/relay/paseo/src/weights/pallet_election_provider_multi_phase.rs b/relay/paseo/src/weights/pallet_election_provider_multi_phase.rs
index 77f682d..5d33cd7 100644
--- a/relay/paseo/src/weights/pallet_election_provider_multi_phase.rs
+++ b/relay/paseo/src/weights/pallet_election_provider_multi_phase.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_election_provider_multi_phase`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_election_provider_multi_phase
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -65,10 +64,10 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 	/// Proof: `ElectionProviderMultiPhase::CurrentPhase` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
 	fn on_initialize_nothing() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `851`
+		//  Measured:  `817`
 		//  Estimated: `3481`
-		// Minimum execution time: 15_814_000 picoseconds.
-		Weight::from_parts(16_436_000, 0)
+		// Minimum execution time: 16_763_000 picoseconds.
+		Weight::from_parts(17_337_000, 0)
 			.saturating_add(Weight::from_parts(0, 3481))
 			.saturating_add(T::DbWeight::get().reads(8))
 	}
@@ -80,8 +79,8 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `43`
 		//  Estimated: `1528`
-		// Minimum execution time: 5_929_000 picoseconds.
-		Weight::from_parts(6_429_000, 0)
+		// Minimum execution time: 7_570_000 picoseconds.
+		Weight::from_parts(7_758_000, 0)
 			.saturating_add(Weight::from_parts(0, 1528))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -94,8 +93,8 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `43`
 		//  Estimated: `1528`
-		// Minimum execution time: 6_710_000 picoseconds.
-		Weight::from_parts(7_041_000, 0)
+		// Minimum execution time: 8_429_000 picoseconds.
+		Weight::from_parts(8_648_000, 0)
 			.saturating_add(Weight::from_parts(0, 1528))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -108,8 +107,8 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `174`
 		//  Estimated: `3593`
-		// Minimum execution time: 21_043_000 picoseconds.
-		Weight::from_parts(21_703_000, 0)
+		// Minimum execution time: 23_333_000 picoseconds.
+		Weight::from_parts(23_845_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -120,8 +119,8 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `174`
 		//  Estimated: `3593`
-		// Minimum execution time: 14_021_000 picoseconds.
-		Weight::from_parts(14_461_000, 0)
+		// Minimum execution time: 15_680_000 picoseconds.
+		Weight::from_parts(16_021_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -138,11 +137,11 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 409_437_000 picoseconds.
-		Weight::from_parts(82_894_324, 0)
+		// Minimum execution time: 513_357_000 picoseconds.
+		Weight::from_parts(527_740_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 9_497
-			.saturating_add(Weight::from_parts(433_933, 0).saturating_mul(v.into()))
+			// Standard Error: 2_814
+			.saturating_add(Weight::from_parts(409_297, 0).saturating_mul(v.into()))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
 	/// Storage: `ElectionProviderMultiPhase::SignedSubmissionIndices` (r:1 w:1)
@@ -169,13 +168,11 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `266 + a * (768 ±0) + d * (48 ±0)`
 		//  Estimated: `3818 + a * (768 ±0) + d * (49 ±0)`
-		// Minimum execution time: 279_401_000 picoseconds.
-		Weight::from_parts(137_564_256, 0)
+		// Minimum execution time: 427_335_000 picoseconds.
+		Weight::from_parts(464_867_000, 0)
 			.saturating_add(Weight::from_parts(0, 3818))
-			// Standard Error: 6_219
-			.saturating_add(Weight::from_parts(165_669, 0).saturating_mul(a.into()))
-			// Standard Error: 9_322
-			.saturating_add(Weight::from_parts(279_383, 0).saturating_mul(d.into()))
+			// Standard Error: 6_771
+			.saturating_add(Weight::from_parts(334_470, 0).saturating_mul(a.into()))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(8))
 			.saturating_add(Weight::from_parts(0, 768).saturating_mul(a.into()))
@@ -199,8 +196,8 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `1196`
 		//  Estimated: `2681`
-		// Minimum execution time: 38_549_000 picoseconds.
-		Weight::from_parts(40_051_000, 0)
+		// Minimum execution time: 43_965_000 picoseconds.
+		Weight::from_parts(45_832_000, 0)
 			.saturating_add(Weight::from_parts(0, 2681))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -227,13 +224,13 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 		// Proof Size summary in bytes:
 		//  Measured:  `148 + t * (32 ±0) + v * (553 ±0)`
 		//  Estimated: `1633 + t * (32 ±0) + v * (553 ±0)`
-		// Minimum execution time: 4_937_574_000 picoseconds.
-		Weight::from_parts(5_019_797_000, 0)
+		// Minimum execution time: 6_164_134_000 picoseconds.
+		Weight::from_parts(6_299_983_000, 0)
 			.saturating_add(Weight::from_parts(0, 1633))
-			// Standard Error: 17_322
-			.saturating_add(Weight::from_parts(179_952, 0).saturating_mul(v.into()))
-			// Standard Error: 51_334
-			.saturating_add(Weight::from_parts(4_311_132, 0).saturating_mul(a.into()))
+			// Standard Error: 19_441
+			.saturating_add(Weight::from_parts(426_088, 0).saturating_mul(v.into()))
+			// Standard Error: 57_613
+			.saturating_add(Weight::from_parts(4_514_889, 0).saturating_mul(a.into()))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(1))
 			.saturating_add(Weight::from_parts(0, 32).saturating_mul(t.into()))
@@ -251,17 +248,19 @@ impl<T: frame_system::Config> pallet_election_provider_multi_phase::WeightInfo f
 	/// The range of component `t` is `[500, 1000]`.
 	/// The range of component `a` is `[500, 800]`.
 	/// The range of component `d` is `[200, 400]`.
-	fn feasibility_check(v: u32, t: u32, a: u32, _d: u32, ) -> Weight {
+	fn feasibility_check(v: u32, t: u32, a: u32, d: u32, ) -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `123 + t * (32 ±0) + v * (553 ±0)`
 		//  Estimated: `1608 + t * (32 ±0) + v * (553 ±0)`
-		// Minimum execution time: 4_117_908_000 picoseconds.
-		Weight::from_parts(4_187_972_000, 0)
+		// Minimum execution time: 5_201_496_000 picoseconds.
+		Weight::from_parts(344_942_234, 0)
 			.saturating_add(Weight::from_parts(0, 1608))
-			// Standard Error: 17_297
-			.saturating_add(Weight::from_parts(241_158, 0).saturating_mul(v.into()))
-			// Standard Error: 51_258
-			.saturating_add(Weight::from_parts(3_390_340, 0).saturating_mul(a.into()))
+			// Standard Error: 20_191
+			.saturating_add(Weight::from_parts(835_378, 0).saturating_mul(v.into()))
+			// Standard Error: 67_213
+			.saturating_add(Weight::from_parts(5_269_944, 0).saturating_mul(a.into()))
+			// Standard Error: 100_740
+			.saturating_add(Weight::from_parts(3_242_366, 0).saturating_mul(d.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(Weight::from_parts(0, 32).saturating_mul(t.into()))
 			.saturating_add(Weight::from_parts(0, 553).saturating_mul(v.into()))
diff --git a/relay/paseo/src/weights/pallet_fast_unstake.rs b/relay/paseo/src/weights/pallet_fast_unstake.rs
index 0f9d6f4..cf71ade 100644
--- a/relay/paseo/src/weights/pallet_fast_unstake.rs
+++ b/relay/paseo/src/weights/pallet_fast_unstake.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_fast_unstake`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_fast_unstake
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -80,13 +79,13 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// The range of component `b` is `[1, 16]`.
 	fn on_idle_unstake(b: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1207 + b * (463 ±0)`
-		//  Estimated: `2692 + b * (3774 ±0)`
-		// Minimum execution time: 74_963_000 picoseconds.
-		Weight::from_parts(22_692_568, 0)
-			.saturating_add(Weight::from_parts(0, 2692))
-			// Standard Error: 69_588
-			.saturating_add(Weight::from_parts(54_331_522, 0).saturating_mul(b.into()))
+		//  Measured:  `1173 + b * (463 ±0)`
+		//  Estimated: `2658 + b * (3774 ±0)`
+		// Minimum execution time: 84_802_000 picoseconds.
+		Weight::from_parts(29_217_078, 0)
+			.saturating_add(Weight::from_parts(0, 2658))
+			// Standard Error: 50_166
+			.saturating_add(Weight::from_parts(58_686_628, 0).saturating_mul(b.into()))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().reads((8_u64).saturating_mul(b.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -113,15 +112,15 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// The range of component `b` is `[1, 16]`.
 	fn on_idle_check(v: u32, b: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1542 + b * (70 ±0) + v * (19528 ±0)`
-		//  Estimated: `4875 + b * (72 ±0) + v * (22004 ±0)`
-		// Minimum execution time: 570_260_000 picoseconds.
-		Weight::from_parts(575_518_000, 0)
-			.saturating_add(Weight::from_parts(0, 4875))
-			// Standard Error: 4_531_415
-			.saturating_add(Weight::from_parts(151_194_026, 0).saturating_mul(v.into()))
-			// Standard Error: 72_715_609
-			.saturating_add(Weight::from_parts(2_276_785_475, 0).saturating_mul(b.into()))
+		//  Measured:  `1508 + b * (70 ±0) + v * (19528 ±0)`
+		//  Estimated: `4841 + b * (72 ±0) + v * (22004 ±0)`
+		// Minimum execution time: 666_865_000 picoseconds.
+		Weight::from_parts(672_180_000, 0)
+			.saturating_add(Weight::from_parts(0, 4841))
+			// Standard Error: 5_553_355
+			.saturating_add(Weight::from_parts(185_600_804, 0).saturating_mul(v.into()))
+			// Standard Error: 89_114_672
+			.saturating_add(Weight::from_parts(2_786_523_790, 0).saturating_mul(b.into()))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -132,12 +131,12 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// Proof: `FastUnstake::ErasToCheckPerBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Ledger` (r:1 w:1)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `FastUnstake::Queue` (r:1 w:1)
 	/// Proof: `FastUnstake::Queue` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
 	/// Storage: `FastUnstake::Head` (r:1 w:0)
 	/// Proof: `FastUnstake::Head` (`max_values`: Some(1), `max_size`: Some(886), added: 1381, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Validators` (r:1 w:0)
 	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:1 w:1)
@@ -160,10 +159,10 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// Proof: `FastUnstake::CounterForQueue` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn register_fast_unstake() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2069`
+		//  Measured:  `2035`
 		//  Estimated: `6248`
-		// Minimum execution time: 114_653_000 picoseconds.
-		Weight::from_parts(118_009_000, 0)
+		// Minimum execution time: 110_488_000 picoseconds.
+		Weight::from_parts(113_880_000, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
 			.saturating_add(T::DbWeight::get().reads(16))
 			.saturating_add(T::DbWeight::get().writes(10))
@@ -172,8 +171,6 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// Proof: `FastUnstake::ErasToCheckPerBlock` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `FastUnstake::Queue` (r:1 w:1)
 	/// Proof: `FastUnstake::Queue` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
 	/// Storage: `FastUnstake::Head` (r:1 w:0)
@@ -182,12 +179,12 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 	/// Proof: `FastUnstake::CounterForQueue` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn deregister() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1280`
+		//  Measured:  `1113`
 		//  Estimated: `4556`
-		// Minimum execution time: 36_995_000 picoseconds.
-		Weight::from_parts(38_398_000, 0)
+		// Minimum execution time: 35_859_000 picoseconds.
+		Weight::from_parts(36_714_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
-			.saturating_add(T::DbWeight::get().reads(6))
+			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
 	/// Storage: `FastUnstake::ErasToCheckPerBlock` (r:0 w:1)
@@ -196,8 +193,8 @@ impl<T: frame_system::Config> pallet_fast_unstake::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_312_000 picoseconds.
-		Weight::from_parts(1_432_000, 0)
+		// Minimum execution time: 1_673_000 picoseconds.
+		Weight::from_parts(1_836_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
diff --git a/relay/paseo/src/weights/pallet_identity.rs b/relay/paseo/src/weights/pallet_identity.rs
index 6d0c840..e49c87b 100644
--- a/relay/paseo/src/weights/pallet_identity.rs
+++ b/relay/paseo/src/weights/pallet_identity.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_identity`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_identity
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -54,11 +53,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `32 + r * (57 ±0)`
 		//  Estimated: `2626`
-		// Minimum execution time: 5_669_000 picoseconds.
-		Weight::from_parts(6_277_312, 0)
+		// Minimum execution time: 7_476_000 picoseconds.
+		Weight::from_parts(8_068_602, 0)
 			.saturating_add(Weight::from_parts(0, 2626))
-			// Standard Error: 1_143
-			.saturating_add(Weight::from_parts(63_710, 0).saturating_mul(r.into()))
+			// Standard Error: 1_238
+			.saturating_add(Weight::from_parts(82_244, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -69,11 +68,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `6978 + r * (5 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 110_817_000 picoseconds.
-		Weight::from_parts(114_276_708, 0)
+		// Minimum execution time: 104_591_000 picoseconds.
+		Weight::from_parts(107_199_522, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 9_880
-			.saturating_add(Weight::from_parts(151_789, 0).saturating_mul(r.into()))
+			// Standard Error: 6_435
+			.saturating_add(Weight::from_parts(148_902, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -88,11 +87,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `101`
 		//  Estimated: `11037 + s * (2589 ±0)`
-		// Minimum execution time: 6_731_000 picoseconds.
-		Weight::from_parts(17_653_148, 0)
+		// Minimum execution time: 8_067_000 picoseconds.
+		Weight::from_parts(18_616_651, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 4_839
-			.saturating_add(Weight::from_parts(3_277_591, 0).saturating_mul(s.into()))
+			// Standard Error: 3_834
+			.saturating_add(Weight::from_parts(3_075_321, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -110,11 +109,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `194 + p * (32 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 6_940_000 picoseconds.
-		Weight::from_parts(17_514_257, 0)
+		// Minimum execution time: 7_931_000 picoseconds.
+		Weight::from_parts(19_401_564, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 3_680
-			.saturating_add(Weight::from_parts(1_358_031, 0).saturating_mul(p.into()))
+			// Standard Error: 2_980
+			.saturating_add(Weight::from_parts(1_292_066, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
@@ -131,13 +130,13 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `7070 + r * (5 ±0) + s * (32 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 48_893_000 picoseconds.
-		Weight::from_parts(47_254_189, 0)
+		// Minimum execution time: 50_902_000 picoseconds.
+		Weight::from_parts(51_250_065, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 12_827
-			.saturating_add(Weight::from_parts(238_918, 0).saturating_mul(r.into()))
-			// Standard Error: 2_502
-			.saturating_add(Weight::from_parts(1_346_917, 0).saturating_mul(s.into()))
+			// Standard Error: 12_441
+			.saturating_add(Weight::from_parts(174_014, 0).saturating_mul(r.into()))
+			// Standard Error: 2_427
+			.saturating_add(Weight::from_parts(1_298_613, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
@@ -151,11 +150,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `6968 + r * (57 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 75_654_000 picoseconds.
-		Weight::from_parts(79_134_330, 0)
+		// Minimum execution time: 71_685_000 picoseconds.
+		Weight::from_parts(73_296_911, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 8_479
-			.saturating_add(Weight::from_parts(61_908, 0).saturating_mul(r.into()))
+			// Standard Error: 4_701
+			.saturating_add(Weight::from_parts(152_413, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -166,11 +165,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `6999`
 		//  Estimated: `11037`
-		// Minimum execution time: 71_088_000 picoseconds.
-		Weight::from_parts(73_740_463, 0)
+		// Minimum execution time: 69_785_000 picoseconds.
+		Weight::from_parts(71_089_142, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 6_848
-			.saturating_add(Weight::from_parts(47_964, 0).saturating_mul(r.into()))
+			// Standard Error: 3_819
+			.saturating_add(Weight::from_parts(101_852, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -181,11 +180,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + r * (57 ±0)`
 		//  Estimated: `2626`
-		// Minimum execution time: 4_227_000 picoseconds.
-		Weight::from_parts(4_608_098, 0)
+		// Minimum execution time: 5_213_000 picoseconds.
+		Weight::from_parts(5_581_162, 0)
 			.saturating_add(Weight::from_parts(0, 2626))
-			// Standard Error: 875
-			.saturating_add(Weight::from_parts(47_447, 0).saturating_mul(r.into()))
+			// Standard Error: 981
+			.saturating_add(Weight::from_parts(78_901, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -196,11 +195,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + r * (57 ±0)`
 		//  Estimated: `2626`
-		// Minimum execution time: 4_226_000 picoseconds.
-		Weight::from_parts(4_660_991, 0)
+		// Minimum execution time: 5_337_000 picoseconds.
+		Weight::from_parts(5_799_042, 0)
 			.saturating_add(Weight::from_parts(0, 2626))
-			// Standard Error: 899
-			.saturating_add(Weight::from_parts(48_671, 0).saturating_mul(r.into()))
+			// Standard Error: 939
+			.saturating_add(Weight::from_parts(70_694, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -211,11 +210,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + r * (57 ±0)`
 		//  Estimated: `2626`
-		// Minimum execution time: 4_297_000 picoseconds.
-		Weight::from_parts(4_678_753, 0)
+		// Minimum execution time: 5_357_000 picoseconds.
+		Weight::from_parts(5_658_168, 0)
 			.saturating_add(Weight::from_parts(0, 2626))
-			// Standard Error: 889
-			.saturating_add(Weight::from_parts(43_666, 0).saturating_mul(r.into()))
+			// Standard Error: 948
+			.saturating_add(Weight::from_parts(72_410, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -228,11 +227,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `7046 + r * (57 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 95_344_000 picoseconds.
-		Weight::from_parts(98_282_011, 0)
+		// Minimum execution time: 92_729_000 picoseconds.
+		Weight::from_parts(94_462_797, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 9_113
-			.saturating_add(Weight::from_parts(166_457, 0).saturating_mul(r.into()))
+			// Standard Error: 5_319
+			.saturating_add(Weight::from_parts(107_982, 0).saturating_mul(r.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -250,13 +249,13 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `7277 + r * (5 ±0) + s * (32 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 60_131_000 picoseconds.
-		Weight::from_parts(63_168_976, 0)
+		// Minimum execution time: 64_407_000 picoseconds.
+		Weight::from_parts(67_522_869, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 15_384
-			.saturating_add(Weight::from_parts(176_111, 0).saturating_mul(r.into()))
-			// Standard Error: 3_001
-			.saturating_add(Weight::from_parts(1_353_836, 0).saturating_mul(s.into()))
+			// Standard Error: 15_370
+			.saturating_add(Weight::from_parts(160_891, 0).saturating_mul(r.into()))
+			// Standard Error: 2_999
+			.saturating_add(Weight::from_parts(1_313_042, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
@@ -272,11 +271,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `475 + s * (36 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 21_773_000 picoseconds.
-		Weight::from_parts(25_403_120, 0)
+		// Minimum execution time: 23_539_000 picoseconds.
+		Weight::from_parts(27_045_777, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 2_461
-			.saturating_add(Weight::from_parts(99_830, 0).saturating_mul(s.into()))
+			// Standard Error: 1_594
+			.saturating_add(Weight::from_parts(128_065, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -289,11 +288,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `591 + s * (3 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 9_596_000 picoseconds.
-		Weight::from_parts(13_108_451, 0)
+		// Minimum execution time: 11_418_000 picoseconds.
+		Weight::from_parts(14_873_630, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 856
-			.saturating_add(Weight::from_parts(29_709, 0).saturating_mul(s.into()))
+			// Standard Error: 914
+			.saturating_add(Weight::from_parts(42_574, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -308,11 +307,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `638 + s * (35 ±0)`
 		//  Estimated: `11037`
-		// Minimum execution time: 26_249_000 picoseconds.
-		Weight::from_parts(28_619_370, 0)
+		// Minimum execution time: 29_362_000 picoseconds.
+		Weight::from_parts(31_448_090, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
-			// Standard Error: 801
-			.saturating_add(Weight::from_parts(56_608, 0).saturating_mul(s.into()))
+			// Standard Error: 811
+			.saturating_add(Weight::from_parts(88_172, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -327,11 +326,11 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `704 + s * (37 ±0)`
 		//  Estimated: `6723`
-		// Minimum execution time: 18_798_000 picoseconds.
-		Weight::from_parts(20_940_340, 0)
+		// Minimum execution time: 22_979_000 picoseconds.
+		Weight::from_parts(24_439_448, 0)
 			.saturating_add(Weight::from_parts(0, 6723))
-			// Standard Error: 836
-			.saturating_add(Weight::from_parts(55_850, 0).saturating_mul(s.into()))
+			// Standard Error: 571
+			.saturating_add(Weight::from_parts(82_739, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -341,8 +340,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 4_388_000 picoseconds.
-		Weight::from_parts(4_557_000, 0)
+		// Minimum execution time: 6_105_000 picoseconds.
+		Weight::from_parts(6_441_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -352,8 +351,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `80`
 		//  Estimated: `3517`
-		// Minimum execution time: 6_459_000 picoseconds.
-		Weight::from_parts(6_921_000, 0)
+		// Minimum execution time: 8_719_000 picoseconds.
+		Weight::from_parts(9_041_000, 0)
 			.saturating_add(Weight::from_parts(0, 3517))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -370,8 +369,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `80`
 		//  Estimated: `11037`
-		// Minimum execution time: 59_178_000 picoseconds.
-		Weight::from_parts(60_791_000, 0)
+		// Minimum execution time: 65_333_000 picoseconds.
+		Weight::from_parts(67_018_000, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -386,8 +385,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `115`
 		//  Estimated: `11037`
-		// Minimum execution time: 15_674_000 picoseconds.
-		Weight::from_parts(16_475_000, 0)
+		// Minimum execution time: 19_237_000 picoseconds.
+		Weight::from_parts(19_746_000, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -398,8 +397,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `115`
 		//  Estimated: `3550`
-		// Minimum execution time: 25_308_000 picoseconds.
-		Weight::from_parts(26_870_000, 0)
+		// Minimum execution time: 16_277_000 picoseconds.
+		Weight::from_parts(20_932_000, 0)
 			.saturating_add(Weight::from_parts(0, 3550))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -412,8 +411,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `257`
 		//  Estimated: `11037`
-		// Minimum execution time: 12_558_000 picoseconds.
-		Weight::from_parts(13_030_000, 0)
+		// Minimum execution time: 15_000_000 picoseconds.
+		Weight::from_parts(15_349_000, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -426,8 +425,8 @@ impl<T: frame_system::Config> pallet_identity::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `98`
 		//  Estimated: `11037`
-		// Minimum execution time: 8_072_000 picoseconds.
-		Weight::from_parts(8_433_000, 0)
+		// Minimum execution time: 10_637_000 picoseconds.
+		Weight::from_parts(10_971_000, 0)
 			.saturating_add(Weight::from_parts(0, 11037))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_indices.rs b/relay/paseo/src/weights/pallet_indices.rs
index 0dc35f2..9743641 100644
--- a/relay/paseo/src/weights/pallet_indices.rs
+++ b/relay/paseo/src/weights/pallet_indices.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_indices`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_indices
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> pallet_indices::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `4`
 		//  Estimated: `3534`
-		// Minimum execution time: 17_216_000 picoseconds.
-		Weight::from_parts(17_798_000, 0)
+		// Minimum execution time: 18_321_000 picoseconds.
+		Weight::from_parts(18_937_000, 0)
 			.saturating_add(Weight::from_parts(0, 3534))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -67,8 +66,8 @@ impl<T: frame_system::Config> pallet_indices::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `203`
 		//  Estimated: `3593`
-		// Minimum execution time: 26_900_000 picoseconds.
-		Weight::from_parts(27_711_000, 0)
+		// Minimum execution time: 28_564_000 picoseconds.
+		Weight::from_parts(29_320_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -79,8 +78,8 @@ impl<T: frame_system::Config> pallet_indices::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `100`
 		//  Estimated: `3534`
-		// Minimum execution time: 16_565_000 picoseconds.
-		Weight::from_parts(17_347_000, 0)
+		// Minimum execution time: 19_731_000 picoseconds.
+		Weight::from_parts(20_124_000, 0)
 			.saturating_add(Weight::from_parts(0, 3534))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -93,8 +92,8 @@ impl<T: frame_system::Config> pallet_indices::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `203`
 		//  Estimated: `3593`
-		// Minimum execution time: 18_468_000 picoseconds.
-		Weight::from_parts(19_009_000, 0)
+		// Minimum execution time: 21_213_000 picoseconds.
+		Weight::from_parts(21_651_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -105,8 +104,8 @@ impl<T: frame_system::Config> pallet_indices::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `100`
 		//  Estimated: `3534`
-		// Minimum execution time: 17_797_000 picoseconds.
-		Weight::from_parts(18_518_000, 0)
+		// Minimum execution time: 20_386_000 picoseconds.
+		Weight::from_parts(20_760_000, 0)
 			.saturating_add(Weight::from_parts(0, 3534))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_message_queue.rs b/relay/paseo/src/weights/pallet_message_queue.rs
index cc4ee7c..1a741fe 100644
--- a/relay/paseo/src/weights/pallet_message_queue.rs
+++ b/relay/paseo/src/weights/pallet_message_queue.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_message_queue`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_message_queue
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -55,8 +54,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `281`
 		//  Estimated: `6050`
-		// Minimum execution time: 12_048_000 picoseconds.
-		Weight::from_parts(12_530_000, 0)
+		// Minimum execution time: 12_827_000 picoseconds.
+		Weight::from_parts(13_569_000, 0)
 			.saturating_add(Weight::from_parts(0, 6050))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -69,8 +68,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `281`
 		//  Estimated: `6050`
-		// Minimum execution time: 10_247_000 picoseconds.
-		Weight::from_parts(10_827_000, 0)
+		// Minimum execution time: 11_740_000 picoseconds.
+		Weight::from_parts(12_189_000, 0)
 			.saturating_add(Weight::from_parts(0, 6050))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -81,8 +80,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `42`
 		//  Estimated: `3520`
-		// Minimum execution time: 3_546_000 picoseconds.
-		Weight::from_parts(3_856_000, 0)
+		// Minimum execution time: 3_823_000 picoseconds.
+		Weight::from_parts(3_954_000, 0)
 			.saturating_add(Weight::from_parts(0, 3520))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -93,8 +92,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `115`
 		//  Estimated: `69051`
-		// Minimum execution time: 5_268_000 picoseconds.
-		Weight::from_parts(5_638_000, 0)
+		// Minimum execution time: 5_543_000 picoseconds.
+		Weight::from_parts(5_717_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -105,8 +104,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `115`
 		//  Estimated: `69051`
-		// Minimum execution time: 5_358_000 picoseconds.
-		Weight::from_parts(5_598_000, 0)
+		// Minimum execution time: 5_692_000 picoseconds.
+		Weight::from_parts(5_860_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -119,8 +118,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 162_845_000 picoseconds.
-		Weight::from_parts(166_751_000, 0)
+		// Minimum execution time: 166_812_000 picoseconds.
+		Weight::from_parts(169_584_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -132,8 +131,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `220`
 		//  Estimated: `3520`
-		// Minimum execution time: 5_718_000 picoseconds.
-		Weight::from_parts(5_929_000, 0)
+		// Minimum execution time: 6_333_000 picoseconds.
+		Weight::from_parts(6_626_000, 0)
 			.saturating_add(Weight::from_parts(0, 3520))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -150,8 +149,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `65714`
 		//  Estimated: `69051`
-		// Minimum execution time: 41_693_000 picoseconds.
-		Weight::from_parts(42_724_000, 0)
+		// Minimum execution time: 56_300_000 picoseconds.
+		Weight::from_parts(57_300_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -168,8 +167,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `65714`
 		//  Estimated: `69051`
-		// Minimum execution time: 58_928_000 picoseconds.
-		Weight::from_parts(60_491_000, 0)
+		// Minimum execution time: 70_510_000 picoseconds.
+		Weight::from_parts(72_758_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -186,8 +185,8 @@ impl<T: frame_system::Config> pallet_message_queue::WeightInfo for WeightInfo<T>
 		// Proof Size summary in bytes:
 		//  Measured:  `65714`
 		//  Estimated: `69051`
-		// Minimum execution time: 103_266_000 picoseconds.
-		Weight::from_parts(105_899_000, 0)
+		// Minimum execution time: 109_583_000 picoseconds.
+		Weight::from_parts(111_611_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(4))
diff --git a/relay/paseo/src/weights/pallet_multisig.rs b/relay/paseo/src/weights/pallet_multisig.rs
index 9106583..e2549c3 100644
--- a/relay/paseo/src/weights/pallet_multisig.rs
+++ b/relay/paseo/src/weights/pallet_multisig.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_multisig`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_multisig
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -52,11 +51,11 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 9_104_000 picoseconds.
-		Weight::from_parts(9_744_763, 0)
+		// Minimum execution time: 11_895_000 picoseconds.
+		Weight::from_parts(12_946_335, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(385, 0).saturating_mul(z.into()))
+			// Standard Error: 4
+			.saturating_add(Weight::from_parts(512, 0).saturating_mul(z.into()))
 	}
 	/// Storage: `Multisig::Multisigs` (r:1 w:1)
 	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
@@ -66,13 +65,13 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `267 + s * (2 ±0)`
 		//  Estimated: `6811`
-		// Minimum execution time: 33_089_000 picoseconds.
-		Weight::from_parts(25_086_745, 0)
+		// Minimum execution time: 39_917_000 picoseconds.
+		Weight::from_parts(27_599_704, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 1_166
-			.saturating_add(Weight::from_parts(98_885, 0).saturating_mul(s.into()))
+			// Standard Error: 1_164
+			.saturating_add(Weight::from_parts(142_796, 0).saturating_mul(s.into()))
 			// Standard Error: 11
-			.saturating_add(Weight::from_parts(1_281, 0).saturating_mul(z.into()))
+			.saturating_add(Weight::from_parts(1_502, 0).saturating_mul(z.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -84,13 +83,13 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `286`
 		//  Estimated: `6811`
-		// Minimum execution time: 19_680_000 picoseconds.
-		Weight::from_parts(13_584_664, 0)
+		// Minimum execution time: 25_925_000 picoseconds.
+		Weight::from_parts(16_188_313, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 401
-			.saturating_add(Weight::from_parts(73_965, 0).saturating_mul(s.into()))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(1_183, 0).saturating_mul(z.into()))
+			// Standard Error: 539
+			.saturating_add(Weight::from_parts(104_839, 0).saturating_mul(s.into()))
+			// Standard Error: 5
+			.saturating_add(Weight::from_parts(1_420, 0).saturating_mul(z.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -104,13 +103,13 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `392 + s * (33 ±0)`
 		//  Estimated: `6811`
-		// Minimum execution time: 37_297_000 picoseconds.
-		Weight::from_parts(27_280_255, 0)
+		// Minimum execution time: 44_351_000 picoseconds.
+		Weight::from_parts(32_183_397, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 1_164
-			.saturating_add(Weight::from_parts(119_673, 0).saturating_mul(s.into()))
-			// Standard Error: 11
-			.saturating_add(Weight::from_parts(1_330, 0).saturating_mul(z.into()))
+			// Standard Error: 1_054
+			.saturating_add(Weight::from_parts(161_583, 0).saturating_mul(s.into()))
+			// Standard Error: 10
+			.saturating_add(Weight::from_parts(1_550, 0).saturating_mul(z.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -121,11 +120,11 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `267 + s * (2 ±0)`
 		//  Estimated: `6811`
-		// Minimum execution time: 23_195_000 picoseconds.
-		Weight::from_parts(24_670_938, 0)
+		// Minimum execution time: 25_195_000 picoseconds.
+		Weight::from_parts(26_828_570, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 1_215
-			.saturating_add(Weight::from_parts(105_785, 0).saturating_mul(s.into()))
+			// Standard Error: 1_350
+			.saturating_add(Weight::from_parts(145_595, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -136,11 +135,11 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `286`
 		//  Estimated: `6811`
-		// Minimum execution time: 11_708_000 picoseconds.
-		Weight::from_parts(12_483_448, 0)
+		// Minimum execution time: 14_089_000 picoseconds.
+		Weight::from_parts(14_859_596, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 532
-			.saturating_add(Weight::from_parts(73_478, 0).saturating_mul(s.into()))
+			// Standard Error: 473
+			.saturating_add(Weight::from_parts(107_021, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -151,11 +150,11 @@ impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `458 + s * (1 ±0)`
 		//  Estimated: `6811`
-		// Minimum execution time: 23_115_000 picoseconds.
-		Weight::from_parts(25_992_058, 0)
+		// Minimum execution time: 27_105_000 picoseconds.
+		Weight::from_parts(30_158_176, 0)
 			.saturating_add(Weight::from_parts(0, 6811))
-			// Standard Error: 962
-			.saturating_add(Weight::from_parts(84_327, 0).saturating_mul(s.into()))
+			// Standard Error: 1_138
+			.saturating_add(Weight::from_parts(123_246, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
diff --git a/relay/paseo/src/weights/pallet_nomination_pools.rs b/relay/paseo/src/weights/pallet_nomination_pools.rs
index 1ff6447..0d448c3 100644
--- a/relay/paseo/src/weights/pallet_nomination_pools.rs
+++ b/relay/paseo/src/weights/pallet_nomination_pools.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_nomination_pools`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_nomination_pools
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -81,10 +80,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	fn join() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `3392`
+		//  Measured:  `3358`
 		//  Estimated: `8877`
-		// Minimum execution time: 163_997_000 picoseconds.
-		Weight::from_parts(167_292_000, 0)
+		// Minimum execution time: 175_400_000 picoseconds.
+		Weight::from_parts(178_857_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(20))
 			.saturating_add(T::DbWeight::get().writes(13))
@@ -115,10 +114,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	fn bond_extra_transfer() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `3402`
+		//  Measured:  `3368`
 		//  Estimated: `8877`
-		// Minimum execution time: 164_708_000 picoseconds.
-		Weight::from_parts(166_502_000, 0)
+		// Minimum execution time: 176_683_000 picoseconds.
+		Weight::from_parts(181_466_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(17))
 			.saturating_add(T::DbWeight::get().writes(13))
@@ -151,10 +150,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `NominationPools::TotalValueLocked` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	fn bond_extra_other() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `3312`
+		//  Measured:  `3278`
 		//  Estimated: `8799`
-		// Minimum execution time: 190_498_000 picoseconds.
-		Weight::from_parts(194_163_000, 0)
+		// Minimum execution time: 204_096_000 picoseconds.
+		Weight::from_parts(208_282_000, 0)
 			.saturating_add(Weight::from_parts(0, 8799))
 			.saturating_add(T::DbWeight::get().reads(17))
 			.saturating_add(T::DbWeight::get().writes(13))
@@ -175,8 +174,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `1138`
 		//  Estimated: `4182`
-		// Minimum execution time: 65_018_000 picoseconds.
-		Weight::from_parts(66_309_000, 0)
+		// Minimum execution time: 71_127_000 picoseconds.
+		Weight::from_parts(72_977_000, 0)
 			.saturating_add(Weight::from_parts(0, 4182))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -215,10 +214,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `NominationPools::CounterForSubPoolsStorage` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn unbond() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `3582`
+		//  Measured:  `3548`
 		//  Estimated: `8877`
-		// Minimum execution time: 149_405_000 picoseconds.
-		Weight::from_parts(154_473_000, 0)
+		// Minimum execution time: 157_884_000 picoseconds.
+		Weight::from_parts(162_214_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(20))
 			.saturating_add(T::DbWeight::get().writes(13))
@@ -240,13 +239,13 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// The range of component `s` is `[0, 100]`.
 	fn pool_withdraw_unbonded(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1846`
+		//  Measured:  `1812`
 		//  Estimated: `4764`
-		// Minimum execution time: 61_303_000 picoseconds.
-		Weight::from_parts(64_448_961, 0)
+		// Minimum execution time: 64_097_000 picoseconds.
+		Weight::from_parts(65_875_601, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_699
-			.saturating_add(Weight::from_parts(33_047, 0).saturating_mul(s.into()))
+			// Standard Error: 1_159
+			.saturating_add(Weight::from_parts(56_855, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -277,13 +276,13 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// The range of component `s` is `[0, 100]`.
 	fn withdraw_unbonded_update(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2236`
+		//  Measured:  `2202`
 		//  Estimated: `4764`
-		// Minimum execution time: 119_911_000 picoseconds.
-		Weight::from_parts(123_237_586, 0)
+		// Minimum execution time: 123_066_000 picoseconds.
+		Weight::from_parts(128_330_416, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 2_256
-			.saturating_add(Weight::from_parts(41_235, 0).saturating_mul(s.into()))
+			// Standard Error: 2_615
+			.saturating_add(Weight::from_parts(64_561, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(11))
 			.saturating_add(T::DbWeight::get().writes(9))
 	}
@@ -334,13 +333,15 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Storage: `NominationPools::ClaimPermissions` (r:0 w:1)
 	/// Proof: `NominationPools::ClaimPermissions` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
 	/// The range of component `s` is `[0, 100]`.
-	fn withdraw_unbonded_kill(_s: u32, ) -> Weight {
+	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2659`
+		//  Measured:  `2625`
 		//  Estimated: `8538`
-		// Minimum execution time: 209_917_000 picoseconds.
-		Weight::from_parts(220_691_842, 0)
+		// Minimum execution time: 227_796_000 picoseconds.
+		Weight::from_parts(235_271_199, 0)
 			.saturating_add(Weight::from_parts(0, 8538))
+			// Standard Error: 3_843
+			.saturating_add(Weight::from_parts(12_868, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(24))
 			.saturating_add(T::DbWeight::get().writes(20))
 	}
@@ -368,8 +369,6 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Bonded` (r:1 w:1)
 	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Ledger` (r:1 w:1)
-	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Locks` (r:2 w:1)
 	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:2 w:1)
@@ -386,16 +385,18 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `NominationPools::CounterForReversePoolIdLookup` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	/// Storage: `NominationPools::BondedPools` (r:1 w:1)
 	/// Proof: `NominationPools::BondedPools` (`max_values`: None, `max_size`: Some(254), added: 2729, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Ledger` (r:0 w:1)
+	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Payee` (r:0 w:1)
 	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
 	fn create() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1236`
+		//  Measured:  `1100`
 		//  Estimated: `8538`
-		// Minimum execution time: 153_731_000 picoseconds.
-		Weight::from_parts(157_727_000, 0)
+		// Minimum execution time: 165_933_000 picoseconds.
+		Weight::from_parts(170_178_000, 0)
 			.saturating_add(Weight::from_parts(0, 8538))
-			.saturating_add(T::DbWeight::get().reads(24))
+			.saturating_add(T::DbWeight::get().reads(23))
 			.saturating_add(T::DbWeight::get().writes(17))
 	}
 	/// Storage: `NominationPools::BondedPools` (r:1 w:0)
@@ -425,13 +426,13 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// The range of component `n` is `[1, 16]`.
 	fn nominate(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1859`
+		//  Measured:  `1825`
 		//  Estimated: `4556 + n * (2520 ±0)`
-		// Minimum execution time: 55_643_000 picoseconds.
-		Weight::from_parts(56_072_795, 0)
+		// Minimum execution time: 58_825_000 picoseconds.
+		Weight::from_parts(59_876_876, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
-			// Standard Error: 9_624
-			.saturating_add(Weight::from_parts(1_570_986, 0).saturating_mul(n.into()))
+			// Standard Error: 8_155
+			.saturating_add(Weight::from_parts(1_564_827, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -445,10 +446,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	fn set_state() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1431`
+		//  Measured:  `1397`
 		//  Estimated: `4556`
-		// Minimum execution time: 27_200_000 picoseconds.
-		Weight::from_parts(28_353_000, 0)
+		// Minimum execution time: 30_883_000 picoseconds.
+		Weight::from_parts(31_759_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -464,11 +465,11 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `498`
 		//  Estimated: `3735`
-		// Minimum execution time: 9_925_000 picoseconds.
-		Weight::from_parts(10_689_812, 0)
+		// Minimum execution time: 12_033_000 picoseconds.
+		Weight::from_parts(12_793_361, 0)
 			.saturating_add(Weight::from_parts(0, 3735))
-			// Standard Error: 123
-			.saturating_add(Weight::from_parts(1_100, 0).saturating_mul(n.into()))
+			// Standard Error: 121
+			.saturating_add(Weight::from_parts(1_506, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -488,8 +489,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_424_000 picoseconds.
-		Weight::from_parts(2_584_000, 0)
+		// Minimum execution time: 3_424_000 picoseconds.
+		Weight::from_parts(3_641_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
@@ -499,8 +500,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `498`
 		//  Estimated: `3719`
-		// Minimum execution time: 12_849_000 picoseconds.
-		Weight::from_parts(13_471_000, 0)
+		// Minimum execution time: 15_568_000 picoseconds.
+		Weight::from_parts(16_308_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -525,10 +526,10 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn chill() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2028`
+		//  Measured:  `1994`
 		//  Estimated: `4556`
-		// Minimum execution time: 52_710_000 picoseconds.
-		Weight::from_parts(54_663_000, 0)
+		// Minimum execution time: 57_790_000 picoseconds.
+		Weight::from_parts(59_737_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -545,8 +546,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `770`
 		//  Estimated: `3719`
-		// Minimum execution time: 27_362_000 picoseconds.
-		Weight::from_parts(28_442_000, 0)
+		// Minimum execution time: 32_539_000 picoseconds.
+		Weight::from_parts(33_350_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -559,8 +560,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `538`
 		//  Estimated: `3719`
-		// Minimum execution time: 12_548_000 picoseconds.
-		Weight::from_parts(13_340_000, 0)
+		// Minimum execution time: 15_494_000 picoseconds.
+		Weight::from_parts(16_101_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -571,8 +572,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `498`
 		//  Estimated: `3719`
-		// Minimum execution time: 12_350_000 picoseconds.
-		Weight::from_parts(13_221_000, 0)
+		// Minimum execution time: 15_208_000 picoseconds.
+		Weight::from_parts(16_103_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -583,8 +584,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `498`
 		//  Estimated: `3719`
-		// Minimum execution time: 12_008_000 picoseconds.
-		Weight::from_parts(12_579_000, 0)
+		// Minimum execution time: 15_178_000 picoseconds.
+		Weight::from_parts(15_566_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -597,8 +598,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `508`
 		//  Estimated: `4182`
-		// Minimum execution time: 11_337_000 picoseconds.
-		Weight::from_parts(11_768_000, 0)
+		// Minimum execution time: 13_469_000 picoseconds.
+		Weight::from_parts(13_897_000, 0)
 			.saturating_add(Weight::from_parts(0, 4182))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -615,8 +616,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `968`
 		//  Estimated: `3719`
-		// Minimum execution time: 56_064_000 picoseconds.
-		Weight::from_parts(56_955_000, 0)
+		// Minimum execution time: 60_633_000 picoseconds.
+		Weight::from_parts(62_119_000, 0)
 			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -633,8 +634,8 @@ impl<T: frame_system::Config> pallet_nomination_pools::WeightInfo for WeightInfo
 		// Proof Size summary in bytes:
 		//  Measured:  `947`
 		//  Estimated: `4764`
-		// Minimum execution time: 61_503_000 picoseconds.
-		Weight::from_parts(64_257_000, 0)
+		// Minimum execution time: 66_968_000 picoseconds.
+		Weight::from_parts(68_138_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(2))
diff --git a/relay/paseo/src/weights/pallet_offences.rs b/relay/paseo/src/weights/pallet_offences.rs
index 52c4b90..e469a16 100644
--- a/relay/paseo/src/weights/pallet_offences.rs
+++ b/relay/paseo/src/weights/pallet_offences.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_offences`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_offences
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -88,13 +87,13 @@ impl<T: frame_system::Config> pallet_offences::WeightInfo for WeightInfo<T> {
 	/// The range of component `n` is `[0, 16]`.
 	fn report_offence_grandpa(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1926 + n * (60 ±0)`
+		//  Measured:  `1892 + n * (60 ±0)`
 		//  Estimated: `5520 + n * (2551 ±0)`
-		// Minimum execution time: 69_794_000 picoseconds.
-		Weight::from_parts(78_621_827, 0)
+		// Minimum execution time: 78_630_000 picoseconds.
+		Weight::from_parts(88_665_721, 0)
 			.saturating_add(Weight::from_parts(0, 5520))
-			// Standard Error: 39_801
-			.saturating_add(Weight::from_parts(11_024_661, 0).saturating_mul(n.into()))
+			// Standard Error: 26_232
+			.saturating_add(Weight::from_parts(10_390_293, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(19))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(13))
@@ -142,13 +141,13 @@ impl<T: frame_system::Config> pallet_offences::WeightInfo for WeightInfo<T> {
 	/// The range of component `n` is `[0, 16]`.
 	fn report_offence_babe(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1926 + n * (60 ±0)`
-		//  Estimated: `5520 + n * (2551 ±5)`
-		// Minimum execution time: 69_905_000 picoseconds.
-		Weight::from_parts(79_671_465, 0)
+		//  Measured:  `1892 + n * (60 ±0)`
+		//  Estimated: `5520 + n * (2551 ±0)`
+		// Minimum execution time: 79_484_000 picoseconds.
+		Weight::from_parts(88_650_780, 0)
 			.saturating_add(Weight::from_parts(0, 5520))
-			// Standard Error: 29_190
-			.saturating_add(Weight::from_parts(10_834_223, 0).saturating_mul(n.into()))
+			// Standard Error: 25_915
+			.saturating_add(Weight::from_parts(10_372_668, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(19))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(13))
diff --git a/relay/paseo/src/weights/pallet_preimage.rs b/relay/paseo/src/weights/pallet_preimage.rs
index 9155d21..65e13d7 100644
--- a/relay/paseo/src/weights/pallet_preimage.rs
+++ b/relay/paseo/src/weights/pallet_preimage.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_preimage`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_preimage
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -52,7 +51,7 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
 	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Holds` (r:1 w:1)
-	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
+	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
 	/// Storage: `Preimage::PreimageFor` (r:0 w:1)
 	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
 	/// The range of component `s` is `[0, 4194304]`.
@@ -60,11 +59,11 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `42`
 		//  Estimated: `3556`
-		// Minimum execution time: 39_129_000 picoseconds.
-		Weight::from_parts(436_245_483, 0)
+		// Minimum execution time: 41_730_000 picoseconds.
+		Weight::from_parts(157_307_237, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
-			// Standard Error: 14
-			.saturating_add(Weight::from_parts(1_532, 0).saturating_mul(s.into()))
+			// Standard Error: 9
+			.saturating_add(Weight::from_parts(1_961, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -79,11 +78,11 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `106`
 		//  Estimated: `3556`
-		// Minimum execution time: 10_957_000 picoseconds.
-		Weight::from_parts(2_532_868, 0)
+		// Minimum execution time: 13_779_000 picoseconds.
+		Weight::from_parts(14_046_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(2_128, 0).saturating_mul(s.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(2_237, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -98,11 +97,11 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `106`
 		//  Estimated: `3556`
-		// Minimum execution time: 10_706_000 picoseconds.
-		Weight::from_parts(25_068_281, 0)
+		// Minimum execution time: 13_313_000 picoseconds.
+		Weight::from_parts(13_419_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(2_083, 0).saturating_mul(s.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(2_237, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -111,15 +110,15 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 	/// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
 	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Holds` (r:1 w:1)
-	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
+	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
 	/// Storage: `Preimage::PreimageFor` (r:0 w:1)
 	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
 	fn unnote_preimage() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `244`
 		//  Estimated: `3556`
-		// Minimum execution time: 46_931_000 picoseconds.
-		Weight::from_parts(48_884_000, 0)
+		// Minimum execution time: 45_264_000 picoseconds.
+		Weight::from_parts(46_985_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -134,8 +133,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `144`
 		//  Estimated: `3556`
-		// Minimum execution time: 22_012_000 picoseconds.
-		Weight::from_parts(23_746_000, 0)
+		// Minimum execution time: 20_724_000 picoseconds.
+		Weight::from_parts(22_378_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -148,8 +147,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `188`
 		//  Estimated: `3556`
-		// Minimum execution time: 15_413_000 picoseconds.
-		Weight::from_parts(17_897_000, 0)
+		// Minimum execution time: 16_684_000 picoseconds.
+		Weight::from_parts(18_157_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -162,8 +161,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `144`
 		//  Estimated: `3556`
-		// Minimum execution time: 11_958_000 picoseconds.
-		Weight::from_parts(13_290_000, 0)
+		// Minimum execution time: 11_427_000 picoseconds.
+		Weight::from_parts(12_332_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -176,8 +175,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `42`
 		//  Estimated: `3556`
-		// Minimum execution time: 11_146_000 picoseconds.
-		Weight::from_parts(11_919_000, 0)
+		// Minimum execution time: 12_974_000 picoseconds.
+		Weight::from_parts(13_708_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -190,8 +189,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `106`
 		//  Estimated: `3556`
-		// Minimum execution time: 7_581_000 picoseconds.
-		Weight::from_parts(7_972_000, 0)
+		// Minimum execution time: 9_100_000 picoseconds.
+		Weight::from_parts(9_521_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -206,8 +205,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `144`
 		//  Estimated: `3556`
-		// Minimum execution time: 17_075_000 picoseconds.
-		Weight::from_parts(18_908_000, 0)
+		// Minimum execution time: 18_493_000 picoseconds.
+		Weight::from_parts(19_966_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -220,8 +219,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `106`
 		//  Estimated: `3556`
-		// Minimum execution time: 7_361_000 picoseconds.
-		Weight::from_parts(7_982_000, 0)
+		// Minimum execution time: 8_947_000 picoseconds.
+		Weight::from_parts(9_202_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -234,8 +233,8 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `106`
 		//  Estimated: `3556`
-		// Minimum execution time: 7_461_000 picoseconds.
-		Weight::from_parts(8_142_000, 0)
+		// Minimum execution time: 8_868_000 picoseconds.
+		Weight::from_parts(9_045_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -245,7 +244,7 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 	/// Storage: `System::Account` (r:1023 w:1023)
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Holds` (r:1023 w:1023)
-	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
+	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
 	/// Storage: `Preimage::RequestStatusFor` (r:0 w:1023)
 	/// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
 	/// The range of component `n` is `[1, 1024]`.
@@ -253,11 +252,11 @@ impl<T: frame_system::Config> pallet_preimage::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0 + n * (227 ±0)`
 		//  Estimated: `990 + n * (2603 ±0)`
-		// Minimum execution time: 45_208_000 picoseconds.
-		Weight::from_parts(45_799_000, 0)
+		// Minimum execution time: 48_132_000 picoseconds.
+		Weight::from_parts(48_562_000, 0)
 			.saturating_add(Weight::from_parts(0, 990))
-			// Standard Error: 32_733
-			.saturating_add(Weight::from_parts(49_467_765, 0).saturating_mul(n.into()))
+			// Standard Error: 34_704
+			.saturating_add(Weight::from_parts(50_038_311, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(n.into())))
 			.saturating_add(Weight::from_parts(0, 2603).saturating_mul(n.into()))
diff --git a/relay/paseo/src/weights/pallet_proxy.rs b/relay/paseo/src/weights/pallet_proxy.rs
index 28c5dc3..ac14a22 100644
--- a/relay/paseo/src/weights/pallet_proxy.rs
+++ b/relay/paseo/src/weights/pallet_proxy.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_proxy`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_proxy
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -54,11 +53,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + p * (37 ±0)`
 		//  Estimated: `4706`
-		// Minimum execution time: 8_232_000 picoseconds.
-		Weight::from_parts(9_074_222, 0)
+		// Minimum execution time: 11_100_000 picoseconds.
+		Weight::from_parts(11_788_672, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 939
-			.saturating_add(Weight::from_parts(36_848, 0).saturating_mul(p.into()))
+			// Standard Error: 1_058
+			.saturating_add(Weight::from_parts(33_449, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 	}
 	/// Storage: `Proxy::Proxies` (r:1 w:0)
@@ -73,13 +72,13 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `416 + a * (68 ±0) + p * (37 ±0)`
 		//  Estimated: `5698`
-		// Minimum execution time: 27_861_000 picoseconds.
-		Weight::from_parts(28_219_385, 0)
+		// Minimum execution time: 32_576_000 picoseconds.
+		Weight::from_parts(32_755_307, 0)
 			.saturating_add(Weight::from_parts(0, 5698))
-			// Standard Error: 2_052
-			.saturating_add(Weight::from_parts(178_790, 0).saturating_mul(a.into()))
-			// Standard Error: 2_120
-			.saturating_add(Weight::from_parts(43_173, 0).saturating_mul(p.into()))
+			// Standard Error: 1_827
+			.saturating_add(Weight::from_parts(135_201, 0).saturating_mul(a.into()))
+			// Standard Error: 1_888
+			.saturating_add(Weight::from_parts(45_136, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -93,13 +92,13 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `331 + a * (68 ±0)`
 		//  Estimated: `5698`
-		// Minimum execution time: 17_777_000 picoseconds.
-		Weight::from_parts(18_595_671, 0)
+		// Minimum execution time: 19_395_000 picoseconds.
+		Weight::from_parts(19_982_228, 0)
 			.saturating_add(Weight::from_parts(0, 5698))
-			// Standard Error: 1_877
-			.saturating_add(Weight::from_parts(155_215, 0).saturating_mul(a.into()))
-			// Standard Error: 1_939
-			.saturating_add(Weight::from_parts(10_712, 0).saturating_mul(p.into()))
+			// Standard Error: 2_225
+			.saturating_add(Weight::from_parts(142_311, 0).saturating_mul(a.into()))
+			// Standard Error: 2_299
+			.saturating_add(Weight::from_parts(14_218, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -113,13 +112,13 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `331 + a * (68 ±0)`
 		//  Estimated: `5698`
-		// Minimum execution time: 18_077_000 picoseconds.
-		Weight::from_parts(18_685_733, 0)
+		// Minimum execution time: 19_939_000 picoseconds.
+		Weight::from_parts(19_978_151, 0)
 			.saturating_add(Weight::from_parts(0, 5698))
-			// Standard Error: 1_810
-			.saturating_add(Weight::from_parts(149_013, 0).saturating_mul(a.into()))
-			// Standard Error: 1_870
-			.saturating_add(Weight::from_parts(12_533, 0).saturating_mul(p.into()))
+			// Standard Error: 2_187
+			.saturating_add(Weight::from_parts(138_370, 0).saturating_mul(a.into()))
+			// Standard Error: 2_260
+			.saturating_add(Weight::from_parts(17_190, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -135,13 +134,13 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `348 + a * (68 ±0) + p * (37 ±0)`
 		//  Estimated: `5698`
-		// Minimum execution time: 26_500_000 picoseconds.
-		Weight::from_parts(26_963_234, 0)
+		// Minimum execution time: 29_518_000 picoseconds.
+		Weight::from_parts(29_575_104, 0)
 			.saturating_add(Weight::from_parts(0, 5698))
-			// Standard Error: 1_573
-			.saturating_add(Weight::from_parts(145_270, 0).saturating_mul(a.into()))
-			// Standard Error: 1_625
-			.saturating_add(Weight::from_parts(33_285, 0).saturating_mul(p.into()))
+			// Standard Error: 1_822
+			.saturating_add(Weight::from_parts(126_462, 0).saturating_mul(a.into()))
+			// Standard Error: 1_883
+			.saturating_add(Weight::from_parts(34_795, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -152,11 +151,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + p * (37 ±0)`
 		//  Estimated: `4706`
-		// Minimum execution time: 17_296_000 picoseconds.
-		Weight::from_parts(17_991_551, 0)
+		// Minimum execution time: 19_501_000 picoseconds.
+		Weight::from_parts(20_180_931, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 1_032
-			.saturating_add(Weight::from_parts(37_360, 0).saturating_mul(p.into()))
+			// Standard Error: 1_010
+			.saturating_add(Weight::from_parts(38_586, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -167,11 +166,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + p * (37 ±0)`
 		//  Estimated: `4706`
-		// Minimum execution time: 17_195_000 picoseconds.
-		Weight::from_parts(18_106_020, 0)
+		// Minimum execution time: 19_029_000 picoseconds.
+		Weight::from_parts(19_985_840, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 1_275
-			.saturating_add(Weight::from_parts(39_083, 0).saturating_mul(p.into()))
+			// Standard Error: 1_465
+			.saturating_add(Weight::from_parts(43_972, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -182,11 +181,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `89 + p * (37 ±0)`
 		//  Estimated: `4706`
-		// Minimum execution time: 15_303_000 picoseconds.
-		Weight::from_parts(16_078_545, 0)
+		// Minimum execution time: 18_092_000 picoseconds.
+		Weight::from_parts(18_768_625, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 980
-			.saturating_add(Weight::from_parts(31_623, 0).saturating_mul(p.into()))
+			// Standard Error: 997
+			.saturating_add(Weight::from_parts(36_217, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -197,11 +196,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `101`
 		//  Estimated: `4706`
-		// Minimum execution time: 18_098_000 picoseconds.
-		Weight::from_parts(18_918_483, 0)
+		// Minimum execution time: 20_502_000 picoseconds.
+		Weight::from_parts(21_203_497, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 1_058
-			.saturating_add(Weight::from_parts(20_933, 0).saturating_mul(p.into()))
+			// Standard Error: 976
+			.saturating_add(Weight::from_parts(5_692, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -212,11 +211,11 @@ impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `126 + p * (37 ±0)`
 		//  Estimated: `4706`
-		// Minimum execution time: 15_894_000 picoseconds.
-		Weight::from_parts(16_716_160, 0)
+		// Minimum execution time: 18_439_000 picoseconds.
+		Weight::from_parts(19_470_409, 0)
 			.saturating_add(Weight::from_parts(0, 4706))
-			// Standard Error: 1_153
-			.saturating_add(Weight::from_parts(27_844, 0).saturating_mul(p.into()))
+			// Standard Error: 1_000
+			.saturating_add(Weight::from_parts(27_772, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
diff --git a/relay/paseo/src/weights/pallet_referenda.rs b/relay/paseo/src/weights/pallet_referenda.rs
index 1e667b9..0e4e3f2 100644
--- a/relay/paseo/src/weights/pallet_referenda.rs
+++ b/relay/paseo/src/weights/pallet_referenda.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_referenda`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_referenda
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,8 +56,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `186`
 		//  Estimated: `42428`
-		// Minimum execution time: 25_428_000 picoseconds.
-		Weight::from_parts(26_170_000, 0)
+		// Minimum execution time: 28_309_000 picoseconds.
+		Weight::from_parts(29_092_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -71,8 +70,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `439`
 		//  Estimated: `83866`
-		// Minimum execution time: 35_083_000 picoseconds.
-		Weight::from_parts(36_305_000, 0)
+		// Minimum execution time: 40_137_000 picoseconds.
+		Weight::from_parts(40_975_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -89,8 +88,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `3226`
 		//  Estimated: `42428`
-		// Minimum execution time: 46_109_000 picoseconds.
-		Weight::from_parts(47_100_000, 0)
+		// Minimum execution time: 53_644_000 picoseconds.
+		Weight::from_parts(54_990_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -107,8 +106,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `3246`
 		//  Estimated: `42428`
-		// Minimum execution time: 45_468_000 picoseconds.
-		Weight::from_parts(47_102_000, 0)
+		// Minimum execution time: 53_120_000 picoseconds.
+		Weight::from_parts(54_303_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -123,8 +122,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `439`
 		//  Estimated: `83866`
-		// Minimum execution time: 42_424_000 picoseconds.
-		Weight::from_parts(43_575_000, 0)
+		// Minimum execution time: 48_446_000 picoseconds.
+		Weight::from_parts(49_527_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -139,8 +138,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `439`
 		//  Estimated: `83866`
-		// Minimum execution time: 40_801_000 picoseconds.
-		Weight::from_parts(42_353_000, 0)
+		// Minimum execution time: 47_170_000 picoseconds.
+		Weight::from_parts(48_568_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -151,8 +150,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `279`
 		//  Estimated: `4401`
-		// Minimum execution time: 19_880_000 picoseconds.
-		Weight::from_parts(20_622_000, 0)
+		// Minimum execution time: 22_858_000 picoseconds.
+		Weight::from_parts(23_535_000, 0)
 			.saturating_add(Weight::from_parts(0, 4401))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -163,8 +162,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `269`
 		//  Estimated: `4401`
-		// Minimum execution time: 20_400_000 picoseconds.
-		Weight::from_parts(21_003_000, 0)
+		// Minimum execution time: 23_093_000 picoseconds.
+		Weight::from_parts(23_778_000, 0)
 			.saturating_add(Weight::from_parts(0, 4401))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -177,8 +176,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `347`
 		//  Estimated: `83866`
-		// Minimum execution time: 22_123_000 picoseconds.
-		Weight::from_parts(22_554_000, 0)
+		// Minimum execution time: 26_219_000 picoseconds.
+		Weight::from_parts(26_982_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -193,8 +192,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `588`
 		//  Estimated: `83866`
-		// Minimum execution time: 69_364_000 picoseconds.
-		Weight::from_parts(71_046_000, 0)
+		// Minimum execution time: 77_331_000 picoseconds.
+		Weight::from_parts(78_613_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -207,8 +206,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `102`
 		//  Estimated: `5477`
-		// Minimum execution time: 6_790_000 picoseconds.
-		Weight::from_parts(7_151_000, 0)
+		// Minimum execution time: 8_108_000 picoseconds.
+		Weight::from_parts(8_497_000, 0)
 			.saturating_add(Weight::from_parts(0, 5477))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -223,8 +222,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `3116`
 		//  Estimated: `42428`
-		// Minimum execution time: 31_909_000 picoseconds.
-		Weight::from_parts(33_370_000, 0)
+		// Minimum execution time: 39_409_000 picoseconds.
+		Weight::from_parts(41_282_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -239,8 +238,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `3116`
 		//  Estimated: `42428`
-		// Minimum execution time: 33_531_000 picoseconds.
-		Weight::from_parts(34_672_000, 0)
+		// Minimum execution time: 42_239_000 picoseconds.
+		Weight::from_parts(43_303_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -253,8 +252,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `2939`
 		//  Estimated: `5477`
-		// Minimum execution time: 16_526_000 picoseconds.
-		Weight::from_parts(17_657_000, 0)
+		// Minimum execution time: 20_393_000 picoseconds.
+		Weight::from_parts(20_859_000, 0)
 			.saturating_add(Weight::from_parts(0, 5477))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -267,8 +266,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `2939`
 		//  Estimated: `5477`
-		// Minimum execution time: 16_274_000 picoseconds.
-		Weight::from_parts(17_107_000, 0)
+		// Minimum execution time: 20_617_000 picoseconds.
+		Weight::from_parts(21_626_000, 0)
 			.saturating_add(Weight::from_parts(0, 5477))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -283,8 +282,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `2943`
 		//  Estimated: `5477`
-		// Minimum execution time: 19_680_000 picoseconds.
-		Weight::from_parts(21_341_000, 0)
+		// Minimum execution time: 24_457_000 picoseconds.
+		Weight::from_parts(25_297_000, 0)
 			.saturating_add(Weight::from_parts(0, 5477))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -299,8 +298,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `2963`
 		//  Estimated: `5477`
-		// Minimum execution time: 20_391_000 picoseconds.
-		Weight::from_parts(21_412_000, 0)
+		// Minimum execution time: 24_396_000 picoseconds.
+		Weight::from_parts(25_169_000, 0)
 			.saturating_add(Weight::from_parts(0, 5477))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -313,8 +312,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `299`
 		//  Estimated: `42428`
-		// Minimum execution time: 15_013_000 picoseconds.
-		Weight::from_parts(15_534_000, 0)
+		// Minimum execution time: 17_827_000 picoseconds.
+		Weight::from_parts(18_289_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -327,8 +326,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `347`
 		//  Estimated: `42428`
-		// Minimum execution time: 15_013_000 picoseconds.
-		Weight::from_parts(15_464_000, 0)
+		// Minimum execution time: 17_946_000 picoseconds.
+		Weight::from_parts(18_590_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -339,8 +338,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `206`
 		//  Estimated: `4401`
-		// Minimum execution time: 9_044_000 picoseconds.
-		Weight::from_parts(9_574_000, 0)
+		// Minimum execution time: 11_145_000 picoseconds.
+		Weight::from_parts(11_686_000, 0)
 			.saturating_add(Weight::from_parts(0, 4401))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -355,8 +354,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `347`
 		//  Estimated: `42428`
-		// Minimum execution time: 19_971_000 picoseconds.
-		Weight::from_parts(20_671_000, 0)
+		// Minimum execution time: 24_506_000 picoseconds.
+		Weight::from_parts(25_095_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -371,8 +370,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `347`
 		//  Estimated: `42428`
-		// Minimum execution time: 21_041_000 picoseconds.
-		Weight::from_parts(22_083_000, 0)
+		// Minimum execution time: 26_090_000 picoseconds.
+		Weight::from_parts(26_804_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -385,8 +384,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `400`
 		//  Estimated: `42428`
-		// Minimum execution time: 19_920_000 picoseconds.
-		Weight::from_parts(20_751_000, 0)
+		// Minimum execution time: 24_053_000 picoseconds.
+		Weight::from_parts(24_870_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -399,8 +398,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `383`
 		//  Estimated: `42428`
-		// Minimum execution time: 19_970_000 picoseconds.
-		Weight::from_parts(20_601_000, 0)
+		// Minimum execution time: 24_788_000 picoseconds.
+		Weight::from_parts(25_701_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -413,8 +412,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `400`
 		//  Estimated: `42428`
-		// Minimum execution time: 19_589_000 picoseconds.
-		Weight::from_parts(20_190_000, 0)
+		// Minimum execution time: 23_284_000 picoseconds.
+		Weight::from_parts(24_258_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -427,8 +426,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `404`
 		//  Estimated: `42428`
-		// Minimum execution time: 18_818_000 picoseconds.
-		Weight::from_parts(19_229_000, 0)
+		// Minimum execution time: 22_230_000 picoseconds.
+		Weight::from_parts(23_146_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -443,8 +442,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `404`
 		//  Estimated: `83866`
-		// Minimum execution time: 27_771_000 picoseconds.
-		Weight::from_parts(28_663_000, 0)
+		// Minimum execution time: 33_389_000 picoseconds.
+		Weight::from_parts(34_560_000, 0)
 			.saturating_add(Weight::from_parts(0, 83866))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -457,8 +456,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `400`
 		//  Estimated: `42428`
-		// Minimum execution time: 19_669_000 picoseconds.
-		Weight::from_parts(20_621_000, 0)
+		// Minimum execution time: 24_457_000 picoseconds.
+		Weight::from_parts(25_279_000, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -475,8 +474,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `350`
 		//  Estimated: `4401`
-		// Minimum execution time: 14_001_000 picoseconds.
-		Weight::from_parts(14_542_000, 0)
+		// Minimum execution time: 16_834_000 picoseconds.
+		Weight::from_parts(17_424_000, 0)
 			.saturating_add(Weight::from_parts(0, 4401))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -489,8 +488,8 @@ impl<T: frame_system::Config> pallet_referenda::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `283`
 		//  Estimated: `4401`
-		// Minimum execution time: 10_656_000 picoseconds.
-		Weight::from_parts(11_107_000, 0)
+		// Minimum execution time: 13_360_000 picoseconds.
+		Weight::from_parts(13_881_000, 0)
 			.saturating_add(Weight::from_parts(0, 4401))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_scheduler.rs b/relay/paseo/src/weights/pallet_scheduler.rs
index d42fa0c..e2fed55 100644
--- a/relay/paseo/src/weights/pallet_scheduler.rs
+++ b/relay/paseo/src/weights/pallet_scheduler.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_scheduler`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_scheduler
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `69`
 		//  Estimated: `1489`
-		// Minimum execution time: 2_835_000 picoseconds.
-		Weight::from_parts(2_974_000, 0)
+		// Minimum execution time: 3_025_000 picoseconds.
+		Weight::from_parts(3_146_000, 0)
 			.saturating_add(Weight::from_parts(0, 1489))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -66,11 +65,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `116 + s * (177 ±0)`
 		//  Estimated: `42428`
-		// Minimum execution time: 3_335_000 picoseconds.
-		Weight::from_parts(5_067_896, 0)
+		// Minimum execution time: 3_522_000 picoseconds.
+		Weight::from_parts(6_101_712, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
-			// Standard Error: 1_978
-			.saturating_add(Weight::from_parts(330_903, 0).saturating_mul(s.into()))
+			// Standard Error: 1_305
+			.saturating_add(Weight::from_parts(340_220, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -78,8 +77,8 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_253_000 picoseconds.
-		Weight::from_parts(2_454_000, 0)
+		// Minimum execution time: 2_973_000 picoseconds.
+		Weight::from_parts(3_173_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `Preimage::PreimageFor` (r:1 w:1)
@@ -93,11 +92,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `179 + s * (1 ±0)`
 		//  Estimated: `3644 + s * (1 ±0)`
-		// Minimum execution time: 13_441_000 picoseconds.
-		Weight::from_parts(13_771_000, 0)
+		// Minimum execution time: 16_441_000 picoseconds.
+		Weight::from_parts(16_667_000, 0)
 			.saturating_add(Weight::from_parts(0, 3644))
-			// Standard Error: 7
-			.saturating_add(Weight::from_parts(767, 0).saturating_mul(s.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(1_177, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 			.saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
@@ -108,8 +107,8 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_295_000 picoseconds.
-		Weight::from_parts(3_546_000, 0)
+		// Minimum execution time: 4_377_000 picoseconds.
+		Weight::from_parts(4_591_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -117,24 +116,24 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_273_000 picoseconds.
-		Weight::from_parts(2_443_000, 0)
+		// Minimum execution time: 2_997_000 picoseconds.
+		Weight::from_parts(3_243_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	fn execute_dispatch_signed() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_422_000 picoseconds.
-		Weight::from_parts(1_522_000, 0)
+		// Minimum execution time: 1_736_000 picoseconds.
+		Weight::from_parts(1_859_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	fn execute_dispatch_unsigned() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_382_000 picoseconds.
-		Weight::from_parts(1_532_000, 0)
+		// Minimum execution time: 1_757_000 picoseconds.
+		Weight::from_parts(1_871_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `Scheduler::Agenda` (r:1 w:1)
@@ -144,11 +143,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `116 + s * (177 ±0)`
 		//  Estimated: `42428`
-		// Minimum execution time: 7_452_000 picoseconds.
-		Weight::from_parts(9_201_180, 0)
+		// Minimum execution time: 9_310_000 picoseconds.
+		Weight::from_parts(12_133_208, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
-			// Standard Error: 1_877
-			.saturating_add(Weight::from_parts(352_374, 0).saturating_mul(s.into()))
+			// Standard Error: 1_403
+			.saturating_add(Weight::from_parts(368_667, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -161,11 +160,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `116 + s * (177 ±0)`
 		//  Estimated: `42428`
-		// Minimum execution time: 10_505_000 picoseconds.
-		Weight::from_parts(9_465_242, 0)
+		// Minimum execution time: 13_005_000 picoseconds.
+		Weight::from_parts(12_894_212, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
-			// Standard Error: 3_129
-			.saturating_add(Weight::from_parts(549_382, 0).saturating_mul(s.into()))
+			// Standard Error: 990
+			.saturating_add(Weight::from_parts(554_811, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -178,11 +177,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `293 + s * (185 ±0)`
 		//  Estimated: `42428`
-		// Minimum execution time: 9_755_000 picoseconds.
-		Weight::from_parts(12_809_323, 0)
+		// Minimum execution time: 12_416_000 picoseconds.
+		Weight::from_parts(16_030_565, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
-			// Standard Error: 2_105
-			.saturating_add(Weight::from_parts(385_054, 0).saturating_mul(s.into()))
+			// Standard Error: 2_501
+			.saturating_add(Weight::from_parts(408_097, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -195,11 +194,11 @@ impl<T: frame_system::Config> pallet_scheduler::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `319 + s * (185 ±0)`
 		//  Estimated: `42428`
-		// Minimum execution time: 11_958_000 picoseconds.
-		Weight::from_parts(11_760_955, 0)
+		// Minimum execution time: 14_832_000 picoseconds.
+		Weight::from_parts(15_641_458, 0)
 			.saturating_add(Weight::from_parts(0, 42428))
-			// Standard Error: 2_532
-			.saturating_add(Weight::from_parts(567_234, 0).saturating_mul(s.into()))
+			// Standard Error: 1_737
+			.saturating_add(Weight::from_parts(574_857, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
diff --git a/relay/paseo/src/weights/pallet_session.rs b/relay/paseo/src/weights/pallet_session.rs
index 18fb13d..a066c9d 100644
--- a/relay/paseo/src/weights/pallet_session.rs
+++ b/relay/paseo/src/weights/pallet_session.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_session`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_session
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -55,11 +54,11 @@ impl<T: frame_system::Config> pallet_session::WeightInfo for WeightInfo<T> {
 	/// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn set_keys() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2015`
-		//  Estimated: `17855`
-		// Minimum execution time: 46_680_000 picoseconds.
-		Weight::from_parts(47_933_000, 0)
-			.saturating_add(Weight::from_parts(0, 17855))
+		//  Measured:  `1981`
+		//  Estimated: `17821`
+		// Minimum execution time: 53_170_000 picoseconds.
+		Weight::from_parts(54_566_000, 0)
+			.saturating_add(Weight::from_parts(0, 17821))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
@@ -71,11 +70,11 @@ impl<T: frame_system::Config> pallet_session::WeightInfo for WeightInfo<T> {
 	/// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn purge_keys() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1815`
-		//  Estimated: `5280`
-		// Minimum execution time: 32_779_000 picoseconds.
-		Weight::from_parts(34_001_000, 0)
-			.saturating_add(Weight::from_parts(0, 5280))
+		//  Measured:  `1781`
+		//  Estimated: `5246`
+		// Minimum execution time: 39_207_000 picoseconds.
+		Weight::from_parts(40_234_000, 0)
+			.saturating_add(Weight::from_parts(0, 5246))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
diff --git a/relay/paseo/src/weights/pallet_staking.rs b/relay/paseo/src/weights/pallet_staking.rs
index de19785..d0906be 100644
--- a/relay/paseo/src/weights/pallet_staking.rs
+++ b/relay/paseo/src/weights/pallet_staking.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_staking`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_staking
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -49,22 +48,22 @@ pub struct WeightInfo<T>(PhantomData<T>);
 impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Storage: `Staking::Bonded` (r:1 w:1)
 	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Ledger` (r:1 w:1)
-	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Locks` (r:1 w:1)
 	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:1 w:0)
 	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Ledger` (r:0 w:1)
+	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Payee` (r:0 w:1)
 	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
 	fn bond() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `982`
+		//  Measured:  `846`
 		//  Estimated: `4764`
-		// Minimum execution time: 39_881_000 picoseconds.
-		Weight::from_parts(41_142_000, 0)
+		// Minimum execution time: 36_185_000 picoseconds.
+		Weight::from_parts(36_727_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			.saturating_add(T::DbWeight::get().reads(4))
+			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
 	/// Storage: `Staking::Bonded` (r:1 w:0)
@@ -81,24 +80,24 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
 	fn bond_extra() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2020`
+		//  Measured:  `1986`
 		//  Estimated: `8877`
-		// Minimum execution time: 76_585_000 picoseconds.
-		Weight::from_parts(78_829_000, 0)
+		// Minimum execution time: 79_294_000 picoseconds.
+		Weight::from_parts(82_007_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:1)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:1 w:0)
 	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
 	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::CurrentEra` (r:1 w:0)
 	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Locks` (r:1 w:1)
 	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:1 w:0)
@@ -109,20 +108,20 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
 	fn unbond() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2227`
+		//  Measured:  `2193`
 		//  Estimated: `8877`
-		// Minimum execution time: 84_347_000 picoseconds.
-		Weight::from_parts(85_690_000, 0)
+		// Minimum execution time: 84_942_000 picoseconds.
+		Weight::from_parts(86_219_000, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:1)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::CurrentEra` (r:1 w:0)
 	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Locks` (r:1 w:1)
 	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:1 w:0)
@@ -130,24 +129,24 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[0, 100]`.
 	fn withdraw_unbonded_update(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1177`
+		//  Measured:  `1143`
 		//  Estimated: `4764`
-		// Minimum execution time: 38_277_000 picoseconds.
-		Weight::from_parts(39_829_517, 0)
+		// Minimum execution time: 38_664_000 picoseconds.
+		Weight::from_parts(40_022_498, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_012
-			.saturating_add(Weight::from_parts(26_853, 0).saturating_mul(s.into()))
+			// Standard Error: 816
+			.saturating_add(Weight::from_parts(43_304, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:1)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:1)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::CurrentEra` (r:1 w:0)
 	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
 	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Staking::Bonded` (r:1 w:1)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Locks` (r:1 w:1)
 	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:1 w:0)
@@ -171,13 +170,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[0, 100]`.
 	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2226 + s * (4 ±0)`
+		//  Measured:  `2192 + s * (4 ±0)`
 		//  Estimated: `6248 + s * (4 ±0)`
-		// Minimum execution time: 77_116_000 picoseconds.
-		Weight::from_parts(81_503_202, 0)
+		// Minimum execution time: 82_077_000 picoseconds.
+		Weight::from_parts(88_438_908, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
-			// Standard Error: 4_180
-			.saturating_add(Weight::from_parts(1_351_824, 0).saturating_mul(s.into()))
+			// Standard Error: 3_210
+			.saturating_add(Weight::from_parts(1_205_633, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(13))
 			.saturating_add(T::DbWeight::get().writes(11))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
@@ -185,8 +184,6 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::MinValidatorBond` (r:1 w:0)
 	/// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::MinCommission` (r:1 w:0)
@@ -197,6 +194,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `Staking::MaxValidatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:1 w:0)
 	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `VoterList::ListNodes` (r:1 w:1)
 	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
 	/// Storage: `VoterList::ListBags` (r:1 w:1)
@@ -207,39 +206,35 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn validate() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1422`
+		//  Measured:  `1388`
 		//  Estimated: `4556`
-		// Minimum execution time: 44_807_000 picoseconds.
-		Weight::from_parts(46_029_000, 0)
+		// Minimum execution time: 46_278_000 picoseconds.
+		Weight::from_parts(47_409_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
 			.saturating_add(T::DbWeight::get().reads(11))
 			.saturating_add(T::DbWeight::get().writes(5))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:128 w:128)
 	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
 	/// The range of component `k` is `[1, 128]`.
 	fn kick(k: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1778 + k * (572 ±0)`
+		//  Measured:  `1209 + k * (569 ±0)`
 		//  Estimated: `4556 + k * (3033 ±0)`
-		// Minimum execution time: 27_862_000 picoseconds.
-		Weight::from_parts(29_401_958, 0)
+		// Minimum execution time: 28_128_000 picoseconds.
+		Weight::from_parts(29_460_325, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
-			// Standard Error: 7_654
-			.saturating_add(Weight::from_parts(5_596_963, 0).saturating_mul(k.into()))
-			.saturating_add(T::DbWeight::get().reads(2))
+			// Standard Error: 6_333
+			.saturating_add(Weight::from_parts(6_278_355, 0).saturating_mul(k.into()))
+			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
 			.saturating_add(Weight::from_parts(0, 3033).saturating_mul(k.into()))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
 	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:1 w:1)
@@ -250,6 +245,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::CurrentEra` (r:1 w:0)
 	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `VoterList::ListNodes` (r:2 w:2)
 	/// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
 	/// Storage: `VoterList::ListBags` (r:1 w:1)
@@ -261,13 +258,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `n` is `[1, 16]`.
 	fn nominate(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1868 + n * (99 ±0)`
+		//  Measured:  `1834 + n * (99 ±0)`
 		//  Estimated: `6248 + n * (2520 ±0)`
-		// Minimum execution time: 57_237_000 picoseconds.
-		Weight::from_parts(55_461_362, 0)
+		// Minimum execution time: 58_465_000 picoseconds.
+		Weight::from_parts(57_323_059, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
-			// Standard Error: 14_919
-			.saturating_add(Weight::from_parts(3_477_107, 0).saturating_mul(n.into()))
+			// Standard Error: 20_189
+			.saturating_add(Weight::from_parts(3_836_835, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -275,8 +272,6 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Validators` (r:1 w:0)
 	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Nominators` (r:1 w:1)
@@ -291,12 +286,12 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn chill() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1813`
+		//  Measured:  `1580`
 		//  Estimated: `6248`
-		// Minimum execution time: 48_493_000 picoseconds.
-		Weight::from_parts(50_116_000, 0)
+		// Minimum execution time: 50_318_000 picoseconds.
+		Weight::from_parts(51_549_000, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
-			.saturating_add(T::DbWeight::get().reads(9))
+			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
@@ -307,42 +302,42 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
 	fn set_payee() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `933`
+		//  Measured:  `899`
 		//  Estimated: `4556`
-		// Minimum execution time: 18_478_000 picoseconds.
-		Weight::from_parts(19_018_000, 0)
+		// Minimum execution time: 17_699_000 picoseconds.
+		Weight::from_parts(18_234_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
 	/// Storage: `Staking::Ledger` (r:1 w:0)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:1 w:0)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Payee` (r:1 w:1)
 	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:1 w:0)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	fn update_payee() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1034`
+		//  Measured:  `1000`
 		//  Estimated: `4556`
-		// Minimum execution time: 21_642_000 picoseconds.
-		Weight::from_parts(22_334_000, 0)
+		// Minimum execution time: 21_149_000 picoseconds.
+		Weight::from_parts(21_799_000, 0)
 			.saturating_add(Weight::from_parts(0, 4556))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
 	/// Storage: `Staking::Bonded` (r:1 w:1)
 	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Ledger` (r:2 w:2)
+	/// Storage: `Staking::Ledger` (r:1 w:2)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	fn set_controller() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `933`
-		//  Estimated: `8122`
-		// Minimum execution time: 21_312_000 picoseconds.
-		Weight::from_parts(21_993_000, 0)
-			.saturating_add(Weight::from_parts(0, 8122))
-			.saturating_add(T::DbWeight::get().reads(3))
+		//  Measured:  `899`
+		//  Estimated: `4556`
+		// Minimum execution time: 20_738_000 picoseconds.
+		Weight::from_parts(21_411_000, 0)
+			.saturating_add(Weight::from_parts(0, 4556))
+			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
 	/// Storage: `Staking::ValidatorCount` (r:0 w:1)
@@ -351,8 +346,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_582_000 picoseconds.
-		Weight::from_parts(1_703_000, 0)
+		// Minimum execution time: 1_949_000 picoseconds.
+		Weight::from_parts(2_142_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -362,8 +357,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 5_368_000 picoseconds.
-		Weight::from_parts(5_779_000, 0)
+		// Minimum execution time: 6_878_000 picoseconds.
+		Weight::from_parts(7_396_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -373,8 +368,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 5_548_000 picoseconds.
-		Weight::from_parts(5_809_000, 0)
+		// Minimum execution time: 7_095_000 picoseconds.
+		Weight::from_parts(7_333_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -384,8 +379,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 5_389_000 picoseconds.
-		Weight::from_parts(5_809_000, 0)
+		// Minimum execution time: 7_157_000 picoseconds.
+		Weight::from_parts(7_452_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -396,32 +391,32 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_693_000 picoseconds.
-		Weight::from_parts(1_899_830, 0)
+		// Minimum execution time: 2_143_000 picoseconds.
+		Weight::from_parts(2_406_182, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 18
-			.saturating_add(Weight::from_parts(7_968, 0).saturating_mul(v.into()))
+			// Standard Error: 66
+			.saturating_add(Weight::from_parts(12_060, 0).saturating_mul(v.into()))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
-	/// Storage: `Staking::Ledger` (r:10628 w:10628)
+	/// Storage: `Staking::Ledger` (r:5314 w:10628)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
-	/// Storage: `Staking::Bonded` (r:5314 w:5314)
-	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// Storage: `Staking::Payee` (r:5314 w:0)
 	/// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
+	/// Storage: `Staking::Bonded` (r:0 w:5314)
+	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
 	/// The range of component `i` is `[0, 5314]`.
 	fn deprecate_controller_batch(i: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1860 + i * (225 ±0)`
-		//  Estimated: `990 + i * (7132 ±0)`
-		// Minimum execution time: 3_265_000 picoseconds.
-		Weight::from_parts(3_355_000, 0)
+		//  Measured:  `1375 + i * (147 ±0)`
+		//  Estimated: `990 + i * (3566 ±0)`
+		// Minimum execution time: 1_616_000 picoseconds.
+		Weight::from_parts(1_712_000, 0)
 			.saturating_add(Weight::from_parts(0, 990))
-			// Standard Error: 53_984
-			.saturating_add(Weight::from_parts(26_509_679, 0).saturating_mul(i.into()))
-			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(i.into())))
+			// Standard Error: 37_039
+			.saturating_add(Weight::from_parts(17_023_489, 0).saturating_mul(i.into()))
+			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
 			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(i.into())))
-			.saturating_add(Weight::from_parts(0, 7132).saturating_mul(i.into()))
+			.saturating_add(Weight::from_parts(0, 3566).saturating_mul(i.into()))
 	}
 	/// Storage: `Staking::SlashingSpans` (r:1 w:1)
 	/// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
@@ -454,13 +449,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[0, 100]`.
 	fn force_unstake(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2226 + s * (4 ±0)`
+		//  Measured:  `2192 + s * (4 ±0)`
 		//  Estimated: `6248 + s * (4 ±0)`
-		// Minimum execution time: 71_678_000 picoseconds.
-		Weight::from_parts(77_654_045, 0)
+		// Minimum execution time: 79_017_000 picoseconds.
+		Weight::from_parts(85_362_161, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
-			// Standard Error: 4_088
-			.saturating_add(Weight::from_parts(1_296_989, 0).saturating_mul(s.into()))
+			// Standard Error: 3_052
+			.saturating_add(Weight::from_parts(1_209_060, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(13))
 			.saturating_add(T::DbWeight::get().writes(12))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
@@ -471,13 +466,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 1000]`.
 	fn cancel_deferred_slash(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `66639`
-		//  Estimated: `70104`
-		// Minimum execution time: 114_212_000 picoseconds.
-		Weight::from_parts(1_081_262_522, 0)
-			.saturating_add(Weight::from_parts(0, 70104))
-			// Standard Error: 69_711
-			.saturating_add(Weight::from_parts(5_839_600, 0).saturating_mul(s.into()))
+		//  Measured:  `66605`
+		//  Estimated: `70070`
+		// Minimum execution time: 130_478_000 picoseconds.
+		Weight::from_parts(1_191_159_716, 0)
+			.saturating_add(Weight::from_parts(0, 70070))
+			// Standard Error: 76_593
+			.saturating_add(Weight::from_parts(6_457_182, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -512,13 +507,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `n` is `[0, 512]`.
 	fn payout_stakers_alive_staked(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `58352 + n * (388 ±0)`
-		//  Estimated: `53212 + n * (3774 ±0)`
-		// Minimum execution time: 146_651_000 picoseconds.
-		Weight::from_parts(93_551_720, 0)
-			.saturating_add(Weight::from_parts(0, 53212))
-			// Standard Error: 26_668
-			.saturating_add(Weight::from_parts(48_272_778, 0).saturating_mul(n.into()))
+		//  Measured:  `58318 + n * (388 ±0)`
+		//  Estimated: `53178 + n * (3774 ±2)`
+		// Minimum execution time: 144_157_000 picoseconds.
+		Weight::from_parts(122_185_559, 0)
+			.saturating_add(Weight::from_parts(0, 53178))
+			// Standard Error: 17_820
+			.saturating_add(Weight::from_parts(46_150_479, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(14))
 			.saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -540,13 +535,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `l` is `[1, 32]`.
 	fn rebond(l: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2021 + l * (5 ±0)`
+		//  Measured:  `1987 + l * (5 ±0)`
 		//  Estimated: `8877`
-		// Minimum execution time: 73_722_000 picoseconds.
-		Weight::from_parts(76_582_006, 0)
+		// Minimum execution time: 76_391_000 picoseconds.
+		Weight::from_parts(79_140_188, 0)
 			.saturating_add(Weight::from_parts(0, 8877))
-			// Standard Error: 4_518
-			.saturating_add(Weight::from_parts(49_073, 0).saturating_mul(l.into()))
+			// Standard Error: 4_099
+			.saturating_add(Weight::from_parts(36_645, 0).saturating_mul(l.into()))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
@@ -579,13 +574,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 100]`.
 	fn reap_stash(s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2226 + s * (4 ±0)`
+		//  Measured:  `2192 + s * (4 ±0)`
 		//  Estimated: `6248 + s * (4 ±0)`
-		// Minimum execution time: 80_592_000 picoseconds.
-		Weight::from_parts(82_275_917, 0)
+		// Minimum execution time: 87_934_000 picoseconds.
+		Weight::from_parts(90_382_756, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
-			// Standard Error: 3_567
-			.saturating_add(Weight::from_parts(1_281_355, 0).saturating_mul(s.into()))
+			// Standard Error: 3_093
+			.saturating_add(Weight::from_parts(1_204_911, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().writes(11))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
@@ -631,13 +626,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0 + n * (716 ±0) + v * (3594 ±0)`
 		//  Estimated: `456136 + n * (3566 ±0) + v * (3566 ±0)`
-		// Minimum execution time: 512_992_000 picoseconds.
-		Weight::from_parts(516_379_000, 0)
+		// Minimum execution time: 510_885_000 picoseconds.
+		Weight::from_parts(516_119_000, 0)
 			.saturating_add(Weight::from_parts(0, 456136))
-			// Standard Error: 1_754_094
-			.saturating_add(Weight::from_parts(59_163_580, 0).saturating_mul(v.into()))
-			// Standard Error: 174_785
-			.saturating_add(Weight::from_parts(18_033_934, 0).saturating_mul(n.into()))
+			// Standard Error: 2_051_919
+			.saturating_add(Weight::from_parts(66_723_339, 0).saturating_mul(v.into()))
+			// Standard Error: 204_462
+			.saturating_add(Weight::from_parts(17_965_193, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(184))
 			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
 			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
@@ -666,15 +661,15 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `n` is `[500, 1000]`.
 	fn get_npos_voters(v: u32, n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `3182 + n * (907 ±0) + v * (391 ±0)`
+		//  Measured:  `3148 + n * (907 ±0) + v * (391 ±0)`
 		//  Estimated: `456136 + n * (3566 ±0) + v * (3566 ±0)`
-		// Minimum execution time: 33_365_217_000 picoseconds.
-		Weight::from_parts(33_765_931_000, 0)
+		// Minimum execution time: 33_801_679_000 picoseconds.
+		Weight::from_parts(34_019_210_000, 0)
 			.saturating_add(Weight::from_parts(0, 456136))
-			// Standard Error: 367_830
-			.saturating_add(Weight::from_parts(4_965_572, 0).saturating_mul(v.into()))
-			// Standard Error: 367_830
-			.saturating_add(Weight::from_parts(3_377_899, 0).saturating_mul(n.into()))
+			// Standard Error: 375_991
+			.saturating_add(Weight::from_parts(5_073_971, 0).saturating_mul(v.into()))
+			// Standard Error: 375_991
+			.saturating_add(Weight::from_parts(3_875_876, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(179))
 			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
 			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
@@ -689,13 +684,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// The range of component `v` is `[500, 1000]`.
 	fn get_npos_targets(v: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `946 + v * (50 ±0)`
+		//  Measured:  `912 + v * (50 ±0)`
 		//  Estimated: `3510 + v * (2520 ±0)`
-		// Minimum execution time: 2_224_613_000 picoseconds.
-		Weight::from_parts(47_606_350, 0)
+		// Minimum execution time: 2_412_116_000 picoseconds.
+		Weight::from_parts(91_440_611, 0)
 			.saturating_add(Weight::from_parts(0, 3510))
-			// Standard Error: 8_010
-			.saturating_add(Weight::from_parts(4_467_279, 0).saturating_mul(v.into()))
+			// Standard Error: 7_234
+			.saturating_add(Weight::from_parts(4_805_630, 0).saturating_mul(v.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
 			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(v.into()))
@@ -716,8 +711,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_434_000 picoseconds.
-		Weight::from_parts(2_654_000, 0)
+		// Minimum execution time: 3_463_000 picoseconds.
+		Weight::from_parts(3_624_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
@@ -737,8 +732,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_374_000 picoseconds.
-		Weight::from_parts(2_524_000, 0)
+		// Minimum execution time: 3_183_000 picoseconds.
+		Weight::from_parts(3_347_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
@@ -766,10 +761,10 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
 	fn chill_other() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1936`
+		//  Measured:  `1902`
 		//  Estimated: `6248`
-		// Minimum execution time: 58_950_000 picoseconds.
-		Weight::from_parts(60_521_000, 0)
+		// Minimum execution time: 64_299_000 picoseconds.
+		Weight::from_parts(65_949_000, 0)
 			.saturating_add(Weight::from_parts(0, 6248))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -780,10 +775,10 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
 	fn force_apply_min_commission() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `658`
+		//  Measured:  `624`
 		//  Estimated: `3510`
-		// Minimum execution time: 9_364_000 picoseconds.
-		Weight::from_parts(9_815_000, 0)
+		// Minimum execution time: 11_184_000 picoseconds.
+		Weight::from_parts(11_725_000, 0)
 			.saturating_add(Weight::from_parts(0, 3510))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -794,8 +789,8 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_512_000 picoseconds.
-		Weight::from_parts(1_682_000, 0)
+		// Minimum execution time: 1_907_000 picoseconds.
+		Weight::from_parts(2_079_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -808,13 +803,13 @@ impl<T: frame_system::Config> pallet_staking::WeightInfo for WeightInfo<T> {
 	/// Storage: `Staking::Ledger` (r:1 w:1)
 	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
 	/// Storage: `Balances::Freezes` (r:1 w:0)
-	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
+	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(67), added: 2542, mode: `MaxEncodedLen`)
 	fn restore_ledger() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `1069`
+		//  Measured:  `1014`
 		//  Estimated: `4764`
-		// Minimum execution time: 39_750_000 picoseconds.
-		Weight::from_parts(40_801_000, 0)
+		// Minimum execution time: 40_258_000 picoseconds.
+		Weight::from_parts(41_210_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(4))
diff --git a/relay/paseo/src/weights/pallet_sudo.rs b/relay/paseo/src/weights/pallet_sudo.rs
deleted file mode 100644
index e617bf2..0000000
--- a/relay/paseo/src/weights/pallet_sudo.rs
+++ /dev/null
@@ -1,96 +0,0 @@
-// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
-// for a list of specific contributors.
-// SPDX-License-Identifier: Apache-2.0
-
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-// http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-//! Autogenerated weights for `pallet_sudo`
-//!
-//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
-//! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
-
-// Executed Command:
-// ./polkadot
-// benchmark
-// pallet
-// --chain=./paseo-chain-spec.json
-// --steps=50
-// --repeat=20
-// --pallet=pallet_sudo
-// --extrinsic=*
-// --wasm-execution=compiled
-// --heap-pages=4096
-// --output=./paseo-weights/
-// --header=./file_header.txt
-
-#![cfg_attr(rustfmt, rustfmt_skip)]
-#![allow(unused_parens)]
-#![allow(unused_imports)]
-#![allow(missing_docs)]
-
-use frame_support::{traits::Get, weights::Weight};
-use core::marker::PhantomData;
-
-/// Weight functions for `pallet_sudo`.
-pub struct WeightInfo<T>(PhantomData<T>);
-impl<T: frame_system::Config> pallet_sudo::WeightInfo for WeightInfo<T> {
-	/// Storage: `Sudo::Key` (r:1 w:1)
-	/// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
-	fn set_key() -> Weight {
-		// Proof Size summary in bytes:
-		//  Measured:  `132`
-		//  Estimated: `1517`
-		// Minimum execution time: 6_550_000 picoseconds.
-		Weight::from_parts(6_810_000, 0)
-			.saturating_add(Weight::from_parts(0, 1517))
-			.saturating_add(T::DbWeight::get().reads(1))
-			.saturating_add(T::DbWeight::get().writes(1))
-	}
-	/// Storage: `Sudo::Key` (r:1 w:0)
-	/// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
-	fn sudo() -> Weight {
-		// Proof Size summary in bytes:
-		//  Measured:  `132`
-		//  Estimated: `1517`
-		// Minimum execution time: 7_061_000 picoseconds.
-		Weight::from_parts(7_402_000, 0)
-			.saturating_add(Weight::from_parts(0, 1517))
-			.saturating_add(T::DbWeight::get().reads(1))
-	}
-	/// Storage: `Sudo::Key` (r:1 w:0)
-	/// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
-	fn sudo_as() -> Weight {
-		// Proof Size summary in bytes:
-		//  Measured:  `132`
-		//  Estimated: `1517`
-		// Minimum execution time: 7_081_000 picoseconds.
-		Weight::from_parts(7_471_000, 0)
-			.saturating_add(Weight::from_parts(0, 1517))
-			.saturating_add(T::DbWeight::get().reads(1))
-	}
-	/// Storage: `Sudo::Key` (r:1 w:1)
-	/// Proof: `Sudo::Key` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
-	fn remove_key() -> Weight {
-		// Proof Size summary in bytes:
-		//  Measured:  `132`
-		//  Estimated: `1517`
-		// Minimum execution time: 6_029_000 picoseconds.
-		Weight::from_parts(6_279_000, 0)
-			.saturating_add(Weight::from_parts(0, 1517))
-			.saturating_add(T::DbWeight::get().reads(1))
-			.saturating_add(T::DbWeight::get().writes(1))
-	}
-}
\ No newline at end of file
diff --git a/relay/paseo/src/weights/pallet_timestamp.rs b/relay/paseo/src/weights/pallet_timestamp.rs
index df3149d..8ea7a60 100644
--- a/relay/paseo/src/weights/pallet_timestamp.rs
+++ b/relay/paseo/src/weights/pallet_timestamp.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_timestamp`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_timestamp
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -55,8 +54,8 @@ impl<T: frame_system::Config> pallet_timestamp::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `173`
 		//  Estimated: `1493`
-		// Minimum execution time: 5_308_000 picoseconds.
-		Weight::from_parts(5_598_000, 0)
+		// Minimum execution time: 6_163_000 picoseconds.
+		Weight::from_parts(6_437_000, 0)
 			.saturating_add(Weight::from_parts(0, 1493))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -65,8 +64,8 @@ impl<T: frame_system::Config> pallet_timestamp::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `94`
 		//  Estimated: `0`
-		// Minimum execution time: 3_014_000 picoseconds.
-		Weight::from_parts(3_224_000, 0)
+		// Minimum execution time: 3_235_000 picoseconds.
+		Weight::from_parts(3_378_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 }
diff --git a/relay/paseo/src/weights/pallet_treasury.rs b/relay/paseo/src/weights/pallet_treasury.rs
index ac9b6b0..a973f9e 100644
--- a/relay/paseo/src/weights/pallet_treasury.rs
+++ b/relay/paseo/src/weights/pallet_treasury.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_treasury`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_treasury
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,8 +56,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `42`
 		//  Estimated: `1887`
-		// Minimum execution time: 7_302_000 picoseconds.
-		Weight::from_parts(7_753_000, 0)
+		// Minimum execution time: 9_723_000 picoseconds.
+		Weight::from_parts(10_187_000, 0)
 			.saturating_add(Weight::from_parts(0, 1887))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -71,8 +70,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `143`
 		//  Estimated: `1489`
-		// Minimum execution time: 18_799_000 picoseconds.
-		Weight::from_parts(19_368_000, 0)
+		// Minimum execution time: 20_572_000 picoseconds.
+		Weight::from_parts(21_023_000, 0)
 			.saturating_add(Weight::from_parts(0, 1489))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -85,8 +84,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `301`
 		//  Estimated: `3593`
-		// Minimum execution time: 27_612_000 picoseconds.
-		Weight::from_parts(28_163_000, 0)
+		// Minimum execution time: 31_500_000 picoseconds.
+		Weight::from_parts(32_257_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -100,11 +99,11 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `470 + p * (8 ±0)`
 		//  Estimated: `3573`
-		// Minimum execution time: 5_578_000 picoseconds.
-		Weight::from_parts(7_732_506, 0)
+		// Minimum execution time: 6_910_000 picoseconds.
+		Weight::from_parts(8_782_990, 0)
 			.saturating_add(Weight::from_parts(0, 3573))
-			// Standard Error: 1_668
-			.saturating_add(Weight::from_parts(69_481, 0).saturating_mul(p.into()))
+			// Standard Error: 1_895
+			.saturating_add(Weight::from_parts(105_912, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -114,8 +113,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `127`
 		//  Estimated: `1887`
-		// Minimum execution time: 4_387_000 picoseconds.
-		Weight::from_parts(4_797_000, 0)
+		// Minimum execution time: 5_426_000 picoseconds.
+		Weight::from_parts(5_616_000, 0)
 			.saturating_add(Weight::from_parts(0, 1887))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -135,11 +134,11 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `285 + p * (251 ±0)`
 		//  Estimated: `1887 + p * (5206 ±0)`
-		// Minimum execution time: 24_016_000 picoseconds.
-		Weight::from_parts(20_598_020, 0)
+		// Minimum execution time: 27_682_000 picoseconds.
+		Weight::from_parts(22_668_590, 0)
 			.saturating_add(Weight::from_parts(0, 1887))
-			// Standard Error: 15_480
-			.saturating_add(Weight::from_parts(30_170_415, 0).saturating_mul(p.into()))
+			// Standard Error: 20_024
+			.saturating_add(Weight::from_parts(32_368_340, 0).saturating_mul(p.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(p.into())))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -156,8 +155,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `115`
 		//  Estimated: `4703`
-		// Minimum execution time: 13_741_000 picoseconds.
-		Weight::from_parts(14_171_000, 0)
+		// Minimum execution time: 17_122_000 picoseconds.
+		Weight::from_parts(17_668_000, 0)
 			.saturating_add(Weight::from_parts(0, 4703))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -180,8 +179,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `287`
 		//  Estimated: `5318`
-		// Minimum execution time: 31_087_000 picoseconds.
-		Weight::from_parts(32_027_000, 0)
+		// Minimum execution time: 37_800_000 picoseconds.
+		Weight::from_parts(38_787_000, 0)
 			.saturating_add(Weight::from_parts(0, 5318))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -194,8 +193,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `206`
 		//  Estimated: `5318`
-		// Minimum execution time: 16_455_000 picoseconds.
-		Weight::from_parts(16_765_000, 0)
+		// Minimum execution time: 20_219_000 picoseconds.
+		Weight::from_parts(20_881_000, 0)
 			.saturating_add(Weight::from_parts(0, 5318))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -206,8 +205,8 @@ impl<T: frame_system::Config> pallet_treasury::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `178`
 		//  Estimated: `5318`
-		// Minimum execution time: 9_785_000 picoseconds.
-		Weight::from_parts(10_135_000, 0)
+		// Minimum execution time: 11_864_000 picoseconds.
+		Weight::from_parts(12_306_000, 0)
 			.saturating_add(Weight::from_parts(0, 5318))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/pallet_utility.rs b/relay/paseo/src/weights/pallet_utility.rs
index 1b54163..37f6144 100644
--- a/relay/paseo/src/weights/pallet_utility.rs
+++ b/relay/paseo/src/weights/pallet_utility.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_utility`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_utility
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -52,18 +51,18 @@ impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_035_000 picoseconds.
-		Weight::from_parts(3_248_775, 0)
+		// Minimum execution time: 4_190_000 picoseconds.
+		Weight::from_parts(4_374_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 1_383
-			.saturating_add(Weight::from_parts(2_319_158, 0).saturating_mul(c.into()))
+			// Standard Error: 727
+			.saturating_add(Weight::from_parts(3_047_577, 0).saturating_mul(c.into()))
 	}
 	fn as_derivative() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_854_000 picoseconds.
-		Weight::from_parts(3_014_000, 0)
+		// Minimum execution time: 3_870_000 picoseconds.
+		Weight::from_parts(4_062_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `c` is `[0, 1000]`.
@@ -71,18 +70,18 @@ impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_104_000 picoseconds.
-		Weight::from_parts(9_665_169, 0)
+		// Minimum execution time: 4_364_000 picoseconds.
+		Weight::from_parts(8_083_696, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 1_933
-			.saturating_add(Weight::from_parts(2_533_829, 0).saturating_mul(c.into()))
+			// Standard Error: 1_317
+			.saturating_add(Weight::from_parts(3_261_490, 0).saturating_mul(c.into()))
 	}
 	fn dispatch_as() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 4_216_000 picoseconds.
-		Weight::from_parts(4_496_000, 0)
+		// Minimum execution time: 5_934_000 picoseconds.
+		Weight::from_parts(6_169_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// The range of component `c` is `[0, 1000]`.
@@ -90,10 +89,10 @@ impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 3_044_000 picoseconds.
-		Weight::from_parts(5_814_788, 0)
+		// Minimum execution time: 4_240_000 picoseconds.
+		Weight::from_parts(5_168_254, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 1_606
-			.saturating_add(Weight::from_parts(2_319_609, 0).saturating_mul(c.into()))
+			// Standard Error: 1_284
+			.saturating_add(Weight::from_parts(3_044_810, 0).saturating_mul(c.into()))
 	}
 }
diff --git a/relay/paseo/src/weights/pallet_vesting.rs b/relay/paseo/src/weights/pallet_vesting.rs
index edcd69c..b647387 100644
--- a/relay/paseo/src/weights/pallet_vesting.rs
+++ b/relay/paseo/src/weights/pallet_vesting.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_vesting`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_vesting
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,15 +56,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 28]`.
 	fn vest_locked(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `382 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `348 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 27_934_000 picoseconds.
-		Weight::from_parts(27_432_635, 0)
+		// Minimum execution time: 30_457_000 picoseconds.
+		Weight::from_parts(30_003_923, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 860
-			.saturating_add(Weight::from_parts(30_253, 0).saturating_mul(l.into()))
-			// Standard Error: 1_530
-			.saturating_add(Weight::from_parts(80_046, 0).saturating_mul(s.into()))
+			// Standard Error: 1_019
+			.saturating_add(Weight::from_parts(35_627, 0).saturating_mul(l.into()))
+			// Standard Error: 1_814
+			.saturating_add(Weight::from_parts(59_288, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -79,15 +78,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 28]`.
 	fn vest_unlocked(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `382 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `348 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 29_464_000 picoseconds.
-		Weight::from_parts(29_588_803, 0)
+		// Minimum execution time: 32_180_000 picoseconds.
+		Weight::from_parts(32_379_213, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_059
-			.saturating_add(Weight::from_parts(22_686, 0).saturating_mul(l.into()))
-			// Standard Error: 1_884
-			.saturating_add(Weight::from_parts(54_808, 0).saturating_mul(s.into()))
+			// Standard Error: 1_306
+			.saturating_add(Weight::from_parts(32_647, 0).saturating_mul(l.into()))
+			// Standard Error: 2_324
+			.saturating_add(Weight::from_parts(57_435, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -103,15 +102,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 28]`.
 	fn vest_other_locked(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `485 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `451 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 29_094_000 picoseconds.
-		Weight::from_parts(28_888_300, 0)
+		// Minimum execution time: 32_045_000 picoseconds.
+		Weight::from_parts(30_913_615, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_180
-			.saturating_add(Weight::from_parts(33_362, 0).saturating_mul(l.into()))
-			// Standard Error: 2_099
-			.saturating_add(Weight::from_parts(68_539, 0).saturating_mul(s.into()))
+			// Standard Error: 1_193
+			.saturating_add(Weight::from_parts(46_337, 0).saturating_mul(l.into()))
+			// Standard Error: 2_123
+			.saturating_add(Weight::from_parts(74_354, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -127,15 +126,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[1, 28]`.
 	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `485 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `451 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 30_437_000 picoseconds.
-		Weight::from_parts(30_488_944, 0)
+		// Minimum execution time: 33_984_000 picoseconds.
+		Weight::from_parts(33_400_020, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_069
-			.saturating_add(Weight::from_parts(30_030, 0).saturating_mul(l.into()))
-			// Standard Error: 1_903
-			.saturating_add(Weight::from_parts(67_747, 0).saturating_mul(s.into()))
+			// Standard Error: 1_140
+			.saturating_add(Weight::from_parts(38_571, 0).saturating_mul(l.into()))
+			// Standard Error: 2_029
+			.saturating_add(Weight::from_parts(72_151, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -151,15 +150,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[0, 27]`.
 	fn vested_transfer(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `556 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `522 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 61_011_000 picoseconds.
-		Weight::from_parts(61_942_798, 0)
+		// Minimum execution time: 63_632_000 picoseconds.
+		Weight::from_parts(64_542_490, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_728
-			.saturating_add(Weight::from_parts(31_801, 0).saturating_mul(l.into()))
-			// Standard Error: 3_076
-			.saturating_add(Weight::from_parts(90_472, 0).saturating_mul(s.into()))
+			// Standard Error: 1_960
+			.saturating_add(Weight::from_parts(40_280, 0).saturating_mul(l.into()))
+			// Standard Error: 3_488
+			.saturating_add(Weight::from_parts(86_697, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -175,15 +174,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[0, 27]`.
 	fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `659 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `625 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `6196`
-		// Minimum execution time: 61_893_000 picoseconds.
-		Weight::from_parts(63_190_970, 0)
+		// Minimum execution time: 65_338_000 picoseconds.
+		Weight::from_parts(66_120_449, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			// Standard Error: 2_003
-			.saturating_add(Weight::from_parts(42_318, 0).saturating_mul(l.into()))
-			// Standard Error: 3_563
-			.saturating_add(Weight::from_parts(91_029, 0).saturating_mul(s.into()))
+			.saturating_add(Weight::from_parts(45_256, 0).saturating_mul(l.into()))
+			// Standard Error: 3_565
+			.saturating_add(Weight::from_parts(88_738, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
@@ -199,15 +198,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[2, 28]`.
 	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `483 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `449 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 29_404_000 picoseconds.
-		Weight::from_parts(29_101_916, 0)
+		// Minimum execution time: 32_789_000 picoseconds.
+		Weight::from_parts(32_683_094, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_620
-			.saturating_add(Weight::from_parts(38_935, 0).saturating_mul(l.into()))
-			// Standard Error: 2_993
-			.saturating_add(Weight::from_parts(75_053, 0).saturating_mul(s.into()))
+			// Standard Error: 1_395
+			.saturating_add(Weight::from_parts(28_000, 0).saturating_mul(l.into()))
+			// Standard Error: 2_577
+			.saturating_add(Weight::from_parts(69_301, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -223,15 +222,15 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// The range of component `s` is `[2, 28]`.
 	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `483 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `449 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 31_247_000 picoseconds.
-		Weight::from_parts(30_904_084, 0)
+		// Minimum execution time: 35_364_000 picoseconds.
+		Weight::from_parts(34_412_189, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 1_900
-			.saturating_add(Weight::from_parts(31_869, 0).saturating_mul(l.into()))
-			// Standard Error: 3_510
-			.saturating_add(Weight::from_parts(84_142, 0).saturating_mul(s.into()))
+			// Standard Error: 983
+			.saturating_add(Weight::from_parts(41_189, 0).saturating_mul(l.into()))
+			// Standard Error: 1_815
+			.saturating_add(Weight::from_parts(75_023, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -245,15 +244,17 @@ impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	/// The range of component `l` is `[0, 49]`.
 	/// The range of component `s` is `[2, 28]`.
-	fn force_remove_vesting_schedule(_l: u32, s: u32, ) -> Weight {
+	fn force_remove_vesting_schedule(l: u32, s: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `556 + l * (25 ±0) + s * (36 ±0)`
+		//  Measured:  `522 + l * (25 ±0) + s * (36 ±0)`
 		//  Estimated: `4764`
-		// Minimum execution time: 32_529_000 picoseconds.
-		Weight::from_parts(35_331_981, 0)
+		// Minimum execution time: 36_296_000 picoseconds.
+		Weight::from_parts(35_378_690, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
-			// Standard Error: 7_849
-			.saturating_add(Weight::from_parts(43_621, 0).saturating_mul(s.into()))
+			// Standard Error: 1_381
+			.saturating_add(Weight::from_parts(43_058, 0).saturating_mul(l.into()))
+			// Standard Error: 2_551
+			.saturating_add(Weight::from_parts(92_179, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
diff --git a/relay/paseo/src/weights/pallet_whitelist.rs b/relay/paseo/src/weights/pallet_whitelist.rs
index 72391e4..e7b77b2 100644
--- a/relay/paseo/src/weights/pallet_whitelist.rs
+++ b/relay/paseo/src/weights/pallet_whitelist.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_whitelist`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_whitelist
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,8 +56,8 @@ impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `118`
 		//  Estimated: `3556`
-		// Minimum execution time: 13_111_000 picoseconds.
-		Weight::from_parts(13_891_000, 0)
+		// Minimum execution time: 15_543_000 picoseconds.
+		Weight::from_parts(16_305_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -73,8 +72,8 @@ impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `247`
 		//  Estimated: `3556`
-		// Minimum execution time: 13_351_000 picoseconds.
-		Weight::from_parts(14_231_000, 0)
+		// Minimum execution time: 15_172_000 picoseconds.
+		Weight::from_parts(15_806_000, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -92,11 +91,11 @@ impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `323 + n * (1 ±0)`
 		//  Estimated: `3787 + n * (1 ±0)`
-		// Minimum execution time: 22_053_000 picoseconds.
-		Weight::from_parts(22_313_000, 0)
+		// Minimum execution time: 25_100_000 picoseconds.
+		Weight::from_parts(25_253_000, 0)
 			.saturating_add(Weight::from_parts(0, 3787))
-			// Standard Error: 4
-			.saturating_add(Weight::from_parts(696, 0).saturating_mul(n.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(1_212, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
@@ -112,11 +111,11 @@ impl<T: frame_system::Config> pallet_whitelist::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `247`
 		//  Estimated: `3556`
-		// Minimum execution time: 15_955_000 picoseconds.
-		Weight::from_parts(16_549_294, 0)
+		// Minimum execution time: 18_677_000 picoseconds.
+		Weight::from_parts(19_237_053, 0)
 			.saturating_add(Weight::from_parts(0, 3556))
-			// Standard Error: 2
-			.saturating_add(Weight::from_parts(1_201, 0).saturating_mul(n.into()))
+			// Standard Error: 3
+			.saturating_add(Weight::from_parts(1_420, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
diff --git a/relay/paseo/src/weights/pallet_xcm.rs b/relay/paseo/src/weights/pallet_xcm.rs
index 8b9e343..ac7a8eb 100644
--- a/relay/paseo/src/weights/pallet_xcm.rs
+++ b/relay/paseo/src/weights/pallet_xcm.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_xcm`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_xcm
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,11 +56,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn send() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
-		//  Estimated: `3574`
-		// Minimum execution time: 19_259_000 picoseconds.
-		Weight::from_parts(19_929_000, 0)
-			.saturating_add(Weight::from_parts(0, 3574))
+		//  Measured:  `76`
+		//  Estimated: `3541`
+		// Minimum execution time: 23_939_000 picoseconds.
+		Weight::from_parts(24_804_000, 0)
+			.saturating_add(Weight::from_parts(0, 3541))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -77,10 +76,10 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn teleport_assets() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
+		//  Measured:  `76`
 		//  Estimated: `3593`
-		// Minimum execution time: 97_287_000 picoseconds.
-		Weight::from_parts(99_220_000, 0)
+		// Minimum execution time: 105_483_000 picoseconds.
+		Weight::from_parts(109_412_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -97,11 +96,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn reserve_transfer_assets() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `161`
-		//  Estimated: `3626`
-		// Minimum execution time: 94_973_000 picoseconds.
-		Weight::from_parts(98_248_000, 0)
-			.saturating_add(Weight::from_parts(0, 3626))
+		//  Measured:  `128`
+		//  Estimated: `3593`
+		// Minimum execution time: 102_331_000 picoseconds.
+		Weight::from_parts(105_076_000, 0)
+			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -117,10 +116,10 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn transfer_assets() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
+		//  Measured:  `76`
 		//  Estimated: `3593`
-		// Minimum execution time: 99_520_000 picoseconds.
-		Weight::from_parts(101_903_000, 0)
+		// Minimum execution time: 107_526_000 picoseconds.
+		Weight::from_parts(110_724_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -141,8 +140,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 5_268_000 picoseconds.
-		Weight::from_parts(5_418_000, 0)
+		// Minimum execution time: 6_811_000 picoseconds.
+		Weight::from_parts(7_150_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -150,8 +149,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_512_000 picoseconds.
-		Weight::from_parts(1_593_000, 0)
+		// Minimum execution time: 1_862_000 picoseconds.
+		Weight::from_parts(2_001_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `XcmPallet::VersionNotifiers` (r:1 w:1)
@@ -170,11 +169,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn force_subscribe_version_notify() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
-		//  Estimated: `3574`
-		// Minimum execution time: 23_856_000 picoseconds.
-		Weight::from_parts(24_578_000, 0)
-			.saturating_add(Weight::from_parts(0, 3574))
+		//  Measured:  `76`
+		//  Estimated: `3541`
+		// Minimum execution time: 29_672_000 picoseconds.
+		Weight::from_parts(30_201_000, 0)
+			.saturating_add(Weight::from_parts(0, 3541))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(5))
 	}
@@ -192,11 +191,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn force_unsubscribe_version_notify() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `289`
-		//  Estimated: `3754`
-		// Minimum execution time: 28_734_000 picoseconds.
-		Weight::from_parts(30_145_000, 0)
-			.saturating_add(Weight::from_parts(0, 3754))
+		//  Measured:  `256`
+		//  Estimated: `3721`
+		// Minimum execution time: 35_212_000 picoseconds.
+		Weight::from_parts(36_585_000, 0)
+			.saturating_add(Weight::from_parts(0, 3721))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
@@ -206,8 +205,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_452_000 picoseconds.
-		Weight::from_parts(1_552_000, 0)
+		// Minimum execution time: 1_873_000 picoseconds.
+		Weight::from_parts(2_053_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -217,8 +216,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `22`
 		//  Estimated: `13387`
-		// Minimum execution time: 14_982_000 picoseconds.
-		Weight::from_parts(15_415_000, 0)
+		// Minimum execution time: 16_018_000 picoseconds.
+		Weight::from_parts(16_715_000, 0)
 			.saturating_add(Weight::from_parts(0, 13387))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -229,8 +228,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `26`
 		//  Estimated: `13391`
-		// Minimum execution time: 14_682_000 picoseconds.
-		Weight::from_parts(15_274_000, 0)
+		// Minimum execution time: 16_097_000 picoseconds.
+		Weight::from_parts(16_593_000, 0)
 			.saturating_add(Weight::from_parts(0, 13391))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -241,8 +240,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `40`
 		//  Estimated: `15880`
-		// Minimum execution time: 17_827_000 picoseconds.
-		Weight::from_parts(18_157_000, 0)
+		// Minimum execution time: 18_387_000 picoseconds.
+		Weight::from_parts(19_014_000, 0)
 			.saturating_add(Weight::from_parts(0, 15880))
 			.saturating_add(T::DbWeight::get().reads(6))
 	}
@@ -258,11 +257,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn notify_current_targets() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `145`
-		//  Estimated: `6085`
-		// Minimum execution time: 24_256_000 picoseconds.
-		Weight::from_parts(25_057_000, 0)
-			.saturating_add(Weight::from_parts(0, 6085))
+		//  Measured:  `112`
+		//  Estimated: `6052`
+		// Minimum execution time: 29_105_000 picoseconds.
+		Weight::from_parts(29_638_000, 0)
+			.saturating_add(Weight::from_parts(0, 6052))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -272,8 +271,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `69`
 		//  Estimated: `10959`
-		// Minimum execution time: 11_578_000 picoseconds.
-		Weight::from_parts(11_998_000, 0)
+		// Minimum execution time: 11_734_000 picoseconds.
+		Weight::from_parts(12_307_000, 0)
 			.saturating_add(Weight::from_parts(0, 10959))
 			.saturating_add(T::DbWeight::get().reads(4))
 	}
@@ -283,8 +282,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `33`
 		//  Estimated: `13398`
-		// Minimum execution time: 15_543_000 picoseconds.
-		Weight::from_parts(16_074_000, 0)
+		// Minimum execution time: 16_801_000 picoseconds.
+		Weight::from_parts(17_073_000, 0)
 			.saturating_add(Weight::from_parts(0, 13398))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -301,11 +300,11 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn migrate_and_notify_old_targets() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `145`
-		//  Estimated: `13510`
-		// Minimum execution time: 32_930_000 picoseconds.
-		Weight::from_parts(33_840_000, 0)
-			.saturating_add(Weight::from_parts(0, 13510))
+		//  Measured:  `112`
+		//  Estimated: `13477`
+		// Minimum execution time: 38_223_000 picoseconds.
+		Weight::from_parts(38_972_000, 0)
+			.saturating_add(Weight::from_parts(0, 13477))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
@@ -317,8 +316,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `1485`
-		// Minimum execution time: 1_773_000 picoseconds.
-		Weight::from_parts(1_903_000, 0)
+		// Minimum execution time: 2_002_000 picoseconds.
+		Weight::from_parts(2_227_000, 0)
 			.saturating_add(Weight::from_parts(0, 1485))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -329,8 +328,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `7576`
 		//  Estimated: `11041`
-		// Minimum execution time: 23_456_000 picoseconds.
-		Weight::from_parts(23_875_000, 0)
+		// Minimum execution time: 21_458_000 picoseconds.
+		Weight::from_parts(22_190_000, 0)
 			.saturating_add(Weight::from_parts(0, 11041))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -341,8 +340,8 @@ impl<T: frame_system::Config> pallet_xcm::WeightInfo for WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `23`
 		//  Estimated: `3488`
-		// Minimum execution time: 27_851_000 picoseconds.
-		Weight::from_parts(28_733_000, 0)
+		// Minimum execution time: 33_783_000 picoseconds.
+		Weight::from_parts(34_291_000, 0)
 			.saturating_add(Weight::from_parts(0, 3488))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/runtime_common_auctions.rs b/relay/paseo/src/weights/runtime_common_auctions.rs
index fdd1bf0..fe653e9 100644
--- a/relay/paseo/src/weights/runtime_common_auctions.rs
+++ b/relay/paseo/src/weights/runtime_common_auctions.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `polkadot_runtime_common::auctions`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=polkadot_runtime_common::auctions
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -55,8 +54,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::auctions::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `4`
 		//  Estimated: `1493`
-		// Minimum execution time: 5_909_000 picoseconds.
-		Weight::from_parts(6_221_000, 0)
+		// Minimum execution time: 7_458_000 picoseconds.
+		Weight::from_parts(7_787_000, 0)
 			.saturating_add(Weight::from_parts(0, 1493))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -77,10 +76,10 @@ impl<T: frame_system::Config> polkadot_runtime_common::auctions::WeightInfo for
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	fn bid() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `729`
+		//  Measured:  `695`
 		//  Estimated: `6060`
-		// Minimum execution time: 64_206_000 picoseconds.
-		Weight::from_parts(72_609_000, 0)
+		// Minimum execution time: 70_772_000 picoseconds.
+		Weight::from_parts(75_661_000, 0)
 			.saturating_add(Weight::from_parts(0, 6060))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -99,7 +98,7 @@ impl<T: frame_system::Config> polkadot_runtime_common::auctions::WeightInfo for
 	/// Proof: `Auctions::ReservedAmounts` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
 	/// Storage: `System::Account` (r:36 w:36)
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
-	/// Storage: `Slots::Leases` (r:6 w:6)
+	/// Storage: `Slots::Leases` (r:7 w:7)
 	/// Proof: `Slots::Leases` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	/// Storage: `Paras::ParaLifecycles` (r:1 w:1)
 	/// Proof: `Paras::ParaLifecycles` (`max_values`: None, `max_size`: None, mode: `Measured`)
@@ -109,13 +108,13 @@ impl<T: frame_system::Config> polkadot_runtime_common::auctions::WeightInfo for
 	/// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn on_initialize() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `6946989`
+		//  Measured:  `6946955`
 		//  Estimated: `15822990`
-		// Minimum execution time: 5_957_020_000 picoseconds.
-		Weight::from_parts(6_021_296_000, 0)
+		// Minimum execution time: 6_948_283_000 picoseconds.
+		Weight::from_parts(7_035_598_000, 0)
 			.saturating_add(Weight::from_parts(0, 15822990))
-			.saturating_add(T::DbWeight::get().reads(3686))
-			.saturating_add(T::DbWeight::get().writes(3681))
+			.saturating_add(T::DbWeight::get().reads(3687))
+			.saturating_add(T::DbWeight::get().writes(3682))
 	}
 	/// Storage: `Auctions::ReservedAmounts` (r:37 w:36)
 	/// Proof: `Auctions::ReservedAmounts` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
@@ -129,8 +128,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::auctions::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `177732`
 		//  Estimated: `15822990`
-		// Minimum execution time: 4_560_896_000 picoseconds.
-		Weight::from_parts(4_683_861_000, 0)
+		// Minimum execution time: 5_341_439_000 picoseconds.
+		Weight::from_parts(5_525_245_000, 0)
 			.saturating_add(Weight::from_parts(0, 15822990))
 			.saturating_add(T::DbWeight::get().reads(3673))
 			.saturating_add(T::DbWeight::get().writes(3673))
diff --git a/relay/paseo/src/weights/runtime_common_claims.rs b/relay/paseo/src/weights/runtime_common_claims.rs
index cbeb54e..6a79828 100644
--- a/relay/paseo/src/weights/runtime_common_claims.rs
+++ b/relay/paseo/src/weights/runtime_common_claims.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `polkadot_runtime_common::claims`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=polkadot_runtime_common::claims
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -65,10 +64,10 @@ impl<T: frame_system::Config> polkadot_runtime_common::claims::WeightInfo for We
 	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
 	fn claim() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `612`
+		//  Measured:  `578`
 		//  Estimated: `4764`
-		// Minimum execution time: 163_949_000 picoseconds.
-		Weight::from_parts(173_452_000, 0)
+		// Minimum execution time: 180_418_000 picoseconds.
+		Weight::from_parts(185_081_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -85,8 +84,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::claims::WeightInfo for We
 		// Proof Size summary in bytes:
 		//  Measured:  `182`
 		//  Estimated: `1667`
-		// Minimum execution time: 10_506_000 picoseconds.
-		Weight::from_parts(11_518_000, 0)
+		// Minimum execution time: 12_513_000 picoseconds.
+		Weight::from_parts(13_303_000, 0)
 			.saturating_add(Weight::from_parts(0, 1667))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -109,10 +108,10 @@ impl<T: frame_system::Config> polkadot_runtime_common::claims::WeightInfo for We
 	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
 	fn claim_attest() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `612`
+		//  Measured:  `578`
 		//  Estimated: `4764`
-		// Minimum execution time: 168_364_000 picoseconds.
-		Weight::from_parts(182_455_000, 0)
+		// Minimum execution time: 173_579_000 picoseconds.
+		Weight::from_parts(185_432_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(6))
@@ -137,10 +136,10 @@ impl<T: frame_system::Config> polkadot_runtime_common::claims::WeightInfo for We
 	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
 	fn attest() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `686`
+		//  Measured:  `652`
 		//  Estimated: `4764`
-		// Minimum execution time: 74_192_000 picoseconds.
-		Weight::from_parts(77_837_000, 0)
+		// Minimum execution time: 76_235_000 picoseconds.
+		Weight::from_parts(83_315_000, 0)
 			.saturating_add(Weight::from_parts(0, 4764))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(7))
@@ -157,8 +156,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::claims::WeightInfo for We
 		// Proof Size summary in bytes:
 		//  Measured:  `406`
 		//  Estimated: `3871`
-		// Minimum execution time: 29_464_000 picoseconds.
-		Weight::from_parts(34_152_000, 0)
+		// Minimum execution time: 29_916_000 picoseconds.
+		Weight::from_parts(33_642_000, 0)
 			.saturating_add(Weight::from_parts(0, 3871))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(7))
diff --git a/relay/paseo/src/weights/runtime_common_crowdloan.rs b/relay/paseo/src/weights/runtime_common_crowdloan.rs
index 8c05269..6dea796 100644
--- a/relay/paseo/src/weights/runtime_common_crowdloan.rs
+++ b/relay/paseo/src/weights/runtime_common_crowdloan.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `polkadot_runtime_common::crowdloan`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=polkadot_runtime_common::crowdloan
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -61,8 +60,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `438`
 		//  Estimated: `3903`
-		// Minimum execution time: 42_984_000 picoseconds.
-		Weight::from_parts(45_639_000, 0)
+		// Minimum execution time: 45_563_000 picoseconds.
+		Weight::from_parts(47_336_000, 0)
 			.saturating_add(Weight::from_parts(0, 3903))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -83,11 +82,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 	/// Proof: UNKNOWN KEY `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
 	fn contribute() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `531`
-		//  Estimated: `3996`
-		// Minimum execution time: 106_460_000 picoseconds.
-		Weight::from_parts(110_586_000, 0)
-			.saturating_add(Weight::from_parts(0, 3996))
+		//  Measured:  `498`
+		//  Estimated: `3963`
+		// Minimum execution time: 130_830_000 picoseconds.
+		Weight::from_parts(136_431_000, 0)
+			.saturating_add(Weight::from_parts(0, 3963))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(4))
 	}
@@ -101,8 +100,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `688`
 		//  Estimated: `6196`
-		// Minimum execution time: 68_042_000 picoseconds.
-		Weight::from_parts(70_977_000, 0)
+		// Minimum execution time: 71_018_000 picoseconds.
+		Weight::from_parts(75_765_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -114,11 +113,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `126 + k * (189 ±0)`
 		//  Estimated: `139 + k * (189 ±0)`
-		// Minimum execution time: 55_643_000 picoseconds.
-		Weight::from_parts(61_864_000, 0)
+		// Minimum execution time: 49_261_000 picoseconds.
+		Weight::from_parts(50_392_000, 0)
 			.saturating_add(Weight::from_parts(0, 139))
-			// Standard Error: 19_440
-			.saturating_add(Weight::from_parts(39_167_656, 0).saturating_mul(k.into()))
+			// Standard Error: 20_583
+			.saturating_add(Weight::from_parts(38_956_828, 0).saturating_mul(k.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(k.into())))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -133,8 +132,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `515`
 		//  Estimated: `6196`
-		// Minimum execution time: 34_842_000 picoseconds.
-		Weight::from_parts(36_385_000, 0)
+		// Minimum execution time: 40_953_000 picoseconds.
+		Weight::from_parts(42_919_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -145,8 +144,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `235`
 		//  Estimated: `3700`
-		// Minimum execution time: 13_771_000 picoseconds.
-		Weight::from_parts(14_952_000, 0)
+		// Minimum execution time: 16_052_000 picoseconds.
+		Weight::from_parts(18_047_000, 0)
 			.saturating_add(Weight::from_parts(0, 3700))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -159,8 +158,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `413`
 		//  Estimated: `3878`
-		// Minimum execution time: 23_406_000 picoseconds.
-		Weight::from_parts(24_658_000, 0)
+		// Minimum execution time: 29_747_000 picoseconds.
+		Weight::from_parts(32_387_000, 0)
 			.saturating_add(Weight::from_parts(0, 3878))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -173,8 +172,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `239`
 		//  Estimated: `3704`
-		// Minimum execution time: 13_350_000 picoseconds.
-		Weight::from_parts(14_742_000, 0)
+		// Minimum execution time: 20_860_000 picoseconds.
+		Weight::from_parts(22_016_000, 0)
 			.saturating_add(Weight::from_parts(0, 3704))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -202,13 +201,13 @@ impl<T: frame_system::Config> polkadot_runtime_common::crowdloan::WeightInfo for
 	/// The range of component `n` is `[2, 100]`.
 	fn on_initialize(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `198 + n * (356 ±0)`
+		//  Measured:  `164 + n * (356 ±0)`
 		//  Estimated: `5385 + n * (2832 ±0)`
-		// Minimum execution time: 104_959_000 picoseconds.
-		Weight::from_parts(105_930_000, 0)
+		// Minimum execution time: 116_218_000 picoseconds.
+		Weight::from_parts(118_983_000, 0)
 			.saturating_add(Weight::from_parts(0, 5385))
-			// Standard Error: 48_534
-			.saturating_add(Weight::from_parts(50_104_989, 0).saturating_mul(n.into()))
+			// Standard Error: 51_433
+			.saturating_add(Weight::from_parts(51_500_825, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(n.into())))
 			.saturating_add(T::DbWeight::get().writes(3))
diff --git a/relay/paseo/src/weights/runtime_common_paras_registrar.rs b/relay/paseo/src/weights/runtime_common_paras_registrar.rs
index 9448103..8b8bcaf 100644
--- a/relay/paseo/src/weights/runtime_common_paras_registrar.rs
+++ b/relay/paseo/src/weights/runtime_common_paras_registrar.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `polkadot_runtime_common::paras_registrar`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=polkadot_runtime_common::paras_registrar
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,8 +56,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `97`
 		//  Estimated: `3562`
-		// Minimum execution time: 21_693_000 picoseconds.
-		Weight::from_parts(22_554_000, 0)
+		// Minimum execution time: 24_026_000 picoseconds.
+		Weight::from_parts(24_775_000, 0)
 			.saturating_add(Weight::from_parts(0, 3562))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -85,8 +84,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `390`
 		//  Estimated: `3855`
-		// Minimum execution time: 4_903_331_000 picoseconds.
-		Weight::from_parts(5_056_652_000, 0)
+		// Minimum execution time: 6_967_494_000 picoseconds.
+		Weight::from_parts(7_116_058_000, 0)
 			.saturating_add(Weight::from_parts(0, 3855))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(8))
@@ -113,8 +112,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `307`
 		//  Estimated: `3772`
-		// Minimum execution time: 4_934_589_000 picoseconds.
-		Weight::from_parts(5_029_864_000, 0)
+		// Minimum execution time: 7_017_312_000 picoseconds.
+		Weight::from_parts(7_143_238_000, 0)
 			.saturating_add(Weight::from_parts(0, 3772))
 			.saturating_add(T::DbWeight::get().reads(7))
 			.saturating_add(T::DbWeight::get().writes(8))
@@ -137,8 +136,8 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `504`
 		//  Estimated: `3969`
-		// Minimum execution time: 44_356_000 picoseconds.
-		Weight::from_parts(47_072_000, 0)
+		// Minimum execution time: 49_900_000 picoseconds.
+		Weight::from_parts(51_920_000, 0)
 			.saturating_add(Weight::from_parts(0, 3969))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -159,11 +158,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 	/// Proof: `Slots::Leases` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn swap() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `808`
-		//  Estimated: `6748`
-		// Minimum execution time: 51_057_000 picoseconds.
-		Weight::from_parts(55_293_000, 0)
-			.saturating_add(Weight::from_parts(0, 6748))
+		//  Measured:  `775`
+		//  Estimated: `6715`
+		// Minimum execution time: 56_388_000 picoseconds.
+		Weight::from_parts(64_340_000, 0)
+			.saturating_add(Weight::from_parts(0, 6715))
 			.saturating_add(T::DbWeight::get().reads(10))
 			.saturating_add(T::DbWeight::get().writes(8))
 	}
@@ -190,11 +189,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `238`
 		//  Estimated: `3703`
-		// Minimum execution time: 27_230_000 picoseconds.
-		Weight::from_parts(29_315_972, 0)
+		// Minimum execution time: 32_256_000 picoseconds.
+		Weight::from_parts(327_073_327, 0)
 			.saturating_add(Weight::from_parts(0, 3703))
-			// Standard Error: 4
-			.saturating_add(Weight::from_parts(2_115, 0).saturating_mul(b.into()))
+			// Standard Error: 12
+			.saturating_add(Weight::from_parts(1_801, 0).saturating_mul(b.into()))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
@@ -205,11 +204,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::paras_registrar::WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 4_416_000 picoseconds.
-		Weight::from_parts(24_052_864, 0)
+		// Minimum execution time: 6_079_000 picoseconds.
+		Weight::from_parts(6_662_462, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(821, 0).saturating_mul(b.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(924, 0).saturating_mul(b.into()))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
 }
diff --git a/relay/paseo/src/weights/runtime_common_slots.rs b/relay/paseo/src/weights/runtime_common_slots.rs
index b2609c3..e9bcadd 100644
--- a/relay/paseo/src/weights/runtime_common_slots.rs
+++ b/relay/paseo/src/weights/runtime_common_slots.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `polkadot_runtime_common::slots`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=polkadot_runtime_common::slots
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,11 +52,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::slots::WeightInfo for Wei
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	fn force_lease() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `287`
-		//  Estimated: `3752`
-		// Minimum execution time: 23_786_000 picoseconds.
-		Weight::from_parts(24_847_000, 0)
-			.saturating_add(Weight::from_parts(0, 3752))
+		//  Measured:  `254`
+		//  Estimated: `3719`
+		// Minimum execution time: 25_946_000 picoseconds.
+		Weight::from_parts(26_840_000, 0)
+			.saturating_add(Weight::from_parts(0, 3719))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
@@ -75,15 +74,15 @@ impl<T: frame_system::Config> polkadot_runtime_common::slots::WeightInfo for Wei
 	/// The range of component `t` is `[0, 100]`.
 	fn manage_lease_period_start(c: u32, t: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `590 + c * (20 ±0) + t * (234 ±0)`
-		//  Estimated: `4061 + c * (2496 ±0) + t * (2709 ±0)`
-		// Minimum execution time: 692_925_000 picoseconds.
-		Weight::from_parts(700_526_000, 0)
-			.saturating_add(Weight::from_parts(0, 4061))
-			// Standard Error: 83_622
-			.saturating_add(Weight::from_parts(2_650_786, 0).saturating_mul(c.into()))
-			// Standard Error: 83_622
-			.saturating_add(Weight::from_parts(8_255_172, 0).saturating_mul(t.into()))
+		//  Measured:  `557 + c * (20 ±0) + t * (234 ±0)`
+		//  Estimated: `4028 + c * (2496 ±0) + t * (2709 ±0)`
+		// Minimum execution time: 700_627_000 picoseconds.
+		Weight::from_parts(715_807_000, 0)
+			.saturating_add(Weight::from_parts(0, 4028))
+			// Standard Error: 86_693
+			.saturating_add(Weight::from_parts(2_755_379, 0).saturating_mul(c.into()))
+			// Standard Error: 86_693
+			.saturating_add(Weight::from_parts(8_684_523, 0).saturating_mul(t.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
 			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(t.into())))
@@ -99,10 +98,10 @@ impl<T: frame_system::Config> polkadot_runtime_common::slots::WeightInfo for Wei
 	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
 	fn clear_all_leases() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `2759`
+		//  Measured:  `2726`
 		//  Estimated: `21814`
-		// Minimum execution time: 112_580_000 picoseconds.
-		Weight::from_parts(113_972_000, 0)
+		// Minimum execution time: 120_009_000 picoseconds.
+		Weight::from_parts(124_741_000, 0)
 			.saturating_add(Weight::from_parts(0, 21814))
 			.saturating_add(T::DbWeight::get().reads(9))
 			.saturating_add(T::DbWeight::get().writes(9))
@@ -117,11 +116,11 @@ impl<T: frame_system::Config> polkadot_runtime_common::slots::WeightInfo for Wei
 	/// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn trigger_onboard() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `583`
-		//  Estimated: `4048`
-		// Minimum execution time: 20_802_000 picoseconds.
-		Weight::from_parts(21_532_000, 0)
-			.saturating_add(Weight::from_parts(0, 4048))
+		//  Measured:  `550`
+		//  Estimated: `4015`
+		// Minimum execution time: 22_626_000 picoseconds.
+		Weight::from_parts(24_573_000, 0)
+			.saturating_add(Weight::from_parts(0, 4015))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(2))
 	}
diff --git a/relay/paseo/src/weights/runtime_parachains_configuration.rs b/relay/paseo/src/weights/runtime_parachains_configuration.rs
index e02dd5e..4a11ee8 100644
--- a/relay/paseo/src/weights/runtime_parachains_configuration.rs
+++ b/relay/paseo/src/weights/runtime_parachains_configuration.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::configuration`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::configuration
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -57,8 +56,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 6_359_000 picoseconds.
-		Weight::from_parts(6_550_000, 0)
+		// Minimum execution time: 7_391_000 picoseconds.
+		Weight::from_parts(7_759_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -73,8 +72,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 6_299_000 picoseconds.
-		Weight::from_parts(6_700_000, 0)
+		// Minimum execution time: 7_403_000 picoseconds.
+		Weight::from_parts(7_686_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -89,8 +88,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 6_430_000 picoseconds.
-		Weight::from_parts(6_690_000, 0)
+		// Minimum execution time: 7_334_000 picoseconds.
+		Weight::from_parts(7_774_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -115,8 +114,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 6_410_000 picoseconds.
-		Weight::from_parts(6_741_000, 0)
+		// Minimum execution time: 7_293_000 picoseconds.
+		Weight::from_parts(7_627_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -131,8 +130,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 7_681_000 picoseconds.
-		Weight::from_parts(8_272_000, 0)
+		// Minimum execution time: 9_252_000 picoseconds.
+		Weight::from_parts(9_537_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -147,8 +146,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 6_250_000 picoseconds.
-		Weight::from_parts(6_600_000, 0)
+		// Minimum execution time: 7_302_000 picoseconds.
+		Weight::from_parts(7_587_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -163,8 +162,8 @@ impl<T: frame_system::Config> runtime_parachains::configuration::WeightInfo for
 		// Proof Size summary in bytes:
 		//  Measured:  `155`
 		//  Estimated: `1640`
-		// Minimum execution time: 7_923_000 picoseconds.
-		Weight::from_parts(8_273_000, 0)
+		// Minimum execution time: 9_520_000 picoseconds.
+		Weight::from_parts(9_866_000, 0)
 			.saturating_add(Weight::from_parts(0, 1640))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/runtime_parachains_disputes.rs b/relay/paseo/src/weights/runtime_parachains_disputes.rs
index 6beb14d..d7c2bc4 100644
--- a/relay/paseo/src/weights/runtime_parachains_disputes.rs
+++ b/relay/paseo/src/weights/runtime_parachains_disputes.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::disputes`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::disputes
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> runtime_parachains::disputes::WeightInfo for Weigh
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_542_000 picoseconds.
-		Weight::from_parts(1_803_000, 0)
+		// Minimum execution time: 1_931_000 picoseconds.
+		Weight::from_parts(2_089_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
diff --git a/relay/paseo/src/weights/runtime_parachains_disputes_slashing.rs b/relay/paseo/src/weights/runtime_parachains_disputes_slashing.rs
index bf06a6e..815ffe9 100644
--- a/relay/paseo/src/weights/runtime_parachains_disputes_slashing.rs
+++ b/relay/paseo/src/weights/runtime_parachains_disputes_slashing.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::disputes::slashing`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::disputes::slashing
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -96,13 +95,13 @@ impl<T: frame_system::Config> runtime_parachains::disputes::slashing::WeightInfo
 	/// The range of component `n` is `[4, 1000]`.
 	fn report_dispute_lost(n: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `5612 + n * (220 ±0)`
-		//  Estimated: `8881 + n * (350 ±0)`
-		// Minimum execution time: 69_174_000 picoseconds.
-		Weight::from_parts(149_821_901, 0)
-			.saturating_add(Weight::from_parts(0, 8881))
-			// Standard Error: 2_510
-			.saturating_add(Weight::from_parts(144_562, 0).saturating_mul(n.into()))
+		//  Measured:  `5578 + n * (220 ±0)`
+		//  Estimated: `8877 + n * (350 ±0)`
+		// Minimum execution time: 78_696_000 picoseconds.
+		Weight::from_parts(158_454_472, 0)
+			.saturating_add(Weight::from_parts(0, 8877))
+			// Standard Error: 2_479
+			.saturating_add(Weight::from_parts(187_148, 0).saturating_mul(n.into()))
 			.saturating_add(T::DbWeight::get().reads(23))
 			.saturating_add(T::DbWeight::get().writes(15))
 			.saturating_add(Weight::from_parts(0, 350).saturating_mul(n.into()))
diff --git a/relay/paseo/src/weights/runtime_parachains_hrmp.rs b/relay/paseo/src/weights/runtime_parachains_hrmp.rs
index c1ba1b1..1f5b4b2 100644
--- a/relay/paseo/src/weights/runtime_parachains_hrmp.rs
+++ b/relay/paseo/src/weights/runtime_parachains_hrmp.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::hrmp`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-05-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::hrmp
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -67,8 +66,8 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `417`
 		//  Estimated: `3882`
-		// Minimum execution time: 26_110_000 picoseconds.
-		Weight::from_parts(26_611_000, 0)
+		// Minimum execution time: 38_921_000 picoseconds.
+		Weight::from_parts(40_100_000, 0)
 			.saturating_add(Weight::from_parts(0, 3882))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(5))
@@ -87,8 +86,8 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `407`
 		//  Estimated: `3872`
-		// Minimum execution time: 24_366_000 picoseconds.
-		Weight::from_parts(25_209_000, 0)
+		// Minimum execution time: 37_190_000 picoseconds.
+		Weight::from_parts(38_030_000, 0)
 			.saturating_add(Weight::from_parts(0, 3872))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -107,8 +106,8 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `520`
 		//  Estimated: `3985`
-		// Minimum execution time: 25_609_000 picoseconds.
-		Weight::from_parts(26_730_000, 0)
+		// Minimum execution time: 38_180_000 picoseconds.
+		Weight::from_parts(38_790_000, 0)
 			.saturating_add(Weight::from_parts(0, 3985))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -131,13 +130,13 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `264 + e * (100 ±0) + i * (100 ±0)`
 		//  Estimated: `3726 + e * (2575 ±0) + i * (2575 ±0)`
-		// Minimum execution time: 1_120_120_000 picoseconds.
-		Weight::from_parts(1_128_992_000, 0)
+		// Minimum execution time: 1_415_467_000 picoseconds.
+		Weight::from_parts(1_423_927_000, 0)
 			.saturating_add(Weight::from_parts(0, 3726))
-			// Standard Error: 102_223
-			.saturating_add(Weight::from_parts(3_349_004, 0).saturating_mul(i.into()))
-			// Standard Error: 102_223
-			.saturating_add(Weight::from_parts(3_354_888, 0).saturating_mul(e.into()))
+			// Standard Error: 134_402
+			.saturating_add(Weight::from_parts(4_225_111, 0).saturating_mul(i.into()))
+			// Standard Error: 134_402
+			.saturating_add(Weight::from_parts(4_308_273, 0).saturating_mul(e.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
 			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(e.into())))
@@ -168,11 +167,11 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `492 + c * (136 ±0)`
 		//  Estimated: `1947 + c * (5086 ±0)`
-		// Minimum execution time: 5_077_000 picoseconds.
-		Weight::from_parts(5_248_000, 0)
+		// Minimum execution time: 7_460_000 picoseconds.
+		Weight::from_parts(7_710_000, 0)
 			.saturating_add(Weight::from_parts(0, 1947))
-			// Standard Error: 9_182
-			.saturating_add(Weight::from_parts(19_548_836, 0).saturating_mul(c.into()))
+			// Standard Error: 11_432
+			.saturating_add(Weight::from_parts(24_532_037, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(c.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -196,11 +195,11 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `335 + c * (124 ±0)`
 		//  Estimated: `1795 + c * (2600 ±0)`
-		// Minimum execution time: 4_537_000 picoseconds.
-		Weight::from_parts(4_617_000, 0)
+		// Minimum execution time: 6_510_000 picoseconds.
+		Weight::from_parts(6_660_000, 0)
 			.saturating_add(Weight::from_parts(0, 1795))
-			// Standard Error: 6_586
-			.saturating_add(Weight::from_parts(11_936_944, 0).saturating_mul(c.into()))
+			// Standard Error: 9_192
+			.saturating_add(Weight::from_parts(15_015_541, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -218,11 +217,11 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `1026 + c * (13 ±0)`
 		//  Estimated: `4295 + c * (15 ±0)`
-		// Minimum execution time: 12_959_000 picoseconds.
-		Weight::from_parts(21_350_620, 0)
+		// Minimum execution time: 20_840_000 picoseconds.
+		Weight::from_parts(28_805_122, 0)
 			.saturating_add(Weight::from_parts(0, 4295))
-			// Standard Error: 1_953
-			.saturating_add(Weight::from_parts(91_031, 0).saturating_mul(c.into()))
+			// Standard Error: 1_791
+			.saturating_add(Weight::from_parts(87_699, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(3))
 			.saturating_add(Weight::from_parts(0, 15).saturating_mul(c.into()))
@@ -236,11 +235,11 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `243 + c * (63 ±0)`
 		//  Estimated: `1722 + c * (2538 ±0)`
-		// Minimum execution time: 3_435_000 picoseconds.
-		Weight::from_parts(2_521_703, 0)
+		// Minimum execution time: 4_760_000 picoseconds.
+		Weight::from_parts(6_580_900, 0)
 			.saturating_add(Weight::from_parts(0, 1722))
-			// Standard Error: 9_038
-			.saturating_add(Weight::from_parts(3_133_666, 0).saturating_mul(c.into()))
+			// Standard Error: 2_207
+			.saturating_add(Weight::from_parts(3_764_182, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -272,11 +271,11 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `417 + c * (235 ±0)`
 		//  Estimated: `6357 + c * (235 ±0)`
-		// Minimum execution time: 37_968_000 picoseconds.
-		Weight::from_parts(40_085_228, 0)
+		// Minimum execution time: 55_481_000 picoseconds.
+		Weight::from_parts(56_521_438, 0)
 			.saturating_add(Weight::from_parts(0, 6357))
-			// Standard Error: 114_513
-			.saturating_add(Weight::from_parts(11_023_571, 0).saturating_mul(c.into()))
+			// Standard Error: 51_617
+			.saturating_add(Weight::from_parts(15_539_561, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().writes(8))
 			.saturating_add(Weight::from_parts(0, 235).saturating_mul(c.into()))
@@ -305,8 +304,8 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `417`
 		//  Estimated: `6357`
-		// Minimum execution time: 38_217_000 picoseconds.
-		Weight::from_parts(39_060_000, 0)
+		// Minimum execution time: 54_501_000 picoseconds.
+		Weight::from_parts(55_190_000, 0)
 			.saturating_add(Weight::from_parts(0, 6357))
 			.saturating_add(T::DbWeight::get().reads(12))
 			.saturating_add(T::DbWeight::get().writes(8))
@@ -317,10 +316,40 @@ impl<T: frame_system::Config> runtime_parachains::hrmp::WeightInfo for WeightInf
 		// Proof Size summary in bytes:
 		//  Measured:  `263`
 		//  Estimated: `3728`
-		// Minimum execution time: 9_014_000 picoseconds.
-		Weight::from_parts(9_324_000, 0)
+		// Minimum execution time: 14_291_000 picoseconds.
+		Weight::from_parts(15_030_000, 0)
 			.saturating_add(Weight::from_parts(0, 3728))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
+	/// Storage: `Paras::ParaLifecycles` (r:2 w:0)
+	/// Proof: `Paras::ParaLifecycles` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpOpenChannelRequests` (r:2 w:2)
+	/// Proof: `Hrmp::HrmpOpenChannelRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpChannels` (r:2 w:0)
+	/// Proof: `Hrmp::HrmpChannels` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpEgressChannelsIndex` (r:2 w:0)
+	/// Proof: `Hrmp::HrmpEgressChannelsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpOpenChannelRequestCount` (r:2 w:2)
+	/// Proof: `Hrmp::HrmpOpenChannelRequestCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpOpenChannelRequestsList` (r:1 w:1)
+	/// Proof: `Hrmp::HrmpOpenChannelRequestsList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
+	/// Storage: `Dmp::DownwardMessageQueues` (r:2 w:2)
+	/// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Dmp::DownwardMessageQueueHeads` (r:2 w:2)
+	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpIngressChannelsIndex` (r:2 w:0)
+	/// Proof: `Hrmp::HrmpIngressChannelsIndex` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	/// Storage: `Hrmp::HrmpAcceptedChannelRequestCount` (r:2 w:2)
+	/// Proof: `Hrmp::HrmpAcceptedChannelRequestCount` (`max_values`: None, `max_size`: None, mode: `Measured`)
+	fn establish_channel_with_system() -> Weight {
+		// Proof Size summary in bytes:
+		//  Measured:  `417`
+		//  Estimated: `6357`
+		// Minimum execution time: 92_531_000 picoseconds.
+		Weight::from_parts(93_341_000, 0)
+			.saturating_add(Weight::from_parts(0, 6357))
+			.saturating_add(T::DbWeight::get().reads(19))
+			.saturating_add(T::DbWeight::get().writes(11))
+	}
 }
diff --git a/relay/paseo/src/weights/runtime_parachains_inclusion.rs b/relay/paseo/src/weights/runtime_parachains_inclusion.rs
index d339c85..d27cb56 100644
--- a/relay/paseo/src/weights/runtime_parachains_inclusion.rs
+++ b/relay/paseo/src/weights/runtime_parachains_inclusion.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::inclusion`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::inclusion
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -60,11 +59,11 @@ impl<T: frame_system::Config> runtime_parachains::inclusion::WeightInfo for Weig
 		// Proof Size summary in bytes:
 		//  Measured:  `65761`
 		//  Estimated: `69051`
-		// Minimum execution time: 99_170_000 picoseconds.
-		Weight::from_parts(100_211_000, 0)
+		// Minimum execution time: 110_860_000 picoseconds.
+		Weight::from_parts(112_319_000, 0)
 			.saturating_add(Weight::from_parts(0, 69051))
-			// Standard Error: 62_711
-			.saturating_add(Weight::from_parts(91_070_605, 0).saturating_mul(i.into()))
+			// Standard Error: 81_457
+			.saturating_add(Weight::from_parts(101_899_036, 0).saturating_mul(i.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
 			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
diff --git a/relay/paseo/src/weights/runtime_parachains_initializer.rs b/relay/paseo/src/weights/runtime_parachains_initializer.rs
index 0a3e8e9..ccaacf9 100644
--- a/relay/paseo/src/weights/runtime_parachains_initializer.rs
+++ b/relay/paseo/src/weights/runtime_parachains_initializer.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::initializer`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::initializer
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -54,11 +53,11 @@ impl<T: frame_system::Config> runtime_parachains::initializer::WeightInfo for We
 		// Proof Size summary in bytes:
 		//  Measured:  `0 + d * (11 ±0)`
 		//  Estimated: `1480 + d * (11 ±0)`
-		// Minimum execution time: 2_104_000 picoseconds.
-		Weight::from_parts(5_205_799, 0)
+		// Minimum execution time: 2_628_000 picoseconds.
+		Weight::from_parts(2_773_000, 0)
 			.saturating_add(Weight::from_parts(0, 1480))
-			// Standard Error: 8
-			.saturating_add(Weight::from_parts(1_214, 0).saturating_mul(d.into()))
+			// Standard Error: 19
+			.saturating_add(Weight::from_parts(2_899, 0).saturating_mul(d.into()))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
 			.saturating_add(Weight::from_parts(0, 11).saturating_mul(d.into()))
diff --git a/relay/paseo/src/weights/runtime_parachains_paras.rs b/relay/paseo/src/weights/runtime_parachains_paras.rs
index 3f56207..c0fb616 100644
--- a/relay/paseo/src/weights/runtime_parachains_paras.rs
+++ b/relay/paseo/src/weights/runtime_parachains_paras.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::paras`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::paras
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -64,11 +63,11 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `8309`
 		//  Estimated: `11774`
-		// Minimum execution time: 22_734_000 picoseconds.
-		Weight::from_parts(573_531_062, 0)
+		// Minimum execution time: 26_825_000 picoseconds.
+		Weight::from_parts(199_932_582, 0)
 			.saturating_add(Weight::from_parts(0, 11774))
-			// Standard Error: 21
-			.saturating_add(Weight::from_parts(1_415, 0).saturating_mul(c.into()))
+			// Standard Error: 12
+			.saturating_add(Weight::from_parts(2_009, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(6))
 	}
@@ -79,11 +78,11 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 4_567_000 picoseconds.
-		Weight::from_parts(23_046_074, 0)
+		// Minimum execution time: 5_771_000 picoseconds.
+		Weight::from_parts(6_333_190, 0)
 			.saturating_add(Weight::from_parts(0, 0))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(817, 0).saturating_mul(s.into()))
+			// Standard Error: 0
+			.saturating_add(Weight::from_parts(926, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
 	/// Storage: `Paras::MostRecentContext` (r:0 w:1)
@@ -92,8 +91,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_333_000 picoseconds.
-		Weight::from_parts(2_504_000, 0)
+		// Minimum execution time: 2_852_000 picoseconds.
+		Weight::from_parts(2_998_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -120,11 +119,11 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `8489`
 		//  Estimated: `11954`
-		// Minimum execution time: 34_080_000 picoseconds.
-		Weight::from_parts(62_374_443, 0)
+		// Minimum execution time: 39_195_000 picoseconds.
+		Weight::from_parts(26_489_104, 0)
 			.saturating_add(Weight::from_parts(0, 11954))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(2_077, 0).saturating_mul(c.into()))
+			// Standard Error: 10
+			.saturating_add(Weight::from_parts(2_287, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(8))
 			.saturating_add(T::DbWeight::get().writes(7))
 	}
@@ -143,11 +142,11 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `164`
 		//  Estimated: `3629`
-		// Minimum execution time: 12_929_000 picoseconds.
-		Weight::from_parts(29_488_690, 0)
+		// Minimum execution time: 15_124_000 picoseconds.
+		Weight::from_parts(16_390_955, 0)
 			.saturating_add(Weight::from_parts(0, 3629))
-			// Standard Error: 3
-			.saturating_add(Weight::from_parts(836, 0).saturating_mul(s.into()))
+			// Standard Error: 1
+			.saturating_add(Weight::from_parts(936, 0).saturating_mul(s.into()))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -159,8 +158,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `4316`
 		//  Estimated: `7781`
-		// Minimum execution time: 13_951_000 picoseconds.
-		Weight::from_parts(14_682_000, 0)
+		// Minimum execution time: 16_625_000 picoseconds.
+		Weight::from_parts(17_358_000, 0)
 			.saturating_add(Weight::from_parts(0, 7781))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -178,11 +177,11 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `683`
 		//  Estimated: `4148`
-		// Minimum execution time: 67_772_000 picoseconds.
-		Weight::from_parts(103_252_267, 0)
+		// Minimum execution time: 73_790_000 picoseconds.
+		Weight::from_parts(71_425_185, 0)
 			.saturating_add(Weight::from_parts(0, 4148))
-			// Standard Error: 4
-			.saturating_add(Weight::from_parts(1_519, 0).saturating_mul(c.into()))
+			// Standard Error: 2
+			.saturating_add(Weight::from_parts(1_777, 0).saturating_mul(c.into()))
 			.saturating_add(T::DbWeight::get().reads(4))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -194,8 +193,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `28`
 		//  Estimated: `3493`
-		// Minimum execution time: 4_957_000 picoseconds.
-		Weight::from_parts(5_248_000, 0)
+		// Minimum execution time: 5_340_000 picoseconds.
+		Weight::from_parts(5_635_000, 0)
 			.saturating_add(Weight::from_parts(0, 3493))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -210,8 +209,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `26706`
 		//  Estimated: `30171`
-		// Minimum execution time: 86_429_000 picoseconds.
-		Weight::from_parts(89_235_000, 0)
+		// Minimum execution time: 103_303_000 picoseconds.
+		Weight::from_parts(108_843_000, 0)
 			.saturating_add(Weight::from_parts(0, 30171))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -234,8 +233,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `27360`
 		//  Estimated: `30825`
-		// Minimum execution time: 617_361_000 picoseconds.
-		Weight::from_parts(632_926_000, 0)
+		// Minimum execution time: 692_723_000 picoseconds.
+		Weight::from_parts(712_899_000, 0)
 			.saturating_add(Weight::from_parts(0, 30825))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(104))
@@ -250,8 +249,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `27338`
 		//  Estimated: `30803`
-		// Minimum execution time: 77_027_000 picoseconds.
-		Weight::from_parts(82_745_000, 0)
+		// Minimum execution time: 103_097_000 picoseconds.
+		Weight::from_parts(105_685_000, 0)
 			.saturating_add(Weight::from_parts(0, 30803))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -270,8 +269,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `26728`
 		//  Estimated: `30193`
-		// Minimum execution time: 483_108_000 picoseconds.
-		Weight::from_parts(494_204_000, 0)
+		// Minimum execution time: 552_095_000 picoseconds.
+		Weight::from_parts(563_757_000, 0)
 			.saturating_add(Weight::from_parts(0, 30193))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -286,8 +285,8 @@ impl<T: frame_system::Config> runtime_parachains::paras::WeightInfo for WeightIn
 		// Proof Size summary in bytes:
 		//  Measured:  `26706`
 		//  Estimated: `30171`
-		// Minimum execution time: 75_314_000 picoseconds.
-		Weight::from_parts(78_859_000, 0)
+		// Minimum execution time: 100_420_000 picoseconds.
+		Weight::from_parts(104_527_000, 0)
 			.saturating_add(Weight::from_parts(0, 30171))
 			.saturating_add(T::DbWeight::get().reads(3))
 			.saturating_add(T::DbWeight::get().writes(1))
diff --git a/relay/paseo/src/weights/runtime_parachains_paras_inherent.rs b/relay/paseo/src/weights/runtime_parachains_paras_inherent.rs
index 40a5967..ef1910a 100644
--- a/relay/paseo/src/weights/runtime_parachains_paras_inherent.rs
+++ b/relay/paseo/src/weights/runtime_parachains_paras_inherent.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `runtime_parachains::paras_inherent`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-11, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=runtime_parachains::paras_inherent
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/
+// --output=./polkadot-weights/
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -118,13 +117,13 @@ impl<T: frame_system::Config> runtime_parachains::paras_inherent::WeightInfo for
 	/// The range of component `v` is `[10, 200]`.
 	fn enter_variable_disputes(v: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `51666`
-		//  Estimated: `57606 + v * (23 ±0)`
-		// Minimum execution time: 779_085_000 picoseconds.
-		Weight::from_parts(434_524_808, 0)
-			.saturating_add(Weight::from_parts(0, 57606))
-			// Standard Error: 18_009
-			.saturating_add(Weight::from_parts(36_851_501, 0).saturating_mul(v.into()))
+		//  Measured:  `51598`
+		//  Estimated: `57538 + v * (23 ±0)`
+		// Minimum execution time: 857_876_000 picoseconds.
+		Weight::from_parts(471_641_113, 0)
+			.saturating_add(Weight::from_parts(0, 57538))
+			// Standard Error: 15_441
+			.saturating_add(Weight::from_parts(41_865_292, 0).saturating_mul(v.into()))
 			.saturating_add(T::DbWeight::get().reads(30))
 			.saturating_add(T::DbWeight::get().writes(16))
 			.saturating_add(Weight::from_parts(0, 23).saturating_mul(v.into()))
@@ -197,11 +196,11 @@ impl<T: frame_system::Config> runtime_parachains::paras_inherent::WeightInfo for
 	/// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn enter_bitfields() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `43468`
-		//  Estimated: `49408`
-		// Minimum execution time: 411_060_000 picoseconds.
-		Weight::from_parts(444_040_000, 0)
-			.saturating_add(Weight::from_parts(0, 49408))
+		//  Measured:  `43400`
+		//  Estimated: `49340`
+		// Minimum execution time: 453_770_000 picoseconds.
+		Weight::from_parts(480_123_000, 0)
+			.saturating_add(Weight::from_parts(0, 49340))
 			.saturating_add(T::DbWeight::get().reads(28))
 			.saturating_add(T::DbWeight::get().writes(17))
 	}
@@ -278,13 +277,13 @@ impl<T: frame_system::Config> runtime_parachains::paras_inherent::WeightInfo for
 	/// The range of component `v` is `[101, 200]`.
 	fn enter_backed_candidates_variable(v: u32, ) -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `43540`
-		//  Estimated: `49480`
-		// Minimum execution time: 4_753_565_000 picoseconds.
-		Weight::from_parts(1_128_619_184, 0)
-			.saturating_add(Weight::from_parts(0, 49480))
-			// Standard Error: 39_655
-			.saturating_add(Weight::from_parts(36_163_827, 0).saturating_mul(v.into()))
+		//  Measured:  `43472`
+		//  Estimated: `49412`
+		// Minimum execution time: 5_965_889_000 picoseconds.
+		Weight::from_parts(1_213_457_682, 0)
+			.saturating_add(Weight::from_parts(0, 49412))
+			// Standard Error: 29_636
+			.saturating_add(Weight::from_parts(47_432_915, 0).saturating_mul(v.into()))
 			.saturating_add(T::DbWeight::get().reads(31))
 			.saturating_add(T::DbWeight::get().writes(16))
 	}
@@ -364,11 +363,11 @@ impl<T: frame_system::Config> runtime_parachains::paras_inherent::WeightInfo for
 	/// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	fn enter_backed_candidate_code_upgrade() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `43567`
-		//  Estimated: `49507`
-		// Minimum execution time: 27_163_377_000 picoseconds.
-		Weight::from_parts(32_249_452_000, 0)
-			.saturating_add(Weight::from_parts(0, 49507))
+		//  Measured:  `43499`
+		//  Estimated: `49439`
+		// Minimum execution time: 35_783_528_000 picoseconds.
+		Weight::from_parts(38_857_285_000, 0)
+			.saturating_add(Weight::from_parts(0, 49439))
 			.saturating_add(T::DbWeight::get().reads(33))
 			.saturating_add(T::DbWeight::get().writes(16))
 	}
diff --git a/relay/paseo/src/weights/xcm/mod.rs b/relay/paseo/src/weights/xcm/mod.rs
index ff634d4..aedf270 100644
--- a/relay/paseo/src/weights/xcm/mod.rs
+++ b/relay/paseo/src/weights/xcm/mod.rs
@@ -35,9 +35,8 @@ pub enum AssetTypes {
 impl From<&Asset> for AssetTypes {
 	fn from(asset: &Asset) -> Self {
 		match asset {
-			Asset { id: AssetId(Location { parents: 0, interior: Here }), .. } => {
-				AssetTypes::Balances
-			},
+			Asset { id: AssetId(Location { parents: 0, interior: Here }), .. } =>
+				AssetTypes::Balances,
 			_ => AssetTypes::Unknown,
 		}
 	}
@@ -65,9 +64,8 @@ impl WeighAssets for AssetFilter {
 			// We don't support any NFTs on Polkadot, so these two variants will always match
 			// only 1 kind of fungible asset.
 			Self::Wild(AllOf { .. } | AllOfCounted { .. }) => balances_weight,
-			Self::Wild(AllCounted(count)) => {
-				balances_weight.saturating_mul(MAX_ASSETS.min(*count as u64))
-			},
+			Self::Wild(AllCounted(count)) =>
+				balances_weight.saturating_mul(MAX_ASSETS.min(*count as u64)),
 			Self::Wild(All) => balances_weight.saturating_mul(MAX_ASSETS),
 		}
 	}
diff --git a/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_fungible.rs b/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_fungible.rs
index 64f5fb2..ef33312 100644
--- a/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_fungible.rs
+++ b/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_fungible.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_xcm_benchmarks::fungible`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_xcm_benchmarks::fungible
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/xcm/pallet_xcm_benchmarks_fungible.rs
+// --output=./polkadot-weights/xcm/pallet_xcm_benchmarks_fungible.rs
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -53,8 +52,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `101`
 		//  Estimated: `3593`
-		// Minimum execution time: 24_787_000 picoseconds.
-		Weight::from_parts(25_337_000, 0)
+		// Minimum execution time: 28_060_000 picoseconds.
+		Weight::from_parts(28_457_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -65,8 +64,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `101`
 		//  Estimated: `6196`
-		// Minimum execution time: 34_313_000 picoseconds.
-		Weight::from_parts(35_232_000, 0)
+		// Minimum execution time: 37_623_000 picoseconds.
+		Weight::from_parts(38_316_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(2))
 			.saturating_add(T::DbWeight::get().writes(2))
@@ -83,10 +82,10 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn transfer_reserve_asset() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
+		//  Measured:  `177`
 		//  Estimated: `6196`
-		// Minimum execution time: 80_732_000 picoseconds.
-		Weight::from_parts(82_875_000, 0)
+		// Minimum execution time: 86_604_000 picoseconds.
+		Weight::from_parts(88_162_000, 0)
 			.saturating_add(Weight::from_parts(0, 6196))
 			.saturating_add(T::DbWeight::get().reads(6))
 			.saturating_add(T::DbWeight::get().writes(4))
@@ -113,11 +112,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn initiate_reserve_withdraw() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
-		//  Estimated: `3675`
-		// Minimum execution time: 50_916_000 picoseconds.
-		Weight::from_parts(53_110_000, 0)
-			.saturating_add(Weight::from_parts(0, 3675))
+		//  Measured:  `177`
+		//  Estimated: `3642`
+		// Minimum execution time: 56_851_000 picoseconds.
+		Weight::from_parts(58_247_000, 0)
+			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -127,8 +126,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `103`
 		//  Estimated: `3593`
-		// Minimum execution time: 25_588_000 picoseconds.
-		Weight::from_parts(26_260_000, 0)
+		// Minimum execution time: 27_981_000 picoseconds.
+		Weight::from_parts(28_770_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -139,8 +138,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `3593`
-		// Minimum execution time: 17_947_000 picoseconds.
-		Weight::from_parts(18_548_000, 0)
+		// Minimum execution time: 21_062_000 picoseconds.
+		Weight::from_parts(21_725_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -157,10 +156,10 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn deposit_reserve_asset() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
+		//  Measured:  `76`
 		//  Estimated: `3593`
-		// Minimum execution time: 44_146_000 picoseconds.
-		Weight::from_parts(46_400_000, 0)
+		// Minimum execution time: 52_039_000 picoseconds.
+		Weight::from_parts(53_336_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
@@ -177,10 +176,10 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn initiate_teleport() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
+		//  Measured:  `76`
 		//  Estimated: `3593`
-		// Minimum execution time: 34_592_000 picoseconds.
-		Weight::from_parts(35_935_000, 0)
+		// Minimum execution time: 40_169_000 picoseconds.
+		Weight::from_parts(40_967_000, 0)
 			.saturating_add(Weight::from_parts(0, 3593))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
diff --git a/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_generic.rs b/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_generic.rs
index 52380ce..54af4b2 100644
--- a/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_generic.rs
+++ b/relay/paseo/src/weights/xcm/pallet_xcm_benchmarks_generic.rs
@@ -13,27 +13,26 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-
 //! Autogenerated weights for `pallet_xcm_benchmarks::generic`
 //!
 //! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
-//! DATE: 2024-06-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
+//! DATE: 2024-03-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
 //! WORST CASE MAP SIZE: `1000000`
-//! HOSTNAME: `zur1-vm-benchpas-001`, CPU: `AMD EPYC 9354 32-Core Processor`
-//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./paseo-chain-spec.json")`, DB CACHE: 1024
+//! HOSTNAME: `ggwpez-ref-hw`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
+//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("./polkadot-chain-spec.json")`, DB CACHE: 1024
 
 // Executed Command:
-// ./polkadot
+// ./target/production/polkadot
 // benchmark
 // pallet
-// --chain=./paseo-chain-spec.json
+// --chain=./polkadot-chain-spec.json
 // --steps=50
 // --repeat=20
 // --pallet=pallet_xcm_benchmarks::generic
 // --extrinsic=*
 // --wasm-execution=compiled
 // --heap-pages=4096
-// --output=./paseo-weights/xcm/pallet_xcm_benchmarks_generic.rs
+// --output=./polkadot-weights/xcm/pallet_xcm_benchmarks_generic.rs
 // --header=./file_header.txt
 
 #![cfg_attr(rustfmt, rustfmt_skip)]
@@ -59,11 +58,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn report_holding() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
-		//  Estimated: `3675`
-		// Minimum execution time: 49_254_000 picoseconds.
-		Weight::from_parts(49_925_000, 0)
-			.saturating_add(Weight::from_parts(0, 3675))
+		//  Measured:  `177`
+		//  Estimated: `3642`
+		// Minimum execution time: 54_379_000 picoseconds.
+		Weight::from_parts(55_446_000, 0)
+			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -71,8 +70,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_121_000 picoseconds.
-		Weight::from_parts(1_272_000, 0)
+		// Minimum execution time: 1_320_000 picoseconds.
+		Weight::from_parts(1_444_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `XcmPallet::Queries` (r:1 w:0)
@@ -81,8 +80,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `3465`
-		// Minimum execution time: 4_026_000 picoseconds.
-		Weight::from_parts(4_306_000, 0)
+		// Minimum execution time: 5_095_000 picoseconds.
+		Weight::from_parts(5_262_000, 0)
 			.saturating_add(Weight::from_parts(0, 3465))
 			.saturating_add(T::DbWeight::get().reads(1))
 	}
@@ -90,56 +89,56 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 5_118_000 picoseconds.
-		Weight::from_parts(5_478_000, 0)
+		// Minimum execution time: 6_876_000 picoseconds.
+		Weight::from_parts(7_199_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn refund_surplus() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_512_000 picoseconds.
-		Weight::from_parts(1_702_000, 0)
+		// Minimum execution time: 1_667_000 picoseconds.
+		Weight::from_parts(1_895_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn set_error_handler() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_032_000 picoseconds.
-		Weight::from_parts(1_192_000, 0)
+		// Minimum execution time: 1_245_000 picoseconds.
+		Weight::from_parts(1_330_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn set_appendix() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_082_000 picoseconds.
-		Weight::from_parts(1_202_000, 0)
+		// Minimum execution time: 1_245_000 picoseconds.
+		Weight::from_parts(1_342_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn clear_error() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_042_000 picoseconds.
-		Weight::from_parts(1_182_000, 0)
+		// Minimum execution time: 1_204_000 picoseconds.
+		Weight::from_parts(1_333_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn descend_origin() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_142_000 picoseconds.
-		Weight::from_parts(1_302_000, 0)
+		// Minimum execution time: 1_357_000 picoseconds.
+		Weight::from_parts(1_440_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn clear_origin() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_091_000 picoseconds.
-		Weight::from_parts(1_202_000, 0)
+		// Minimum execution time: 1_248_000 picoseconds.
+		Weight::from_parts(1_354_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
@@ -154,11 +153,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn report_error() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
-		//  Estimated: `3675`
-		// Minimum execution time: 47_370_000 picoseconds.
-		Weight::from_parts(48_513_000, 0)
-			.saturating_add(Weight::from_parts(0, 3675))
+		//  Measured:  `177`
+		//  Estimated: `3642`
+		// Minimum execution time: 51_984_000 picoseconds.
+		Weight::from_parts(53_110_000, 0)
+			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -168,8 +167,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `23`
 		//  Estimated: `3488`
-		// Minimum execution time: 6_810_000 picoseconds.
-		Weight::from_parts(7_201_000, 0)
+		// Minimum execution time: 8_243_000 picoseconds.
+		Weight::from_parts(8_545_000, 0)
 			.saturating_add(Weight::from_parts(0, 3488))
 			.saturating_add(T::DbWeight::get().reads(1))
 			.saturating_add(T::DbWeight::get().writes(1))
@@ -178,8 +177,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_071_000 picoseconds.
-		Weight::from_parts(1_202_000, 0)
+		// Minimum execution time: 1_232_000 picoseconds.
+		Weight::from_parts(1_309_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `XcmPallet::VersionNotifyTargets` (r:1 w:1)
@@ -194,11 +193,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn subscribe_version() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `109`
-		//  Estimated: `3574`
-		// Minimum execution time: 21_883_000 picoseconds.
-		Weight::from_parts(22_383_000, 0)
-			.saturating_add(Weight::from_parts(0, 3574))
+		//  Measured:  `76`
+		//  Estimated: `3541`
+		// Minimum execution time: 24_891_000 picoseconds.
+		Weight::from_parts(25_385_000, 0)
+			.saturating_add(Weight::from_parts(0, 3541))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -208,8 +207,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 2_944_000 picoseconds.
-		Weight::from_parts(3_135_000, 0)
+		// Minimum execution time: 3_377_000 picoseconds.
+		Weight::from_parts(3_538_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 			.saturating_add(T::DbWeight::get().writes(1))
 	}
@@ -217,40 +216,40 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_442_000 picoseconds.
-		Weight::from_parts(1_573_000, 0)
+		// Minimum execution time: 1_576_000 picoseconds.
+		Weight::from_parts(1_683_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn expect_asset() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_252_000 picoseconds.
-		Weight::from_parts(1_372_000, 0)
+		// Minimum execution time: 1_374_000 picoseconds.
+		Weight::from_parts(1_514_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn expect_origin() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_092_000 picoseconds.
-		Weight::from_parts(1_192_000, 0)
+		// Minimum execution time: 1_236_000 picoseconds.
+		Weight::from_parts(1_305_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn expect_error() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_111_000 picoseconds.
-		Weight::from_parts(1_232_000, 0)
+		// Minimum execution time: 1_234_000 picoseconds.
+		Weight::from_parts(1_328_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn expect_transact_status() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_262_000 picoseconds.
-		Weight::from_parts(1_412_000, 0)
+		// Minimum execution time: 1_411_000 picoseconds.
+		Weight::from_parts(1_529_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
@@ -265,11 +264,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn query_pallet() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
-		//  Estimated: `3675`
-		// Minimum execution time: 55_984_000 picoseconds.
-		Weight::from_parts(57_506_000, 0)
-			.saturating_add(Weight::from_parts(0, 3675))
+		//  Measured:  `177`
+		//  Estimated: `3642`
+		// Minimum execution time: 59_911_000 picoseconds.
+		Weight::from_parts(61_081_000, 0)
+			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -277,8 +276,8 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 8_383_000 picoseconds.
-		Weight::from_parts(8_943_000, 0)
+		// Minimum execution time: 7_056_000 picoseconds.
+		Weight::from_parts(7_335_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	/// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
@@ -293,11 +292,11 @@ impl<T: frame_system::Config> WeightInfo<T> {
 	/// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
 	pub(crate) fn report_transact_status() -> Weight {
 		// Proof Size summary in bytes:
-		//  Measured:  `210`
-		//  Estimated: `3675`
-		// Minimum execution time: 47_130_000 picoseconds.
-		Weight::from_parts(49_494_000, 0)
-			.saturating_add(Weight::from_parts(0, 3675))
+		//  Measured:  `177`
+		//  Estimated: `3642`
+		// Minimum execution time: 52_551_000 picoseconds.
+		Weight::from_parts(53_741_000, 0)
+			.saturating_add(Weight::from_parts(0, 3642))
 			.saturating_add(T::DbWeight::get().reads(5))
 			.saturating_add(T::DbWeight::get().writes(3))
 	}
@@ -305,40 +304,40 @@ impl<T: frame_system::Config> WeightInfo<T> {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_102_000 picoseconds.
-		Weight::from_parts(1_251_000, 0)
+		// Minimum execution time: 1_298_000 picoseconds.
+		Weight::from_parts(1_415_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn set_topic() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_051_000 picoseconds.
-		Weight::from_parts(1_181_000, 0)
+		// Minimum execution time: 1_265_000 picoseconds.
+		Weight::from_parts(1_328_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn clear_topic() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_041_000 picoseconds.
-		Weight::from_parts(1_201_000, 0)
+		// Minimum execution time: 1_245_000 picoseconds.
+		Weight::from_parts(1_336_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn set_fees_mode() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_062_000 picoseconds.
-		Weight::from_parts(1_162_000, 0)
+		// Minimum execution time: 1_191_000 picoseconds.
+		Weight::from_parts(1_325_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 	pub(crate) fn unpaid_execution() -> Weight {
 		// Proof Size summary in bytes:
 		//  Measured:  `0`
 		//  Estimated: `0`
-		// Minimum execution time: 1_051_000 picoseconds.
-		Weight::from_parts(1_202_000, 0)
+		// Minimum execution time: 1_230_000 picoseconds.
+		Weight::from_parts(1_345_000, 0)
 			.saturating_add(Weight::from_parts(0, 0))
 	}
 }
diff --git a/relay/paseo/src/xcm_config.rs b/relay/paseo/src/xcm_config.rs
index 277289b..d4a18b6 100644
--- a/relay/paseo/src/xcm_config.rs
+++ b/relay/paseo/src/xcm_config.rs
@@ -1,20 +1,20 @@
 // Copyright (C) Parity Technologies (UK) Ltd.
-// This file is part of Paseo.
+// This file is part of Polkadot.
 
-// Paseo is free software: you can redistribute it and/or modify
+// Polkadot is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
 // the Free Software Foundation, either version 3 of the License, or
 // (at your option) any later version.
 
-// Paseo is distributed in the hope that it will be useful,
+// Polkadot is distributed in the hope that it will be useful,
 // but WITHOUT ANY WARRANTY; without even the implied warranty of
 // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // GNU General Public License for more details.
 
 // You should have received a copy of the GNU General Public License
-// along with Paseo.  If not, see <http://www.gnu.org/licenses/>.
+// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
 
-//! XCM configuration for Paseo.
+//! XCM configuration for Polkadot.
 
 use super::{
 	parachains_origin, AccountId, AllPalletsWithSystem, Balances, Dmp, FellowshipAdmin,
@@ -31,7 +31,7 @@ use polkadot_runtime_common::{
 	xcm_sender::{ChildParachainRouter, ExponentialPrice},
 	ToAuthor,
 };
-use paseo_runtime_constants::{
+use polkadot_runtime_constants::{
 	currency::CENTS, system_parachain::*, xcm::body::FELLOWSHIP_ADMIN_INDEX,
 };
 use sp_core::ConstU32;
@@ -48,11 +48,11 @@ use xcm_builder::{
 
 parameter_types! {
 	pub const RootLocation: Location = Here.into_location();
-	/// The location of the PAS token, from the context of this chain. Since this token is native to this
+	/// The location of the DOT token, from the context of this chain. Since this token is native to this
 	/// chain, we make it synonymous with it and thus it is the `Here` location, which means "equivalent to
 	/// the context".
 	pub const TokenLocation: Location = Here.into_location();
-	/// The Polkadot network ID. This is named. TODO To rename to Paseo.
+	/// The Polkadot network ID. This is named.
 	pub const ThisNetwork: NetworkId = NetworkId::Polkadot;
 	/// Our location in the universe of consensus systems.
 	pub UniversalLocation: InteriorLocation = [GlobalConsensus(ThisNetwork::get())].into();
@@ -142,7 +142,7 @@ parameter_types! {
 	pub const MaxAssetsIntoHolding: u32 = 64;
 }
 
-/// Paseo Relay recognizes/respects AssetHub, Collectives, and BridgeHub chains as teleporters.
+/// Polkadot Relay recognizes/respects AssetHub, Collectives, and BridgeHub chains as teleporters.
 pub type TrustedTeleporters = (
 	xcm_builder::Case<DotForAssetHub>,
 	xcm_builder::Case<DotForCollectives>,
@@ -154,8 +154,8 @@ impl Contains<Location> for CollectivesOrFellows {
 	fn contains(loc: &Location) -> bool {
 		matches!(
 			loc.unpack(),
-			(0, [Parachain(COLLECTIVES_ID)])
-				| (0, [Parachain(COLLECTIVES_ID), Plurality { id: BodyId::Technical, .. }])
+			(0, [Parachain(COLLECTIVES_ID)]) |
+				(0, [Parachain(COLLECTIVES_ID), Plurality { id: BodyId::Technical, .. }])
 		)
 	}
 }
@@ -204,7 +204,7 @@ impl xcm_executor::Config for XcmConfig {
 	type XcmSender = XcmRouter;
 	type AssetTransactor = LocalAssetTransactor;
 	type OriginConverter = LocalOriginConverter;
-	// Paseo Relay recognises no chains which act as reserves.
+	// Polkadot Relay recognises no chains which act as reserves.
 	type IsReserve = ();
 	type IsTeleporter = TrustedTeleporters;
 	type UniversalLocation = UniversalLocation;
