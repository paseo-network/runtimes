name: Generate Local Chain Specs

on:
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-chain-specs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y git protobuf-compiler

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          target: wasm32v1-none
          components: rust-src
          override: true

      - name: Add rust-src
        run: rustup component add rust-src --toolchain 1.81.0-x86_64-unknown-linux-gnu

      - name: Rust cache
        uses: Swatinem/rust-cache@v2.8.1
        with:
          cache-on-failure: true

      - name: Install pop
        run: |
          cargo install --git https://github.com/r0gue-io/pop-cli.git --branch main

      - name: Generate chain specs
        run: |
          mkdir -p chain-specs/local
        
          PACKAGES=(
            "paseo-local"
            "paseo-dev"
            "asset-hub-paseo-local"
            "bridge-hub-paseo-local"
            "collectives-paseo-local"
            "people-paseo-local"
            "coretime-paseo-local"
          )

          get_package_params() {
            local pkg="$1"

            ## Clean variables just in case
            NAME="" ID="" PARA_ID="" RUNTIME="" RELAY="" PROTOCOL_ID="" TYPE="" CHAIN=""
            case "$pkg" in
              paseo-local)
                NAME="Paseo Local Testnet"
                ID="paseo-local"
                RUNTIME="relay/paseo"
                PROTOCOL_ID="pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              paseo-dev)
                NAME="Paseo Dev"
                ID="paseo-dev"
                RUNTIME="relay/paseo"
                PROTOCOL_ID="pas"
                TYPE="development"
                CHAIN="development"
                ;;
              asset-hub-paseo-local)
                NAME="Asset Hub Paseo Local"
                ID="asset-hub-paseo-local"
                PARA_ID=1000
                RUNTIME="system-parachains/asset-hub-paseo"
                RELAY="paseo-local"
                PROTOCOL_ID="ah-pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              bridge-hub-paseo-local)
                NAME="Bridge Hub Paseo Local"
                ID="bridge-hub-paseo-local"
                PARA_ID=1002
                RUNTIME="system-parachains/bridge-hub-paseo"
                RELAY="paseo-local"
                PROTOCOL_ID="bh-pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              collectives-paseo-local)
                NAME="Collectives Paseo Local"
                ID="collectives-paseo-local"
                PARA_ID=1001
                RUNTIME="system-parachains/collectives-paseo"
                RELAY="paseo-local"
                PROTOCOL_ID="col-pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              people-paseo-local)
                NAME="People Paseo Local"
                ID="people-paseo-local"
                PARA_ID=1004
                RUNTIME="system-parachains/people-paseo"
                RELAY="paseo-local"
                PROTOCOL_ID="pc-pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              coretime-paseo-local)
                NAME="Coretime Paseo Local"
                ID="coretime-paseo-local"
                PARA_ID=1005
                RUNTIME="system-parachains/coretime-paseo"
                RELAY="paseo-local"
                PROTOCOL_ID="ct-pas"
                TYPE="local"
                CHAIN="local_tesnet"
                ;;
              *)
                echo "‚ö†Ô∏è  No config found for $pkg"
                return 1
                ;;
            esac
          }

          for pkg in "${PACKAGES[@]}"; do
            echo "üöÄ Generating spec para $pkg..."
            get_package_params "$pkg"

            ARGS=(
              --profile release 
              --name "$NAME"
              --id "$ID"
              --type "$TYPE" 
              --chain "$CHAIN" 
              --output "chain_specs/local/${pkg}.json"
              --properties ss58Format=0,tokenDecimals=10,tokenSymbol="PAS"
              --protocol-id "$PROTOCOL_ID"
              --default-bootnode=false 
              --genesis-code=true
              --genesis-state=true
              --deterministic=false
            )

            [[ -n "${PARA_ID:-}" ]] && ARGS+=(--para-id "$PARA_ID")
            [[ -n "${RELAY:-}" ]] && ARGS+=(--relay "$RELAY")
            [[ -n "${RUNTIME:-}" ]] && ARGS+=(--runtime "$RUNTIME")

            pop build spec "${ARGS[@]}"

            echo "‚úÖ Spec generated for: ${pkg}"
          done

      - name: Upload chain specs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: chain-specs
          path: chain-specs/
          retention-days: 1

  commit-changes:
    needs: generate-chain-specs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download chain specs artifacts
        uses: actions/download-artifact@v4
        with:
          name: chain-specs
          path: chain-specs/
      
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.PASEO_CI_PAT }}

      - name: Commit changes
        run: |
          # Add all chain spec files using glob pattern
          git add chain-specs/local/*.json
          
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes detected in chain specs. Skipping commit."
          else
            # List the files that will be committed
            echo "Changes detected in the following files:"
            git diff --staged --name-status
            
            COMMIT_MESSAGE="Update chain specs for version ${{ inputs.tag_version }}"
            git commit -m "$COMMIT_MESSAGE"
            git push
            echo "Changes committed and pushed successfully."
          fi
