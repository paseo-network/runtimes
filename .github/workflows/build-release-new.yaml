name: Create Runtimes Release (new)

on:
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Tag version for the release'
        required: true
        type: string
      tag_suffix:
        description: 'Tag suffix to use (none for all packages)'
        required: true
        type: choice
        options:
          - none
          - relay
          - parachains
        default: 'none'
      build_paseo:
        description: 'Build paseo relay runtime'
        type: boolean
        default: false
      build_asset_hub_paseo:
        description: 'Build asset-hub-paseo runtime'
        type: boolean
        default: false
      build_bridge_hub_paseo:
        description: 'Build bridge-hub-paseo runtime'
        type: boolean
        default: false
      build_collectives_paseo:
        description: 'Build collectives-paseo runtime'
        type: boolean
        default: false
      build_people_paseo:
        description: 'Build people-paseo runtime'
        type: boolean
        default: false
      build_coretime_paseo:
        description: 'Build coretime-paseo runtime'
        type: boolean
        default: false

jobs:
  generate-chain-specs:
    uses: ./.github/workflows/generate-chain-specs-new.yaml
    permissions:
      contents: write
      packages: write
    with:
      tag_version: ${{ github.event.inputs.tag_version }}
      tag_suffix: ${{ github.event.inputs.tag_suffix }}
      build_paseo: ${{ fromJSON(github.event.inputs.build_paseo) }}
      build_asset_hub_paseo: ${{ fromJSON(github.event.inputs.build_asset_hub_paseo) }}
      build_bridge_hub_paseo: ${{ fromJSON(github.event.inputs.build_bridge_hub_paseo) }}
      build_collectives_paseo: ${{ fromJSON(github.event.inputs.build_collectives_paseo) }}
      build_people_paseo: ${{ fromJSON(github.event.inputs.build_people_paseo) }}
      build_coretime_paseo: ${{ fromJSON(github.event.inputs.build_coretime_paseo) }}

  create-tag:
    needs: generate-chain-specs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.CI_PAT }}

      - name: Create and push tag
        run: |
          git checkout ${{ github.ref }}
          if [ "${{ github.event.inputs.tag_suffix }}" == "none" ]; then
            TAG="${{ github.event.inputs.tag_version }}"
          else
            TAG="${{ github.event.inputs.tag_version }}-${{ github.event.inputs.tag_suffix }}"
          fi
          git tag $TAG
          git push origin $TAG
        
      - name: Set outputs
        id: set_outputs
        run: |
          if [ "${{ github.event.inputs.tag_suffix }}" == "none" ]; then
            echo "release_tag=${{ github.event.inputs.tag_version }}" >> $GITHUB_OUTPUT
          else
            echo "release_tag=${{ github.event.inputs.tag_version }}-${{ github.event.inputs.tag_suffix }}" >> $GITHUB_OUTPUT
          fi

    outputs:
      release_tag: ${{ steps.set_outputs.outputs.release_tag }}

  build-runtimes:
    needs: create-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          # Relay chain runtime
          - name: "paseo"
            path: "relay/paseo"
            package_type: "relay"
          # Parachain runtimes
          - name: "asset-hub-paseo"
            path: "system-parachains/asset-hub-paseo"
            package_type: "parachains"
          - name: "bridge-hub-paseo"
            path: "system-parachains/bridge-hub-paseo"
            package_type: "parachains"
          - name: "collectives-paseo"
            path: "system-parachains/collectives-paseo"
            package_type: "parachains"
          - name: "people-paseo"
            path: "system-parachains/people-paseo"
            package_type: "parachains"
          - name: "coretime-paseo"
            path: "system-parachains/coretime-paseo"
            package_type: "parachains"

    steps:
      - name: Check package type
        id: check_package
        run: |
          should_run=false
          case "${{ matrix.name }}" in
            "paseo")
              if [[ "${{ github.event.inputs.build_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
            "asset-hub-paseo")
              if [[ "${{ github.event.inputs.build_asset_hub_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
            "bridge-hub-paseo")
              if [[ "${{ github.event.inputs.build_bridge_hub_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
            "collectives-paseo")
              if [[ "${{ github.event.inputs.build_collectives_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
            "people-paseo")
              if [[ "${{ github.event.inputs.build_people_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
            "coretime-paseo")
              if [[ "${{ github.event.inputs.build_coretime_paseo }}" == "true" ]]; then
                should_run=true
              fi
              ;;
          esac
          echo "should_run=$should_run" >> $GITHUB_OUTPUT

      - name: Checkout sources
        if: steps.check_package.outputs.should_run == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.release_tag }}
          fetch-depth: 0  # Fetch all history and tags
          fetch-tags: true  # Explicitly fetch all tags

      - name: Cache runtime target dir
        if: steps.check_package.outputs.should_run == 'true'
        uses: actions/cache@v3
        with:
          path: "${{ github.workspace }}/${{ matrix.path }}/target"
          key: srtool-target-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            srtool-target-${{ matrix.name }}-
            srtool-target-

      - name: Build ${{ matrix.name }} runtime
        if: steps.check_package.outputs.should_run == 'true'
        id: srtool_build
        uses: chevdor/srtool-actions@v0.8.0
        env:
          BUILD_OPTS: "--features on-chain-release-build"
        with:
          chain: ${{ matrix.name }}
          package: "${{ matrix.name }}-runtime"
          runtime_dir: ${{ matrix.path }}
          profile: "production"

      - name: Store srtool digest to disk
        if: steps.check_package.outputs.should_run == 'true'
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq . > ${{ matrix.name }}-srtool-digest.json

      # Get the compressed WASM file
      - name: Copy compressed WASM
        if: steps.check_package.outputs.should_run == 'true'
        run: |
          # Copy only the compressed WASM file
          cp ${{ steps.srtool_build.outputs.wasm_compressed }} ./${{ matrix.name }}_runtime.compressed.wasm

      - name: Archive Runtime
        if: steps.check_package.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-runtime-${{ needs.create-tag.outputs.release_tag }}
          path: |
            ${{ matrix.name }}_runtime.compressed.wasm
            ${{ matrix.name }}-srtool-digest.json

      - name: Prepare release notes
        if: steps.check_package.outputs.should_run == 'true'
        id: release_notes
        run: |
          {
            echo "### Runtime: \`${{ matrix.name }}\`"
            echo "\`\`\`"
            echo "🏋️ Runtime Size:           ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.size }} bytes"
            echo "🔥 Core Version:           ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.core_version.specName }}-${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.core_version.specVersion }}"
            echo "🎁 Metadata version:       V${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.metadata_version }}"
            echo "🗳️ system.setCode hash:    ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.proposal_hash }}"
            echo "🗳️ authorizeUpgrade hash:  ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.parachain_authorize_upgrade_hash }}"
            echo "🗳️ Blake2-256 hash:        ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.blake2_256 }}"
            echo "📦 IPFS:                   ${{ fromJSON(steps.srtool_build.outputs.json).runtimes.compressed.subwasm.ipfs_hash }}"
            echo "\`\`\`"
          } > runtime_notes_${{ matrix.name }}.md
          echo "notes_file=runtime_notes_${{ matrix.name }}.md" >> $GITHUB_OUTPUT

      - name: Upload release notes
        if: steps.check_package.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-notes-${{ matrix.name }}
          path: ${{ steps.release_notes.outputs.notes_file }}

  create-release:
    needs: [create-tag, build-runtimes]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-tag.outputs.release_tag }}
          fetch-depth: 0  # Fetch all history and tags
          fetch-tags: true  # Explicitly fetch all tags
      
      - name: Ensure all tags are fetched
        run: |
          git fetch --tags --force
          echo "All available tags:"
          git tag

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release notes
        run: |
          # Add information about the release
          echo "## Release Information" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **Tag Version:** ${{ github.event.inputs.tag_version }}" >> release_notes.md
          echo "- **Tag Suffix:** ${{ github.event.inputs.tag_suffix }}" >> release_notes.md
          echo "- **Runtimes Built:**" >> release_notes.md
          if [ "${{ github.event.inputs.build_paseo }}" == "true" ]; then
            echo "  - Paseo" >> release_notes.md
          fi
          if [ "${{ github.event.inputs.build_asset_hub_paseo }}" == "true" ]; then
            echo "  - Asset Hub Paseo" >> release_notes.md
          fi
          if [ "${{ github.event.inputs.build_bridge_hub_paseo }}" == "true" ]; then
            echo "  - Bridge Hub Paseo" >> release_notes.md
          fi
          if [ "${{ github.event.inputs.build_collectives_paseo }}" == "true" ]; then
            echo "  - Collectives Paseo" >> release_notes.md
          fi
          if [ "${{ github.event.inputs.build_people_paseo }}" == "true" ]; then
            echo "  - People Paseo" >> release_notes.md
          fi
          if [ "${{ github.event.inputs.build_coretime_paseo }}" == "true" ]; then
            echo "  - Coretime Paseo" >> release_notes.md
          fi
          echo "" >> release_notes.md
          
          # Get the latest release tag of the same kind
          if [ "${{ github.event.inputs.tag_suffix }}" == "none" ]; then
            # For "none" tag suffix, look for tags without suffixes or with v prefix
            # First list all tags and debug them
            echo "Previous tag detection debug:"
            echo "1. All tags available:"
            git tag
            echo "2. Command output test:"
            git tag --sort=-v:refname | grep -v "${{ needs.create-tag.outputs.release_tag }}" | grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+" | head -n 1
            
            # Get previous tag excluding current tag, filtering by version-like pattern
            LATEST_RELEASE_TAG=$(git tag --sort=-v:refname | grep -v "${{ needs.create-tag.outputs.release_tag }}" | grep -E "^v?[0-9]+\.[0-9]+\.[0-9]+" | head -n 1)
          else
            # For specific tag suffixes, look for tags with the same suffix
            echo "Previous tag detection debug (with suffix):"
            echo "1. All tags available:"
            git tag
            echo "2. Command output test:"
            git tag --sort=-v:refname | grep -v "${{ needs.create-tag.outputs.release_tag }}" | grep -- "-${{ github.event.inputs.tag_suffix }}$" | head -n 1
            
            LATEST_RELEASE_TAG=$(git tag --sort=-v:refname | grep -v "${{ needs.create-tag.outputs.release_tag }}" | grep -- "-${{ github.event.inputs.tag_suffix }}\$" | head -n 1)
          fi
          
          echo "Debug: Latest release tag found: $LATEST_RELEASE_TAG"
          # Add list of changes since the last release
          if [ -n "$LATEST_RELEASE_TAG" ]; then
            echo "🚀 What's Changed" >> release_notes.md
            echo "" >> release_notes.md
            echo "\`\`\`" >> release_notes.md
            echo "" >> release_notes.md
            # First try to get commits that include issue numbers
            COMMITS_WITH_ISSUES=$(git log --pretty=format:"* %h %s (%an)" --grep="#[0-9]" $LATEST_RELEASE_TAG..${{ needs.create-tag.outputs.release_tag }})
            
            # If we didn't find any, just get all non-merge commits
            if [ -z "$COMMITS_WITH_ISSUES" ]; then
              # Not commits with issues found, get all merge commits
              git log --pretty=format:"* %h %s (%an)" --merges $LATEST_RELEASE_TAG..${{ needs.create-tag.outputs.release_tag }} >> release_notes.md
            else
              echo "$COMMITS_WITH_ISSUES" >> release_notes.md
            fi
            echo "\`\`\`" >> release_notes.md
            echo "" >> release_notes.md
            echo "📝 **Compare Changes:** [${LATEST_RELEASE_TAG}...${{ needs.create-tag.outputs.release_tag }}](https://github.com/${{ github.repository }}/compare/${LATEST_RELEASE_TAG}...${{ needs.create-tag.outputs.release_tag }})" >> release_notes.md
          else
            echo "## Changes" >> release_notes.md
            echo "" >> release_notes.md
            echo "No previous release of the same kind was found to compare changes." >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## Runtime Details" >> release_notes.md
          echo "" >> release_notes.md
          
          # Look for all release note files
          if ls artifacts/release-notes-*/runtime_notes_*.md 1> /dev/null 2>&1; then
            for notes_file in artifacts/release-notes-*/runtime_notes_*.md; do
              cat "$notes_file" >> release_notes.md
              echo "" >> release_notes.md
            done
          else
            echo "No runtime notes were found. This could indicate that no runtimes were built for the selected tag suffix." >> release_notes.md
          fi
          
          cat release_notes.md

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.CI_PAT }}
        run: |         
          # Prepare files for upload
          UPLOAD_FILES=""
          for file in artifacts/*-runtime-*/*_runtime.compressed.wasm artifacts/*-runtime-*/*-srtool-digest.json; do
            UPLOAD_FILES="$UPLOAD_FILES $file"
          done
          
          # Create the release with the notes
          gh release create ${{ needs.create-tag.outputs.release_tag }} \
            --title "Release ${{ needs.create-tag.outputs.release_tag }}" \
            --notes-file release_notes.md \
            --prerelease \
            $UPLOAD_FILES
